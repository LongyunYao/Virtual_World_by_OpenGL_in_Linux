cscope 15 $HOME/dev/C++/backup/square_demo_V7.0               0001151323
	@/home/yunyao/dev/C++/backup/square_demo_V7.0/HBuilding.h

13 #i‚de‡
__HBUILDING_H_


14 
	#__HBUILDING_H_


	)

15 
	~<GL/gl.h
>

17 ˛as†
	cHBuûdög
{

18 
	m¥iv©e
:

19 
GLÊﬂt
 
x
, 
	my
, 
	mz
;

20 
GLÊﬂt
 
	mu
, 
	mv
;

21 
	mpublic
:

33 
	$HBuûdög
(){

35 
	$HBuûdög
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
){

36 
this
->
x
 = x;

37 
this
->
y
 = y;

38 
this
->
z
 = z;

39 
	}
}

40 
	$HBuûdög
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
u
, GLÊﬂà
v
){

41 
this
->
x
 = x;

42 
this
->
y
 = y;

43 
this
->
z
 = z;

44 
this
->
u
 = u;

45 
this
->
v
 = v;

46 
	}
}

48 
	$£tX
(
GLÊﬂt
 
x
){

49 
this
->
x
 = x;

50 
	}
}

51 
	$£tY
(
GLÊﬂt
 
y
){

52 
this
->
y
 = y;

53 
	}
}

54 
	$£tZ
(
GLÊﬂt
 
z
){

55 
this
->
z
 = z;

56 
	}
}

57 
	$£tU
(
GLÊﬂt
 
u
){

58 
this
->
u
 = u;

59 
	}
}

60 
	$£tV
(
GLÊﬂt
 
v
){

61 
this
->
v
 = v;

62 
	}
}

74 
	$døwHBuûdög
(){

75 
	`glBegö
(
GL_QUADS
);

78 
	`glTexCo‹d2f
(0.0f, 
z
);

79 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

80 
	`glTexCo‹d2f
(0.0f, 0.0f);

81 
	`glVîãx3f
(0.0f, 
y
, 
z
);

82 
	`glTexCo‹d2f
(
x
, 0.0f);

83 
	`glVîãx3f
(
x
, 
y
, 
z
);

84 
	`glTexCo‹d2f
(
x
, 
z
);

85 
	`glVîãx3f
(
x
, 
y
, 0.0f);

88 
	`glTexCo‹d2f
(0.0f, 
z
);

89 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

90 
	`glTexCo‹d2f
(0.0f, 0.0f);

91 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

92 
	`glTexCo‹d2f
(
x
, 0.0f);

93 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

94 
	`glTexCo‹d2f
(
x
, 
z
);

95 
	`glVîãx3f
(
x
, 0.0f, 
z
);

98 
	`glTexCo‹d2f
(0.0f, 
z
);

99 
	`glVîãx3f
(0.0f, 
y
, 
z
);

100 
	`glTexCo‹d2f
(0.0f, 0.0f);

101 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

102 
	`glTexCo‹d2f
(
x
, 0.0f);

103 
	`glVîãx3f
(
x
, 0.0f, 
z
);

104 
	`glTexCo‹d2f
(
x
, 
z
);

105 
	`glVîãx3f
(
x
, 
y
, 
z
);

108 
	`glTexCo‹d2f
(0.0f, 
z
);

109 
	`glVîãx3f
(
x
, 
y
, 0.0f);

110 
	`glTexCo‹d2f
(0.0f, 0.0f);

111 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

112 
	`glTexCo‹d2f
(
x
, 0.0f);

113 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

114 
	`glTexCo‹d2f
(
x
, 
z
);

115 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

118 
	`glTexCo‹d2f
(0.0f, 
z
);

119 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

120 
	`glTexCo‹d2f
(0.0f, 0.0f);

121 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

122 
	`glTexCo‹d2f
(
x
, 0.0f);

123 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

124 
	`glTexCo‹d2f
(
x
, 
z
);

125 
	`glVîãx3f
(0.0f, 
y
, 
z
);

128 
	`glTexCo‹d2f
(0.0f, 
z
);

129 
	`glVîãx3f
(
x
, 
y
, 
z
);

130 
	`glTexCo‹d2f
(0.0f, 0.0f);

131 
	`glVîãx3f
(
x
, 0.0f, 
z
);

132 
	`glTexCo‹d2f
(
x
, 0.0f);

133 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

134 
	`glTexCo‹d2f
(
x
, 
z
);

135 
	`glVîãx3f
(
x
, 
y
, 0.0f);

136 
	`glEnd
();

137 
	}
}

140 
	$døwHBuûdög
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
){

141 
	`glBegö
(
GL_QUADS
);

144 
	`glTexCo‹d2f
(0.0f, 
z
);

145 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

146 
	`glTexCo‹d2f
(0.0f, 0.0f);

147 
	`glVîãx3f
(0.0f, 
y
, 
z
);

148 
	`glTexCo‹d2f
(
x
, 0.0f);

149 
	`glVîãx3f
(
x
, 
y
, 
z
);

150 
	`glTexCo‹d2f
(
x
, 
z
);

151 
	`glVîãx3f
(
x
, 
y
, 0.0f);

154 
	`glTexCo‹d2f
(0.0f, 
z
);

155 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

156 
	`glTexCo‹d2f
(0.0f, 0.0f);

157 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

158 
	`glTexCo‹d2f
(
x
, 0.0f);

159 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

160 
	`glTexCo‹d2f
(
x
, 
z
);

161 
	`glVîãx3f
(
x
, 0.0f, 
z
);

164 
	`glTexCo‹d2f
(0.0f, 
z
);

165 
	`glVîãx3f
(0.0f, 
y
, 
z
);

166 
	`glTexCo‹d2f
(0.0f, 0.0f);

167 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

168 
	`glTexCo‹d2f
(
x
, 0.0f);

169 
	`glVîãx3f
(
x
, 0.0f, 
z
);

170 
	`glTexCo‹d2f
(
x
, 
z
);

171 
	`glVîãx3f
(
x
, 
y
, 
z
);

174 
	`glTexCo‹d2f
(0.0f, 
z
);

175 
	`glVîãx3f
(
x
, 
y
, 0.0f);

176 
	`glTexCo‹d2f
(0.0f, 0.0f);

177 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

178 
	`glTexCo‹d2f
(
x
, 0.0f);

179 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

180 
	`glTexCo‹d2f
(
x
, 
z
);

181 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

184 
	`glTexCo‹d2f
(0.0f, 
z
);

185 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

186 
	`glTexCo‹d2f
(0.0f, 0.0f);

187 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

188 
	`glTexCo‹d2f
(
x
, 0.0f);

189 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

190 
	`glTexCo‹d2f
(
x
, 
z
);

191 
	`glVîãx3f
(0.0f, 
y
, 
z
);

194 
	`glTexCo‹d2f
(0.0f, 
z
);

195 
	`glVîãx3f
(
x
, 
y
, 
z
);

196 
	`glTexCo‹d2f
(0.0f, 0.0f);

197 
	`glVîãx3f
(
x
, 0.0f, 
z
);

198 
	`glTexCo‹d2f
(
x
, 0.0f);

199 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

200 
	`glTexCo‹d2f
(
x
, 
z
);

201 
	`glVîãx3f
(
x
, 
y
, 0.0f);

202 
	`glEnd
();

203 
	}
}

	@/home/yunyao/dev/C++/backup/square_demo_V7.0/Objects.h

12 #i‚de‡
__OBJECTS_H_


13 
	#__OBJECTS_H_


	)

15 
	~"Re˘™gÀ.h
"

16 
	~"HBuûdög.h
"

18 
GLuöt
 
	grﬂd
;

19 
GLuöt
 
	ggøss
;

20 
GLuöt
 
	gbuûdög1
;

21 
GLuöt
 
	gbuûdög2
;

22 
GLuöt
 
	gchûdªn
;

23 
GLuöt
 
	gcomm⁄_box
;

24 
GLuöt
 
	gb¨_box
;

26 
GLÊﬂt
 
	gwidth
, 
	gheight
, 
	gdïth
;

28 
GLvoid
 
	$BuûdLi°
() {

29 
Re˘™gÀ
 
ª˘™gÀ
;

30 
HBuûdög
 
hBuûdög
;

33 
rﬂd
 = 
	`glGíLi°s
(6);

34 
	`glNewLi°
(
rﬂd
, 
GL_COMPILE
);

35 
width
 = 4.0f, 
dïth
 = 4.0f;

37 
ª˘™gÀ
.
	`døwHRe˘™gÀ
(
width
, 0.0f, 
dïth
);

38 
	`glEndLi°
();

41 
gøss
 = 
rﬂd
 + 1;

42 
	`glNewLi°
(
gøss
, 
GL_COMPILE
);

43 
width
 = 4.0f, 
dïth
 = 4.0f;

44 
ª˘™gÀ
.
	`døwHRe˘™gÀ
(
width
, 0.0f, 
dïth
);

45 
	`glEndLi°
();

48 
buûdög1
 = 
rﬂd
 + 2;

49 
width
 = 1.0f, 
height
 = 5.0f, 
dïth
 = 3.0f;

50 
	`glNewLi°
(
buûdög1
, 
GL_COMPILE
);

51 
hBuûdög
.
	`døwHBuûdög
(
width
, 
height
, 
dïth
);

52 
	`glEndLi°
();

55 
buûdög2
 = 
rﬂd
 + 3;

56 
width
 = 1.0f, 
height
 = 3.0f, 
dïth
 = 3.0f;

57 
	`glNewLi°
(
buûdög2
, 
GL_COMPILE
);

58 
hBuûdög
.
	`døwHBuûdög
(
width
, 
height
, 
dïth
);

59 
	`glEndLi°
();

62 
chûdªn
 = 
rﬂd
 + 4;

63 
width
 = 1.0f;

64 
height
 = 1.0f;

65 
	`glNewLi°
(
chûdªn
, 
GL_COMPILE
);

66 
	`glBegö
(
GL_QUADS
);

67 
	`glTexCo‹d2f
(0.0f, 1.0f);

68 
	`glVîãx3f
(0.0f, 
height
, 0.0f);

69 
	`glTexCo‹d2f
(0.0f, 0.0f);

70 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

71 
	`glTexCo‹d2f
(1.0f, 0.0f);

72 
	`glVîãx3f
(1.0f, 0.0f, 0.0f);

73 
	`glTexCo‹d2f
(1.0f, 1.0f);

74 
	`glVîãx3f
(1.0f, 
height
, 0.0f);

75 
	`glEnd
();

76 
	`glEndLi°
();

79 
comm⁄_box
 = 
rﬂd
 + 5;

80 
width
 = 0.5f, 
height
 = 0.5f, 
dïth
 = 0.5f;

81 
	`glNewLi°
(
comm⁄_box
, 
GL_COMPILE
);

82 
hBuûdög
.
	`døwHBuûdög
(
width
, 
height
, 
dïth
);

83 
	`glEndLi°
();

97 
	}
}

	@/home/yunyao/dev/C++/backup/square_demo_V7.0/Rectangle.h

13 #i‚de‡
__RECTANGLE_H_


14 
	#__RECTANGLE_H_


	)

15 
	~<GL/gl.h
>

17 ˛as†
	cRe˘™gÀ
{

18 
	m¥iv©e
:

19 
GLÊﬂt
 
x
, 
	my
, 
	mz
;

20 
GLÊﬂt
 
	mu
, 
	mv
;

21 
	mpublic
:

33 
	$Re˘™gÀ
(){

35 
	$Re˘™gÀ
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
){

36 
this
->
x
 = x;

37 
this
->
y
 = y;

38 
this
->
z
 = z;

39 
this
->
u
 = 1.0f;

40 
this
->
v
 = 1.0f;

41 
	}
}

42 
	$Re˘™gÀ
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
u
, GLÊﬂà
v
){

43 
this
->
x
 = x;

44 
this
->
y
 = y;

45 
this
->
z
 = z;

46 
this
->
u
 = u;

47 
this
->
v
 = v;

48 
	}
}

50 
	$£tX
(
GLÊﬂt
 
x
){

51 
this
->
x
 = x;

52 
	}
}

53 
	$£tY
(
GLÊﬂt
 
y
){

54 
this
->
y
 = y;

55 
	}
}

56 
	$£tZ
(
GLÊﬂt
 
z
){

57 
this
->
z
 = z;

58 
	}
}

59 
	$£tU
(
GLÊﬂt
 
u
){

60 
this
->
u
 = u;

61 
	}
}

62 
	$£tV
(
GLÊﬂt
 
v
){

63 
this
->
v
 = v;

64 
	}
}

76 
	$døwHRe˘™gÀ
(){

78 
	`glBegö
(
GL_QUADS
);

81 
	`glTexCo‹d2f
(0.0f, 
v
);

82 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

83 
	`glTexCo‹d2f
(0.0f, 0.0f);

84 
	`glVîãx3f
(0.0f, 
y
, 
z
);

85 
	`glTexCo‹d2f
(
u
, 0.0f);

86 
	`glVîãx3f
(
x
, 
y
, 
z
);

87 
	`glTexCo‹d2f
(
u
, 
v
);

88 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

89 
	`glEnd
();

90 
	}
}

92 
	$døwHRe˘™gÀ
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
u
 = 1.0f, GLÊﬂà
v
 = 1.0f){

94 
	`glBegö
(
GL_QUADS
);

97 
	`glTexCo‹d2f
(0.0f, 
v
);

98 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

99 
	`glTexCo‹d2f
(0.0f, 0.0f);

100 
	`glVîãx3f
(0.0f, 
y
, 
z
);

101 
	`glTexCo‹d2f
(
u
, 0.0f);

102 
	`glVîãx3f
(
x
, 
y
, 
z
);

103 
	`glTexCo‹d2f
(
u
, 
v
);

104 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

105 
	`glEnd
();

106 
	}
}

	@/home/yunyao/dev/C++/backup/square_demo_V7.0/config.cpp

1 
	~"c⁄fig.h
"

3 
	~<f°ªam
>

4 
	~<io°ªam
>

5 
usög
 
«me•a˚
 
	g°d
;

7 
boﬁ
 
	$IsS∑˚
(
c
)

9 i‡(' ' =
c
 || '\t' == c)

10  
åue
;

11  
Ál£
;

12 
	}
}

14 
boﬁ
 
	$IsCommítCh¨
(
c
)

16 
c
) {

17 
COMMENT_CHAR
:

18  
åue
;

20  
Ál£
;

22 
	}
}

24 
	$Trim
(
°rög
 & 
°r
)

26 i‡(
°r
.
	`em±y
()) {

29 
i
, 
°¨t_pos
, 
íd_pos
;

30 
i
 = 0; i < 
°r
.
	`size
(); ++i) {

31 i‡(!
	`IsS∑˚
(
°r
[
i
])) {

35 i‡(
i
 =
°r
.
	`size
()) {

36 
°r
 = "";

40 
°¨t_pos
 = 
i
;

42 
i
 = 
°r
.
	`size
() - 1; i >= 0; --i) {

43 i‡(!
	`IsS∑˚
(
°r
[
i
])) {

47 
íd_pos
 = 
i
;

49 
°r
 = så.
	`sub°r
(
°¨t_pos
, 
íd_pos
 - start_pos + 1);

50 
	}
}

52 
boﬁ
 
	$A«ly£Löe
(c⁄° 
°rög
 & 
löe
, såög & 
key
, såög & 
vÆue
)

54 i‡(
löe
.
	`em±y
())

55  
Ál£
;

56 
°¨t_pos
 = 0, 
íd_pos
 = 
löe
.
	`size
(Ë- 1, 
pos
;

57 i‡((
pos
 = 
löe
.
	`föd
(
COMMENT_CHAR
)) != -1) {

58 i‡(0 =
pos
) {

59  
Ál£
;

61 
íd_pos
 = 
pos
 - 1;

63 
°rög
 
√w_löe
 = 
löe
.
	`sub°r
(
°¨t_pos
, sèπ_po†+ 1 - 
íd_pos
);

65 i‡((
pos
 = 
√w_löe
.
	`föd
('=')) == -1)

66  
Ál£
;

68 
key
 = 
√w_löe
.
	`sub°r
(0, 
pos
);

69 
vÆue
 = 
√w_löe
.
	`sub°r
(
pos
 + 1, 
íd_pos
 + 1- (pos + 1));

71 
	`Trim
(
key
);

72 i‡(
key
.
	`em±y
()) {

73  
Ál£
;

75 
	`Trim
(
vÆue
);

76  
åue
;

77 
	}
}

79 
boﬁ
 
RódC⁄fig
(c⁄° 
°rög
 & 
fûíame
, 
m≠
<°rög, såög> & 
m
)

81 
	gm
.
˛ór
();

82 
if°ªam
 
öfûe
(
fûíame
.
c_°r
());

83 i‡(!
	göfûe
) {

84 
	gcout
 << "fûê›íÉº‹" << 
	gídl
;

85  
	gÁl£
;

87 
°rög
 
	glöe
, 
	gkey
, 
	gvÆue
;

88 
gëlöe
(
öfûe
, 
löe
)) {

89 i‡(
A«ly£Löe
(
löe
, 
key
, 
vÆue
)) {

90 
	gm
[
key
] = 
vÆue
;

94 
	göfûe
.
˛o£
();

95  
	gåue
;

98 
PrötC⁄fig
(c⁄° 
m≠
<
°rög
, såög> & 
m
)

100 
	gm≠
<
	g°rög
, såög>::
c⁄°_ôî©‹
 
môe
 = 
m
.
begö
();

101 ; 
	gmôe
 !
m
.
íd
(); ++mite) {

102 
	gcout
 << 
	gmôe
->
	gfú°
 << "=" << môe->
	g£c⁄d
 << 
	gídl
;

	@/home/yunyao/dev/C++/backup/square_demo_V7.0/config.h

8 #i‚de‡
__CONFIG_H_


9 
	#__CONFIG_H_


	)

11 
	~<°rög
>

12 
	~<m≠
>

13 
usög
 
«me•a˚
 
	g°d
;

15 
	#COMMENT_CHAR
 '#'

	)

17 
boﬁ
 
RódC⁄fig
(c⁄° 
°rög
 & 
fûíame
, 
m≠
<°rög, såög> & 
m
);

18 
PrötC⁄fig
(c⁄° 
m≠
<
°rög
, såög> & 
m
);

	@/home/yunyao/dev/C++/backup/square_demo_V7.0/image.h

11 ˛as†
	cImage
 {

14 #i‚de‡
__IMAGE_H_


15 
	#__IMAGE_H_


	)

18 
	~<°dio.h
>

19 
	~<°rög.h
>

21 
	m¥iv©e
:

22 
sizeX
;

23 
	msizeY
;

24 
	msize
;

25 *
	md©a
;

27 
	mpublic
:

29 
	$Image
(){

30 
this
->
sizeX
 = 1L;

31 
this
->
sizeY
 = 1L;

32 
this
->
size
 = 
sizeX
*
sizeY
*3;

33 
this
->
d©a
 = 
NULL
;

36 
	$Image
(
sizeX
, 
sizeY
){

37 
this
->
sizeX
 = sizeX;

38 
this
->
sizeY
 = sizeY;

39 
this
->
size
 = 
sizeX
*
sizeY
*3;

40 
this
->
d©a
 = 
NULL
;

41 
	}
}

43 
	$Image
(
sizeX
, 
sizeY
, * 
d©a
){

44 
this
->
sizeX
 = sizeX;

45 
this
->
sizeY
 = sizeY;

46 
this
->
size
 = 
sizeX
*
sizeY
*3;

47 
this
->
d©a
 = data;

48 
	}
}

50 ~
	$Image
(){

52 
dñëe
[] 
this
->
d©a
;

53 
this
->
d©a
 = 
NULL
;

54 
	}
}

56 
	$ˇlcuœãSize
(){

57 
this
->
size
 = 
sizeX
*
sizeY
*3;

58 
	}
}

60 
	$£tSizeX
(
sizeX
){

61 
this
->
sizeX
 = sizeX;

62 
	`ˇlcuœãSize
();

63 
	}
}

65 
	$£tSizeY
(
sizeY
){

66 
this
->
sizeY
 = sizeY;

67 
	`ˇlcuœãSize
();

68 
	}
}

70 
	$£tD©a
(*
d©a
){

71 
this
->
d©a
 = data;

72 
	}
}

74 
	$gëSizeX
(){

75  
this
->
sizeX
;

76 
	}
}

78 
	$gëSizeY
(){

79  
this
->
sizeY
;

80 
	}
}

82 * 
	$gëD©a
(){

83  
this
->
d©a
;

84 
	}
}

99 
	$imageLﬂd
(*
fûíame
) {

100 
FILE
 *
fûe
;

101 
i
;

102 
ãmp
;

103 
∂™es
;

104 
bµ
;

107 i‡((
fûe
 = 
	`f›í
(
fûíame
, "rb"))==
NULL
) {

113 
	`f£ek
(
fûe
, 18, 
SEEK_CUR
);

116 i‡((
i
 = 
	`‰ód
(&
sizeX
, 4, 1, 
fûe
)) != 1) {

123 i‡((
i
 = 
	`‰ód
(&
sizeY
, 4, 1, 
fûe
)) != 1) {

130 
	`ˇlcuœãSize
();

133 i‡((
	`‰ód
(&
∂™es
, 2, 1, 
fûe
)) != 1) {

137 i‡(
∂™es
 != 1) {

143 i‡((
i
 = 
	`‰ód
(&
bµ
, 2, 1, 
fûe
)) != 1) {

147 i‡(
bµ
 != 24) {

153 
	`f£ek
(
fûe
, 24, 
SEEK_CUR
);

156 
this
->
d©a
 = 
√w
 [this->
size
];

157 i‡(
this
->
d©a
 =
NULL
) {

162 i‡((
i
 = 
	`‰ód
(
this
->
d©a
,Åhis->
size
, 1, 
fûe
)) != 1) {

167 
i
=0; i<(
this
->
size
); i+=3) {

168 
ãmp
 = 
this
->
d©a
[
i
];

169 
this
->
d©a
[
i
] =Åhis->data[i+2];

170 
this
->
d©a
[
i
+2] = 
ãmp
;

175 
	}
}

	@/home/yunyao/dev/C++/backup/square_demo_V7.0/main.cpp

11 
	~<GL/glut.h
>

12 
	~<GL/gl.h
>

13 
	~<GL/glu.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<time.h
>

18 
	~"t˝_£rvî.h
"

19 
	~"image.h
"

20 
	~"ãxtuª.h
"

21 
	~"Obje˘s.h
"

25 
	#ESCAPE
 27

	)

26 
	#CHANGE_MODE
 99

	)

27 
	#DISAPPEAR_BOX
 100

	)

28 
	#CHANGE_TEXTURE
 116

	)

29 
	#WAIT_TIME
 15

	)

32 
	gwödow
;

37 
GLuöt
 
	gxlo›
;

38 
GLuöt
 
	gylo›
;

40 
GLÊﬂt
 
	gxrŸ
;

41 
GLÊﬂt
 
	gyrŸ
;

44 
GLÊﬂt
 
	grun_Àn
;

45 
GLÊﬂt
 
	grun_Àn_max
 = 0.4f;

46 
GLÊﬂt
 
	grun_Àn_mö
 = 0.0f;

47 
GLÊﬂt
 
	gb¨_run_Àn
;

48 
GLÊﬂt
 
	gchûd_pos
, 
	gb¨_pos
;

49 
GLÊﬂt
 
	gb¨_À·_pos
 = -3.0f, 
	gb¨_right_pos
 = 1.0f;

50 
GLÊﬂt
 
	gchûd_run_Àn
, 
	gchûd_run_øã
 = 0.065f;

53 
GLÊﬂt
 
	ggo_ahód_øã
, 
	ggo_ahód_ac
 = 0.001f;

56 
	gbdw_≠≥¨
, 
	g≠≥¨_mode
, 
	gcomm⁄_ãxtuª_mode
;

60 
	gbuûdög_À·_Êag
, 
	gbuûdög_right_Êag
;

63 
	gb¨_À·_Êag
, 
	gb¨_right_Êag
;

66 
	gvisibÀ_À·_Êag
, 
	gvisibÀ_right_Êag
;

68 
boﬁ
 
	gÀ·_‹_right_Êag
;

70 
	gdißµór_time
;

72 
	gdißµór_box_mode
;

74 
	gsqu¨e_Àn
;

77 
	#BUFFER_SIZE
 1024

	)

78 
	g£rvî_sockfd
, 
	gc⁄n
;

79 
	gbuf„r
[
BUFFER_SIZE
];

80 
boﬁ
 
	g£rvî_öô_Êag
;

84 
	gm⁄°î_¥o
 = 0.1;

87 
time_t
 
	g≠≥¨
, 
	g≠≥¨_tmp
;

90 
FILE
 *
	gÂ
 = 
NULL
;

91 
time_t
 
	gnow
;

92 
tm
 *
	gtm_now
;

94 
	~<±hªad.h
>

96 
	#HELLO_WORLD_SERVER_PORT
 4000

	)

97 
	#LENGTH_OF_LISTEN_QUEUE
 20

	)

98 
	#CLIENT_IP
 "192.168.0.1"

	)

99 
	#MAX_EEG_DATA_BUFFER_SIZE
 80

	)

100 
	#MAX_EEG_DAT
 0.02

	)

101 
	gsig«l
, 
	gsig«l_tmp
;

102 
	gm¨k
, 
	gm¨k_tmp
;

103 
	gìg_d©a_buf„r
[
MAX_EEG_DATA_BUFFER_SIZE
];

104 
	gm¨k_pos
[
MAX_EEG_DATA_BUFFER_SIZE
], 
	gsig«l_pos
[MAX_EEG_DATA_BUFFER_SIZE];

105 
	gìg_d©a_pos
;

106 
	gd©a1
, 
	gd©a2
, 
	gd©a3
;

107 
±hªad_t
 
	gwrôe_ìg_d©a_buf„r_thªad
;

108 
sockaddr_ö
 
	g£rvî_addr
;

109 
	g£rvî_sockë
;

110 
sockaddr_ö
 
	g˛õ¡_addr
;

111 
	g˛õ¡_sockë
;

112 
sockÀn_t
 
	gÀngth
;

113 
	góch_löe_d©a
[
BUFFER_SIZE
];

117 
GLÊﬂt
 
	gboxcﬁ
[5][3]= {

122 
GLÊﬂt
 
	gt›cﬁ
[5][3]= {

129 
	$InôGL
(
Width
, 
Height
) {

130 
	`LﬂdGLTextuªs
();

131 
	`BuûdLi°
();

133 
	`glE«bÀ
(
GL_BLEND
);

135 
	`glCÀ¨Cﬁ‹
(0.0f, 0.0f, 1.0f, 0.0f);

136 
	`glCÀ¨Dïth
(1.0);

137 
	`glDïthFunc
(
GL_LESS
);

138 
	`glE«bÀ
(
GL_DEPTH_TEST
);

139 
	`glShadeModñ
(
GL_SMOOTH
);

141 
	`glM©rixMode
(
GL_PROJECTION
);

142 
	`glLﬂdIdítôy
();

144 
	`gluPî•e˘ive
(45.0f,(
GLÊﬂt
)
Width
/(GLÊﬂt)
Height
,0.1f,100.0f);

146 
	`glM©rixMode
(
GL_MODELVIEW
);

148 
	`glE«bÀ
(
GL_LIGHT0
);

149 
	`glE«bÀ
(
GL_LIGHTING
);

150 
	`glE«bÀ
(
GL_COLOR_MATERIAL
);

153 
£rvî_öô_Êag
 = 
Ál£
;

154 
squ¨e_Àn
 = 0;

155 
run_Àn
 = 0.0f;

156 
b¨_run_Àn
 = 0.0f;

157 
go_ahód_øã
 = 0.0f;

158 
chûd_run_Àn
 = -3.0f;

159 
chûd_pos
 = -7.0f;

160 
b¨_À·_pos
 = -3.0f;

161 
b¨_right_pos
 = 1.0f;

163 
buûdög_À·_Êag
 = 0b011000000101;

164 
buûdög_right_Êag
 = 0b000010101001;

165 
b¨_À·_Êag
 = 0b111111111111111111;

166 
b¨_right_Êag
 = 0b111111111111111111;

167 
	`§™d
(
	`time
(
NULL
));

169 
	`time
(&
≠≥¨
);

170 
	`time
(&
≠≥¨_tmp
);

172 
bdw_≠≥¨
 = 0;

174 
≠≥¨_mode
 = 0;

176 
	`mem£t
(
ìg_d©a_buf„r
, 0, (eeg_data_buffer));

177 
	`mem£t
(
m¨k_pos
, 0, (mark_pos));

178 
	`mem£t
(
sig«l_pos
, 0, (signal_pos));

179 
ìg_d©a_pos
 = 0;

180 
dißµór_time
 = 7;

182 
dißµór_box_mode
 = 1;

184 
comm⁄_ãxtuª_mode
 = 0;

186 
Â
 = 
	`f›í
("rate_recorder.txt", "a+");

229 
Â
 = 
	`f›í
("recorder.txt", "a+");

241 
	}
}

244 
	$ReSizeGLS˚√
(
Width
, 
Height
) {

245 i‡(
Height
==0)

246 
Height
=1;

248 
	`glVõwp‹t
(0, 0, 
Width
, 
Height
);

250 
	`glM©rixMode
(
GL_PROJECTION
);

251 
	`glLﬂdIdítôy
();

253 
	`gluPî•e˘ive
(45.0f,(
GLÊﬂt
)
Width
/(GLÊﬂt)
Height
,0.1f,100.0f);

254 
	`glM©rixMode
(
GL_MODELVIEW
);

255 
	}
}

259 
boﬁ
 
	$move_fun˘i⁄
(
GLÊﬂt
 &
pos
, GLÊﬂà
add_Àn
, GLÊﬂà
max_Àn
, GLÊﬂà
mö_Àn
) {

261 if(
pos
 + 
add_Àn
 > 
max_Àn
 ||Öo†+ádd_À¿< 
mö_Àn
Ë 
Ál£
;

262 
pos
 +
add_Àn
;

264  
åue
;

265 
	}
}

267 
	$Døw_B¨_⁄e_2_four
(
GLÊﬂt
 &
b¨_run_Àn
, &
bdw_≠≥¨
, 
time_t
 &
≠≥¨
,Åime_à&
≠≥¨_tmp
, &
dißµór_time
, &
b¨_À·_Êag
, &
b¨_right_Êag
, 
boﬁ
 &
À·_‹_right_Êag
, GLÊﬂà&
chûd_run_Àn
) {

270 
b¨_run_Àn
 +
go_ahód_øã
;

271 if(
b¨_run_Àn
 >= 3.0f) {

272 
b¨_run_Àn
 = 0.0f;

273 
b¨_À·_Êag
 = (bar_left_flag<<1) & 0b1111111111111111;

274 
b¨_right_Êag
 = (bar_right_flag<<1) & 0b1111111111111111;

278 
b¨_À·_Êag
 |= 1;

281 
b¨_right_Êag
 |= 1;

283 
b¨_pos
 += 3.0f;

286 if(
bdw_≠≥¨
 == 0) {

287 
	`time
(&
≠≥¨
);

288 if(
≠≥¨
 - 
≠≥¨_tmp
 >
dißµór_time
) {

290 if(
	`ønd
() & 0b1 == 1) {

291 
b¨_À·_Êag
 = ((bar_left_flag>>1) << 1);

293 
	`time
(&
≠≥¨_tmp
);

294 
bdw_≠≥¨
 = 1;

295 
À·_‹_right_Êag
 = 1;

296 
chûd_run_Àn
 = -3.0f;

298 
b¨_right_Êag
 = ((bar_right_flag>>1) << 1);

300 
	`time
(&
≠≥¨_tmp
);

301 
bdw_≠≥¨
 = 1;

302 
À·_‹_right_Êag
 = 0;

303 
chûd_run_Àn
 = 1.5f;

306 } if(
bdw_≠≥¨
 == 1) {

308 if(
dißµór_box_mode
 == 0 || disappear_box_mode == 1)

309 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(6));

311 if(
comm⁄_ãxtuª_mode
 =0Ë
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(5));

312 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(7));

315 if(
À·_‹_right_Êag
 == 1) {

317 
	`glLﬂdIdítôy
();

318 
	`glTøn¶©ef
(
chûd_run_Àn
, -1.0f, -6.0f);

319 
	`glCÆlLi°
(
comm⁄_box
);

320 if(
chûd_run_Àn
 >= 0.0f) {

324 if(
bdw_≠≥¨
 == 2) {

325 
	`time
(&
≠≥¨_tmp
);

326 
bdw_≠≥¨
 = 0;

327 
dißµór_time
 = 
	`ønd
()%4+5;

331 
chûd_run_Àn
 = -3.0f;

335 
chûd_run_Àn
 +
chûd_run_øã
;

339 
	`glLﬂdIdítôy
();

340 
	`glTøn¶©ef
(
chûd_run_Àn
, -1.0f, -6.0f);

341 
	`glCÆlLi°
(
comm⁄_box
);

342 if(
chûd_run_Àn
 <= 0.0f) {

343 if(
bdw_≠≥¨
 == 2) {

344 
	`time
(&
≠≥¨_tmp
);

345 
bdw_≠≥¨
 = 0;

346 
dißµór_time
 = 
	`ønd
()%4 + 5;

352 
chûd_run_Àn
 -
chûd_run_øã
;

358 
b¨_À·_ãmp
 = 
b¨_À·_Êag
;

359 
b¨_right_ãmp
 = 
b¨_right_Êag
;

361 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(2));

363 
i
 = 0; i<16; ++i) {

364 if(
b¨_À·_ãmp
 & 0b1) {

365 
	`glLﬂdIdítôy
();

366 
	`glTøn¶©ef
(-3.0,-1.0f, ((16-
i
)*-3.0f)+
b¨_run_Àn
);

367 if(
dißµór_box_mode
 =0 || dißµór_box_modê=3Ë
	`glCÆlLi°
(
comm⁄_box
);

369 if(
dißµór_box_mode
 == 3) {

370 
	`glLﬂdIdítôy
();

371 
	`glTøn¶©ef
(-3.0,-1.0f, ((16-
i
)*-3.0f)+
b¨_run_Àn
);

372 
	`glCÆlLi°
(
comm⁄_box
);

374 i‡(
i
 =14Ë
bdw_≠≥¨
 = 2;

375 if(
i
 < 14) {

376 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(6));

377 
	`glLﬂdIdítôy
();

378 
	`glTøn¶©ef
(-3.0,-1.0f, ((16-
i
)*-3.0f)+
b¨_run_Àn
);

379 if(
dißµór_box_mode
 == 0 || disappear_box_mode == 1)

380 
	`glCÆlLi°
(
comm⁄_box
);

381 if(
comm⁄_ãxtuª_mode
 == 0)

382 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(5));

383 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(7));

386 
b¨_À·_ãmp
 >>= 1;

391 
i
 = 0; i<16; ++i) {

392 if(
b¨_right_ãmp
 & 0b1 == 1) {

393 
	`glLﬂdIdítôy
();

394 
	`glTøn¶©ef
(1.5,-1.0f, ((16-
i
)*-3.0f)+
b¨_run_Àn
);

395 if(
dißµór_box_mode
 =0 || dißµór_box_modê=3Ë
	`glCÆlLi°
(
comm⁄_box
);

397 if(
dißµór_box_mode
 == 3) {

398 
	`glLﬂdIdítôy
();

399 
	`glTøn¶©ef
(-3.0,-1.0f, ((16-
i
)*-3.0f)+
b¨_run_Àn
);

400 
	`glCÆlLi°
(
comm⁄_box
);

402 i‡(
i
 =14Ë
bdw_≠≥¨
 = 2;

403 if(
i
 < 14) {

404 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(6));

405 
	`glLﬂdIdítôy
();

406 
	`glTøn¶©ef
(1.5,-1.0f, ((16-
i
)*-3.0f)+
b¨_run_Àn
);

407 if(
dißµór_box_mode
 =0 || dißµór_box_modê=1Ë
	`glCÆlLi°
(
comm⁄_box
);

408 if(
comm⁄_ãxtuª_mode
 =0Ë
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(5));

409 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(7));

412 
b¨_right_ãmp
 >>= 1;

415 
	}
}

417 
	$Døw_B¨_five
(
GLÊﬂt
 &
b¨_run_Àn
, &
bdw_≠≥¨
, 
time_t
 &
≠≥¨
,Åime_à&
≠≥¨_tmp
, &
dißµór_time
, &
b¨_À·_Êag
, &
b¨_right_Êag
, 
boﬁ
 &
À·_‹_right_Êag
, GLÊﬂà&
chûd_run_Àn
) {

418 
b¨_run_Àn
 +
go_ahód_øã
;

419 if(
b¨_run_Àn
 >= 3.0f) {

420 
b¨_run_Àn
 = 0.0f;

421 if(!(
b¨_À·_Êag
 ^ 
b¨_right_Êag
)) {

422 if(
	`ønd
()%4 == 0) {

423 if(
	`ønd
() & 1 == 1) {

424 
b¨_À·_Êag
 = ((bar_left_flag<<1) & 0b1111111111111111) | 0;

425 
b¨_right_Êag
 = ((bar_right_flag<<1) & 0b1111111111111111) | 1;

427 
b¨_À·_Êag
 = ((bar_left_flag<<1) & 0b1111111111111111) | 1;

428 
b¨_right_Êag
 = ((bar_right_flag<<1) & 0b1111111111111111) | 0;

432 
b¨_À·_Êag
 = ((bar_left_flag<<1) & 0b1111111111111111) | 1;

433 
b¨_right_Êag
 = ((bar_right_flag<<1) & 0b1111111111111111) | 1;

435 
b¨_pos
 += 3.0f;

439 
À·_ãmp
 = 
b¨_À·_Êag
;

440 
right_ãmp
 = 
b¨_right_Êag
;

442 if(
bdw_≠≥¨
 == 0) {

443 
	`time
(&
≠≥¨
);

444 if(
≠≥¨
 - 
≠≥¨_tmp
 >
dißµór_time
) {

445 if(!(
À·_ãmp
 >> 14 & 0b1)) {

446 
	`time
(&
≠≥¨
);

447 
≠≥¨_tmp
 = 
≠≥¨
;

448 
bdw_≠≥¨
 = 1;

449 
À·_‹_right_Êag
 = 1;

450 
chûd_run_Àn
 = -3.0f;

451 
b¨_À·_Êag
 = 0b1111111111111111;

452 } if(!(
right_ãmp
 >> 14 & 0b1)) {

453 
	`time
(&
≠≥¨
);

454 
≠≥¨_tmp
 = 
≠≥¨
;

455 
bdw_≠≥¨
 = 1;

456 
À·_‹_right_Êag
 = 0;

457 
chûd_run_Àn
 = 1.0f;

458 
b¨_right_Êag
 = 0b1111111111111111;

461 } if(
bdw_≠≥¨
 == 1) {

462 if(
À·_‹_right_Êag
 == 1) {

463 if(
comm⁄_ãxtuª_mode
 =0Ë
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(5));

464 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(7));

465 
	`glLﬂdIdítôy
();

466 
	`glTøn¶©ef
(
chûd_run_Àn
, -1.0f, -6.0f);

467 
	`glCÆlLi°
(
comm⁄_box
);

468 if(
chûd_run_Àn
 >= 0.0f) {

472 if(
bdw_≠≥¨
 == 1) {

473 
	`time
(&
≠≥¨_tmp
);

474 
bdw_≠≥¨
 = 2;

476 
chûd_run_Àn
 = 0.0f;

480 
chûd_run_Àn
 +
chûd_run_øã
;

483 if(
comm⁄_ãxtuª_mode
 =0Ë
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(5));

484 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(7));

485 
	`glLﬂdIdítôy
();

486 
	`glTøn¶©ef
(
chûd_run_Àn
, -1.0f, -6.0f);

487 
	`glCÆlLi°
(
comm⁄_box
);

488 if(
chûd_run_Àn
 <= 0.0f) {

489 if(
bdw_≠≥¨
 == 1) {

490 
	`time
(&
≠≥¨_tmp
);

491 
bdw_≠≥¨
 = 2;

493 
chûd_run_Àn
 = 0.0f;

496 
chûd_run_Àn
 -
chûd_run_øã
;

500 
	`time
(&
≠≥¨
);

502 if(
≠≥¨
 - 
≠≥¨_tmp
 >= 0) {

503 
≠≥¨_tmp
 = 
≠≥¨
;

504 
chûd_run_Àn
 = -3.0f;

505 
bdw_≠≥¨
 = 0;

507 
dißµór_time
 = 0;

509 if(
comm⁄_ãxtuª_mode
 =0Ë
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(5));

510 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(7));

511 
	`glLﬂdIdítôy
();

513 
	`glTøn¶©ef
(
chûd_run_Àn
, -1.0f, -6.0f);

514 
	`glCÆlLi°
(
chûdªn
);

520 
À·_ãmp
 = 
b¨_À·_Êag
;

521 
right_ãmp
 = 
b¨_right_Êag
;

522 if(
comm⁄_ãxtuª_mode
 =0Ë
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(5));

523 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(7));

524 
i
 = 0; i<16; ++i) {

526 if(!(
À·_ãmp
 & 0b1)) {

527 
	`glLﬂdIdítôy
();

528 
	`glTøn¶©ef
(-3.0,-1.0f, ((16-
i
)*-3.0f)+
b¨_run_Àn
);

529 
	`glCÆlLi°
(
comm⁄_box
);

532 
À·_ãmp
 >>= 1;

537 
i
 = 0; i<16; ++i) {

538 if(!(
right_ãmp
 & 0b1)) {

539 
	`glLﬂdIdítôy
();

540 
	`glTøn¶©ef
(1.5,-1.0f, ((16-
i
)*-3.0f)+
b¨_run_Àn
);

541 
	`glCÆlLi°
(
comm⁄_box
);

544 
right_ãmp
 >>= 1;

547 
	}
}

550 
	$DøwGLS˚√
() {

576 if(
sig«l
Ë
go_ahód_øã
 = 0.0f;

577 
m¨k_pos
[
ìg_d©a_pos
] = 
m¨k
;

578 
sig«l_pos
[
ìg_d©a_pos
] = 
sig«l
;

582 if((!
m¨k_tmp
)&&
m¨k
){

583 
m¨k_pos
[
ìg_d©a_pos
] = 1;

585 
m¨k_pos
[
ìg_d©a_pos
] = 0;

587 
sig«l_pos
[
ìg_d©a_pos
] = 0;

588 if((!
sig«l_tmp
Ë&& 
sig«l
){

589 
sig«l_pos
[
ìg_d©a_pos
] = 1;

591 
sig«l_pos
[
ìg_d©a_pos
] = 0;

593 
sig«l_tmp
 = 
sig«l
;

594 
m¨k_tmp
 = 
m¨k
;

607 
	`glCÀ¨Cﬁ‹
(0.251f, 0.251f, 1.0f, 0.0f);

608 
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
 | 
GL_DEPTH_BUFFER_BIT
);

615 
	`glLﬂdIdítôy
();

617 
	`glTøn¶©ef
(0.038f, 0.0234f, -0.11f);

618 
	`glBegö
(
GL_QUADS
);

619 
	`glCﬁ‹3f
(1.0f-1.0f, 1.0f-1.0f, 1.0f-1.0f);

620 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

621 
	`glVîãx3f
(0.044f, 0.0f, 0.0f);

622 
	`glVîãx3f
(0.044f, 0.022f, 0.0f);

623 
	`glVîãx3f
(0.0f, 0.022f, 0.0f);

625 
	`glCﬁ‹3f
(1.0f,1.0f,1.0f);

626 
	`glEnd
();

664 
i
 = 0; i<
MAX_EEG_DATA_BUFFER_SIZE
; ++i){

665 
	`glLﬂdIdítôy
();

666 
	`glTøn¶©ef
(0.0346f+
	`GLÊﬂt
(0.03989f/
MAX_EEG_DATA_BUFFER_SIZE
)*
i
, 0.0313f+0.01f*(GLÊﬂt(
ìg_d©a_buf„r
[i])/
MAX_EEG_DAT
), -0.1f);

669 
	`glBegö
(
GL_QUADS
);

670 
	`glCﬁ‹3f
(0.0f, 1.0f, 0.0f);

671 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

672 
	`glVîãx3f
(
	`GLÊﬂt
(0.03989f/
MAX_EEG_DATA_BUFFER_SIZE
), 0.0f, 0.0f);

673 
	`glVîãx3f
(
	`GLÊﬂt
(0.03989f/
MAX_EEG_DATA_BUFFER_SIZE
), GLfloat(0.03989f/MAX_EEG_DATA_BUFFER_SIZE), 0.0f);

674 
	`glVîãx3f
(0.0f, 
	`GLÊﬂt
(0.03989f/
MAX_EEG_DATA_BUFFER_SIZE
), 0.0f);

676 
	`glCﬁ‹3f
(1.0f,1.0f,1.0f);

677 
	`glEnd
();

680 if(
m¨k_pos
[
i
]){

682 
	`glLﬂdIdítôy
();

683 
	`glTøn¶©ef
(0.0346f+
	`GLÊﬂt
(0.03989f/
MAX_EEG_DATA_BUFFER_SIZE
)*
i
, 0.0213f, -0.1f);

684 
	`glBegö
(
GL_QUADS
);

686 
	`glCﬁ‹3f
(1.0f, 0.0f, 0.0f);

687 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

688 
	`glVîãx3f
(
	`GLÊﬂt
(0.03989f/
MAX_EEG_DATA_BUFFER_SIZE
), 0.0f, 0.0f);

689 
	`glVîãx3f
(
	`GLÊﬂt
(0.03989f/
MAX_EEG_DATA_BUFFER_SIZE
), 1.0f, 0.0f);

690 
	`glVîãx3f
(0.0f, 1.0f, 0.0f);

692 
	`glCﬁ‹3f
(1.0f,1.0f,1.0f);

693 
	`glEnd
();

696 if(
sig«l_pos
[
i
]) {

698 
	`glLﬂdIdítôy
();

699 
	`glTøn¶©ef
(0.0346f+
	`GLÊﬂt
(0.03989f/
MAX_EEG_DATA_BUFFER_SIZE
)*
i
, 0.0213f, -0.1f);

700 
	`glBegö
(
GL_QUADS
);

702 
	`glCﬁ‹3f
(0.0f, 0.0f, 1.0f);

703 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

704 
	`glVîãx3f
(
	`GLÊﬂt
(0.03989f/
MAX_EEG_DATA_BUFFER_SIZE
), 0.0f, 0.0f);

705 
	`glVîãx3f
(
	`GLÊﬂt
(0.03989f/
MAX_EEG_DATA_BUFFER_SIZE
), 1.0f, 0.0f);

706 
	`glVîãx3f
(0.0f, 1.0f, 0.0f);

708 
	`glCﬁ‹3f
(1.0f,1.0f,1.0f);

709 
	`glEnd
();

712 
ìg_d©a_pos
 = (ìg_d©a_pos+1)%
MAX_EEG_DATA_BUFFER_SIZE
;

714 
	`glE«bÀ
(
GL_TEXTURE_2D
);

716 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(0));

717 
i
 = 0; i<12; ++i) {

718 
	`glLﬂdIdítôy
();

719 
	`glTøn¶©ef
(-3.0f,-1.0f, (
i
+1)*(-4.0f)+
run_Àn
);

720 
	`glCÆlLi°
(
rﬂd
);

723 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(1));

724 
i
 = 0; i<12; ++i) {

725 
j
 = 0; j<12; ++j) {

726 if(
j
 == 7) ;

727 
	`glLﬂdIdítôy
();

728 
	`glTøn¶©ef
(-4.0f*(
j
-6)+1,-1.0f, (
i
+1)*(-4.0f)+
run_Àn
);

729 
	`glCÆlLi°
(
rﬂd
);

744 
À·_ãmp
 = 
buûdög_À·_Êag
;

745 
right_ãmp
 = 
buûdög_right_Êag
;

749 
i
 = 0; i<12; ++i) {

750 if(
À·_ãmp
 & 0b1 == 1) {

751 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(2));

752 
	`glLﬂdIdítôy
();

753 
	`glTøn¶©ef
(-5.0,-1.0f, ((12-
i
)*-4.0f)+
run_Àn
);

754 
	`glCÆlLi°
(
buûdög1
);

756 
À·_ãmp
 >>= 1;

760 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
->
	`gëGLTextuª
(3));

761 
i
 = 0; i<12; ++i) {

762 if(
right_ãmp
 & 0b1 == 1) {

763 
	`glLﬂdIdítôy
();

764 
	`glTøn¶©ef
(3.0,-1.0f, ((12-
i
)*-4.0f)+
run_Àn
);

765 
	`glCÆlLi°
(
buûdög2
);

767 
right_ãmp
 >>= 1;

773 
go_ahód_øã
 +
go_ahód_ac
;

775 if(
go_ahód_øã
 >
run_Àn_max
) go_ahead_rate =Ñun_len_max;

776 if(
go_ahód_øã
 <
run_Àn_mö
) go_ahead_rate =Ñun_len_min;

777 
run_Àn
 +
go_ahód_øã
;

780 if(
run_Àn
 >= 4.0f) {

781 
run_Àn
 = 0.0f;

782 
buûdög_À·_Êag
 = (building_left_flag<<1) & 0b111111111111;

783 
buûdög_right_Êag
 = (building_right_flag<<1) & 0b111111111111;

785 
ønd_ãmp
 = 
	`ønd
();

786 if(
ønd_ãmp
%8 =0Ë
buûdög_À·_Êag
 |= 1;

788 if(
ønd_ãmp
%8 =1Ë
buûdög_right_Êag
 |= 1;

790 
chûd_pos
 += 4.0f;

797 if(
dißµór_box_mode
 >= 0 && disappear_box_mode <= 3)

798 
	`Døw_B¨_⁄e_2_four
(
b¨_run_Àn
, 
bdw_≠≥¨
, 
≠≥¨
, 
≠≥¨_tmp
, 
dißµór_time
, 
b¨_À·_Êag
, 
b¨_right_Êag
, 
À·_‹_right_Êag
, 
chûd_run_Àn
);

801 
	`glDißbÀ
(
GL_TEXTURE_2D
);

820 
	`glutSw≠Buf„rs
();

823 
	}
}

826 
	$keyPªs£d
(
key
, 
x
, 
y
) {

831 i‡(
key
 =
ESCAPE
) {

832 
	`f˛o£
(
Â
);

834 
	`glutDe°royWödow
(
wödow
);

837 
	`exô
(0);

838 } if(
key
 =
CHANGE_MODE
) {

842 
≠≥¨_mode
 = (appear_mode+1) % 2;

843 } if(
key
 =
DISAPPEAR_BOX
) {

844 
dißµór_box_mode
 = (disappear_box_mode+1) % 5;

845 } if(
key
 =
CHANGE_TEXTURE
) {

846 
comm⁄_ãxtuª_mode
 = (common_texture_mode+1) % 2;

853 
	}
}

856 
	$•ecülKeyPªs£d
(
key
, 
x
, 
y
) {

858 
	`u¶ìp
(100);

860 
key
) {

861 
GLUT_KEY_UP
:

862 
run_Àn_max
 += 0.025f;

863 if(
run_Àn_max
 >= 1.0f)Ñun_len_max = 1.0f;

866 
GLUT_KEY_DOWN
:

867 
run_Àn_max
 -= 0.025f;

868 if(
run_Àn_max
 <= 0.0f)Ñun_len_max = 0.0f;

871 
GLUT_KEY_LEFT
:

872 
chûd_run_øã
 -= 0.01f;

873 if(
chûd_run_øã
 <= 0.0f) child_run_rate = 0.0f;

876 
GLUT_KEY_RIGHT
:

877 
chûd_run_øã
 += 0.01f;

878 if(
chûd_run_øã
 >= 1.0f) child_run_rate = 1.0f;

885 
	`time
(&
now
);

886 
tm_now
 = 
	`gmtime
(&
now
);

887 
	`Ârötf
(
Â
, "%d-%d-%d %d:%d:%dÑun_len_max: %f child_run_rate: %f\n",

888 
tm_now
->
tm_yór
+1900,Åm_now->
tm_m⁄
+1,Åm_now->
tm_mday
,Åm_now->
tm_hour
+8,

889 
tm_now
->
tm_mö
,Åm_now->
tm_£c
, 
run_Àn_max
, 
chûd_run_øã
);

890 
	}
}

892 
±hªad_t
 
	gdøw_thªad
;

893 
	$maö
(
¨gc
, **
¨gv
) {

897 
	`glutInô
(&
¨gc
, 
¨gv
);

904 
	`glutInôDi•œyMode
(
GLUT_RGBA
 | 
GLUT_DOUBLE
 | 
GLUT_ALPHA
 | 
GLUT_DEPTH
);

907 
	`glutInôWödowSize
(640, 480);

910 
	`glutInôWödowPosôi⁄
(0, 0);

913 
wödow
 = 
	`glutCª©eWödow
("Jeff Molofee's GL Code Tutorial ... NeHe '99");

916 
	`glutDi•œyFunc
(&
DøwGLS˚√
);

922 
	`glutIdÀFunc
(&
DøwGLS˚√
);

926 
	`glutResh≠eFunc
(&
ReSizeGLS˚√
);

929 
	`glutKeybﬂrdFunc
(&
keyPªs£d
);

932 
	`glutS≥cülFunc
(&
•ecülKeyPªs£d
);

935 
	`InôGL
(640, 480);

938 
	`glutMaöLo›
();

941 
	}
}

	@/home/yunyao/dev/C++/backup/square_demo_V7.0/tcp_server.h

1 
	~<sys/ty≥s.h
>

2 
	~<sys/sockë.h
>

3 
	~<°dio.h
>

4 
	~<√töë/ö.h
>

5 
	~<¨∑/öë.h
>

6 
	~<uni°d.h
>

7 
	~<°rög.h
>

8 
	~<°dlib.h
>

9 
	~<f˙é.h
>

10 
	~<sys/shm.h
>

12 
	#MYPORT
 8887

	)

13 
	#QUEUE
 20

	)

15 
boﬁ
 
	$t˝_£rvî_öô
(&
£rvî_sockfd
, &
c⁄n
) {

17 
£rvî_sockfd
 = 
	`sockë
(
AF_INET
,
SOCK_STREAM
, 0);

20 
sockaddr_ö
 
£rvî_sockaddr
;

21 
£rvî_sockaddr
.
sö_Ámûy
 = 
AF_INET
;

22 
£rvî_sockaddr
.
sö_p‹t
 = 
	`ht⁄s
(
MYPORT
);

23 
£rvî_sockaddr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

26 if(
	`böd
(
£rvî_sockfd
,(
sockaddr
 *)&
£rvî_sockaddr
,(server_sockaddr))==-1) {

27 
	`≥º‹
("bind");

32 if(
	`li°í
(
£rvî_sockfd
,
QUEUE
) == -1) {

33 
	`≥º‹
("listen");

38 
sockaddr_ö
 
˛õ¡_addr
;

39 
sockÀn_t
 
Àngth
 = (
˛õ¡_addr
);

42 
c⁄n
 = 
	`ac˚±
(
£rvî_sockfd
, (
sockaddr
*)&
˛õ¡_addr
, &
Àngth
);

43 if(
c⁄n
<0) {

44 
	`≥º‹
("connect");

49 
	}
}

51 
boﬁ
 
	$t˝_£rvî_˛o£
(&
£rvî_sockfd
, &
c⁄n
) {

52 
	`˛o£
(
c⁄n
);

53 
	`˛o£
(
£rvî_sockfd
);

55 
	}
}

	@/home/yunyao/dev/C++/backup/square_demo_V7.0/texture.h

13 #i‚de‡
__TEXTURE_H_


14 
	#__TEXTURE_H_


	)

17 
	~<GL/gl.h
>

18 
	~<GL/glu.h
>

19 
	~<ve˘‹
>

21 ˛as†
	cTextuª
 {

22 
	m¥iv©e
 :

23 
GLuöt
 *
ãxtuªs
;

24 
	mÀngth
;

25 
	mmax_Àngth
;

26 
	mpublic
 :

28 
	$Textuª
(
max_Àngth
){

29 
this
->
ãxtuªs
 = 
√w
 
GLuöt
[
max_Àngth
];

30 
this
->
Àngth
 = 0;

31 
this
->
max_Àngth
 = max_length;

34 ~
	$Textuª
(){

35 
dñëe
[] 
ãxtuªs
;

36 
ãxtuªs
 = 
NULL
;

37 
	}
}

51 
	$lﬂdGLTextuª
(
Image
 *
image
){

52 if((
this
->
Àngth
Ë>—his->
max_Àngth
)){

53 
	`¥ötf
("length out ofÑange");

55 
	`glGíTextuªs
(1, &
ãxtuªs
[
this
->
Àngth
]);

56 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuªs
[
this
->
Àngth
]);

59 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
,
GL_TEXTURE_MAG_FILTER
,
GL_NEAREST
);

60 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
,
GL_TEXTURE_MIN_FILTER
,
GL_NEAREST
);

61 
	`gluBuûd2DMùm≠s
(
GL_TEXTURE_2D
, 3, 
image
->
	`gëSizeX
(), image->
	`gëSizeY
(), 
GL_RGB
, 
GL_UNSIGNED_BYTE
, image->
	`gëD©a
());

63 ++(
this
->
Àngth
);

64 
	}
}

66 
GLuöt
 
	$gëGLTextuª
(
ödex
){

67 if(
ödex
 >(
this
->
Àngth
)){

68 
	`¥ötf
("index out ofÑange");

70  (
this
->
ãxtuªs
)[
ödex
];

71 
	}
}

73 
	$gëLígth
(){

74  
this
->
Àngth
;

75 
	}
}

77 
	$gëMaxLígth
(){

78  
this
->
max_Àngth
;

79 
	}
}

83 
Textuª
 *
	gãxtuª
;

86 
	$LﬂdGLTextuªs
() {

88 
Image
 *
image
;

89 
ãxtuª
 = 
√w
 
	`Textuª
(8);

92 
image
 = 
√w
 
	`Image
();

93 i‡(!
image
->
	`imageLﬂd
("Data/road.bmp")){

94 
	`exô
(1);

96 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

97 
dñëe
 
image
;

100 
image
 = 
√w
 
	`Image
();

101 i‡(!
image
->
	`imageLﬂd
("Data/grass.bmp")) {

102 
	`exô
(1);

104 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

105 
dñëe
 
image
;

108 
image
 = 
√w
 
	`Image
();

109 i‡(
image
 =
NULL
) {

110 
	`exô
(0);

113 i‡(!
image
->
	`imageLﬂd
("Data/building.bmp")) {

114 
	`exô
(1);

116 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

117 
dñëe
 
image
;

120 
image
 = 
√w
 
	`Image
();

121 i‡(!
image
->
	`imageLﬂd
("Data/building2.bmp")) {

122 
	`exô
(1);

124 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

125 
dñëe
 
image
;

128 
image
 = 
√w
 
	`Image
();

129 i‡(!
image
->
	`imageLﬂd
("Data/bdw.bmp")) {

130 
	`exô
(1);

132 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

133 
dñëe
 
image
;

136 
image
 = 
√w
 
	`Image
();

137 i‡(!
image
->
	`imageLﬂd
("Data/crate.bmp")) {

138 
	`exô
(1);

140 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

141 
dñëe
 
image
;

144 
image
 = 
√w
 
	`Image
();

145 i‡(!
image
->
	`imageLﬂd
("Data/muwenli3.bmp")) {

146 
	`exô
(1);

148 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

149 
dñëe
 
image
;

152 
image
 = 
√w
 
	`Image
();

153 i‡(!
image
->
	`imageLﬂd
("Data/muwenli2.bmp")) {

154 
	`exô
(1);

156 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

157 
dñëe
 
image
;

159 
	}
}

	@/usr/include/GL/gl.h

27 #i‚de‡
__gl_h_


28 
	#__gl_h_


	)

30 #i‡
deföed
(
USE_MGL_NAMESPACE
)

31 
	~"gl_m™gÀ.h
"

39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

40 
	#__WIN32__


	)

43 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

44 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GL32
)

45 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

46 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

47 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

49 
	#GLAPI
 

	)

51 #i‡
deföed
(
__MINGW32__
Ë&& deföed(
GL_NO_STDCALL
Ë|| deföed(
UNDER_CE
)

52 
	#GLAPIENTRY


	)

54 
	#GLAPIENTRY
 
__°dˇŒ


	)

56 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
USE_OPENGL32
)

57 
	#GLAPI
 

	)

58 
	#GLAPIENTRY
 
__°dˇŒ


	)

59 #ñi‡(
deföed
(
__GNUC__
Ë&& __GNUC__ >4Ë|| (deföed(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

60 
	#GLAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

61 
	#GLAPIENTRY


	)

72 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
)

73 #i‚de‡
WIN32_LEAN_AND_MEAN


74 
	#WIN32_LEAN_AND_MEAN
 1

	)

76 
	~<wödows.h
>

79 #i‚de‡
GLAPI


80 
	#GLAPI
 

	)

83 #i‚de‡
GLAPIENTRY


84 
	#GLAPIENTRY


	)

87 #i‚de‡
APIENTRY


88 
	#APIENTRY
 
GLAPIENTRY


	)

92 #i‚de‡
APIENTRYP


93 
	#APIENTRYP
 
APIENTRY
 *

	)

96 #i‚de‡
GLAPIENTRYP


97 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

106 #ifde‡
__˝lu•lus


112 
	#GL_VERSION_1_1
 1

	)

113 
	#GL_VERSION_1_2
 1

	)

114 
	#GL_VERSION_1_3
 1

	)

115 
	#GL_ARB_imagög
 1

	)

121 
	tGLíum
;

122 
	tGLboﬁón
;

123 
	tGLbôfõld
;

124 
	tGLvoid
;

125 sig√d 
	tGLbyã
;

126 
	tGLsh‹t
;

127 
	tGLöt
;

128 
	tGLubyã
;

129 
	tGLush‹t
;

130 
	tGLuöt
;

131 
	tGLsizei
;

132 
	tGLÊﬂt
;

133 
	tGL˛ampf
;

134 
	tGLdoubÀ
;

135 
	tGL˛ampd
;

144 
	#GL_FALSE
 0

	)

145 
	#GL_TRUE
 1

	)

148 
	#GL_BYTE
 0x1400

	)

149 
	#GL_UNSIGNED_BYTE
 0x1401

	)

150 
	#GL_SHORT
 0x1402

	)

151 
	#GL_UNSIGNED_SHORT
 0x1403

	)

152 
	#GL_INT
 0x1404

	)

153 
	#GL_UNSIGNED_INT
 0x1405

	)

154 
	#GL_FLOAT
 0x1406

	)

155 
	#GL_2_BYTES
 0x1407

	)

156 
	#GL_3_BYTES
 0x1408

	)

157 
	#GL_4_BYTES
 0x1409

	)

158 
	#GL_DOUBLE
 0x140A

	)

161 
	#GL_POINTS
 0x0000

	)

162 
	#GL_LINES
 0x0001

	)

163 
	#GL_LINE_LOOP
 0x0002

	)

164 
	#GL_LINE_STRIP
 0x0003

	)

165 
	#GL_TRIANGLES
 0x0004

	)

166 
	#GL_TRIANGLE_STRIP
 0x0005

	)

167 
	#GL_TRIANGLE_FAN
 0x0006

	)

168 
	#GL_QUADS
 0x0007

	)

169 
	#GL_QUAD_STRIP
 0x0008

	)

170 
	#GL_POLYGON
 0x0009

	)

173 
	#GL_VERTEX_ARRAY
 0x8074

	)

174 
	#GL_NORMAL_ARRAY
 0x8075

	)

175 
	#GL_COLOR_ARRAY
 0x8076

	)

176 
	#GL_INDEX_ARRAY
 0x8077

	)

177 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

178 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

179 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

180 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

181 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

182 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

183 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

184 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

185 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

186 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

187 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

188 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

189 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

190 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

191 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

192 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

193 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

194 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

195 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

196 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

197 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

198 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

199 
	#GL_V2F
 0x2A20

	)

200 
	#GL_V3F
 0x2A21

	)

201 
	#GL_C4UB_V2F
 0x2A22

	)

202 
	#GL_C4UB_V3F
 0x2A23

	)

203 
	#GL_C3F_V3F
 0x2A24

	)

204 
	#GL_N3F_V3F
 0x2A25

	)

205 
	#GL_C4F_N3F_V3F
 0x2A26

	)

206 
	#GL_T2F_V3F
 0x2A27

	)

207 
	#GL_T4F_V4F
 0x2A28

	)

208 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

209 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

210 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

211 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

212 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

215 
	#GL_MATRIX_MODE
 0x0BA0

	)

216 
	#GL_MODELVIEW
 0x1700

	)

217 
	#GL_PROJECTION
 0x1701

	)

218 
	#GL_TEXTURE
 0x1702

	)

221 
	#GL_POINT_SMOOTH
 0x0B10

	)

222 
	#GL_POINT_SIZE
 0x0B11

	)

223 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

224 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

227 
	#GL_LINE_SMOOTH
 0x0B20

	)

228 
	#GL_LINE_STIPPLE
 0x0B24

	)

229 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

230 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

231 
	#GL_LINE_WIDTH
 0x0B21

	)

232 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

233 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

236 
	#GL_POINT
 0x1B00

	)

237 
	#GL_LINE
 0x1B01

	)

238 
	#GL_FILL
 0x1B02

	)

239 
	#GL_CW
 0x0900

	)

240 
	#GL_CCW
 0x0901

	)

241 
	#GL_FRONT
 0x0404

	)

242 
	#GL_BACK
 0x0405

	)

243 
	#GL_POLYGON_MODE
 0x0B40

	)

244 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

245 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

246 
	#GL_EDGE_FLAG
 0x0B43

	)

247 
	#GL_CULL_FACE
 0x0B44

	)

248 
	#GL_CULL_FACE_MODE
 0x0B45

	)

249 
	#GL_FRONT_FACE
 0x0B46

	)

250 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

251 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

252 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

253 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

254 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

257 
	#GL_COMPILE
 0x1300

	)

258 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

259 
	#GL_LIST_BASE
 0x0B32

	)

260 
	#GL_LIST_INDEX
 0x0B33

	)

261 
	#GL_LIST_MODE
 0x0B30

	)

264 
	#GL_NEVER
 0x0200

	)

265 
	#GL_LESS
 0x0201

	)

266 
	#GL_EQUAL
 0x0202

	)

267 
	#GL_LEQUAL
 0x0203

	)

268 
	#GL_GREATER
 0x0204

	)

269 
	#GL_NOTEQUAL
 0x0205

	)

270 
	#GL_GEQUAL
 0x0206

	)

271 
	#GL_ALWAYS
 0x0207

	)

272 
	#GL_DEPTH_TEST
 0x0B71

	)

273 
	#GL_DEPTH_BITS
 0x0D56

	)

274 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

275 
	#GL_DEPTH_FUNC
 0x0B74

	)

276 
	#GL_DEPTH_RANGE
 0x0B70

	)

277 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

278 
	#GL_DEPTH_COMPONENT
 0x1902

	)

281 
	#GL_LIGHTING
 0x0B50

	)

282 
	#GL_LIGHT0
 0x4000

	)

283 
	#GL_LIGHT1
 0x4001

	)

284 
	#GL_LIGHT2
 0x4002

	)

285 
	#GL_LIGHT3
 0x4003

	)

286 
	#GL_LIGHT4
 0x4004

	)

287 
	#GL_LIGHT5
 0x4005

	)

288 
	#GL_LIGHT6
 0x4006

	)

289 
	#GL_LIGHT7
 0x4007

	)

290 
	#GL_SPOT_EXPONENT
 0x1205

	)

291 
	#GL_SPOT_CUTOFF
 0x1206

	)

292 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

293 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

294 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

295 
	#GL_AMBIENT
 0x1200

	)

296 
	#GL_DIFFUSE
 0x1201

	)

297 
	#GL_SPECULAR
 0x1202

	)

298 
	#GL_SHININESS
 0x1601

	)

299 
	#GL_EMISSION
 0x1600

	)

300 
	#GL_POSITION
 0x1203

	)

301 
	#GL_SPOT_DIRECTION
 0x1204

	)

302 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

303 
	#GL_COLOR_INDEXES
 0x1603

	)

304 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

305 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

306 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

307 
	#GL_FRONT_AND_BACK
 0x0408

	)

308 
	#GL_SHADE_MODEL
 0x0B54

	)

309 
	#GL_FLAT
 0x1D00

	)

310 
	#GL_SMOOTH
 0x1D01

	)

311 
	#GL_COLOR_MATERIAL
 0x0B57

	)

312 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

313 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

314 
	#GL_NORMALIZE
 0x0BA1

	)

317 
	#GL_CLIP_PLANE0
 0x3000

	)

318 
	#GL_CLIP_PLANE1
 0x3001

	)

319 
	#GL_CLIP_PLANE2
 0x3002

	)

320 
	#GL_CLIP_PLANE3
 0x3003

	)

321 
	#GL_CLIP_PLANE4
 0x3004

	)

322 
	#GL_CLIP_PLANE5
 0x3005

	)

325 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

326 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

327 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

328 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

329 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

330 
	#GL_ACCUM
 0x0100

	)

331 
	#GL_ADD
 0x0104

	)

332 
	#GL_LOAD
 0x0101

	)

333 
	#GL_MULT
 0x0103

	)

334 
	#GL_RETURN
 0x0102

	)

337 
	#GL_ALPHA_TEST
 0x0BC0

	)

338 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

339 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

342 
	#GL_BLEND
 0x0BE2

	)

343 
	#GL_BLEND_SRC
 0x0BE1

	)

344 
	#GL_BLEND_DST
 0x0BE0

	)

345 
	#GL_ZERO
 0

	)

346 
	#GL_ONE
 1

	)

347 
	#GL_SRC_COLOR
 0x0300

	)

348 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

349 
	#GL_SRC_ALPHA
 0x0302

	)

350 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

351 
	#GL_DST_ALPHA
 0x0304

	)

352 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

353 
	#GL_DST_COLOR
 0x0306

	)

354 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

355 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

358 
	#GL_FEEDBACK
 0x1C01

	)

359 
	#GL_RENDER
 0x1C00

	)

360 
	#GL_SELECT
 0x1C02

	)

363 
	#GL_2D
 0x0600

	)

364 
	#GL_3D
 0x0601

	)

365 
	#GL_3D_COLOR
 0x0602

	)

366 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

367 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

368 
	#GL_POINT_TOKEN
 0x0701

	)

369 
	#GL_LINE_TOKEN
 0x0702

	)

370 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

371 
	#GL_POLYGON_TOKEN
 0x0703

	)

372 
	#GL_BITMAP_TOKEN
 0x0704

	)

373 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

374 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

375 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

376 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

377 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

378 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

381 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

382 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

385 
	#GL_FOG
 0x0B60

	)

386 
	#GL_FOG_MODE
 0x0B65

	)

387 
	#GL_FOG_DENSITY
 0x0B62

	)

388 
	#GL_FOG_COLOR
 0x0B66

	)

389 
	#GL_FOG_INDEX
 0x0B61

	)

390 
	#GL_FOG_START
 0x0B63

	)

391 
	#GL_FOG_END
 0x0B64

	)

392 
	#GL_LINEAR
 0x2601

	)

393 
	#GL_EXP
 0x0800

	)

394 
	#GL_EXP2
 0x0801

	)

397 
	#GL_LOGIC_OP
 0x0BF1

	)

398 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

399 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

400 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

401 
	#GL_CLEAR
 0x1500

	)

402 
	#GL_SET
 0x150F

	)

403 
	#GL_COPY
 0x1503

	)

404 
	#GL_COPY_INVERTED
 0x150C

	)

405 
	#GL_NOOP
 0x1505

	)

406 
	#GL_INVERT
 0x150A

	)

407 
	#GL_AND
 0x1501

	)

408 
	#GL_NAND
 0x150E

	)

409 
	#GL_OR
 0x1507

	)

410 
	#GL_NOR
 0x1508

	)

411 
	#GL_XOR
 0x1506

	)

412 
	#GL_EQUIV
 0x1509

	)

413 
	#GL_AND_REVERSE
 0x1502

	)

414 
	#GL_AND_INVERTED
 0x1504

	)

415 
	#GL_OR_REVERSE
 0x150B

	)

416 
	#GL_OR_INVERTED
 0x150D

	)

419 
	#GL_STENCIL_BITS
 0x0D57

	)

420 
	#GL_STENCIL_TEST
 0x0B90

	)

421 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

422 
	#GL_STENCIL_FUNC
 0x0B92

	)

423 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

424 
	#GL_STENCIL_FAIL
 0x0B94

	)

425 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

426 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

427 
	#GL_STENCIL_REF
 0x0B97

	)

428 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

429 
	#GL_STENCIL_INDEX
 0x1901

	)

430 
	#GL_KEEP
 0x1E00

	)

431 
	#GL_REPLACE
 0x1E01

	)

432 
	#GL_INCR
 0x1E02

	)

433 
	#GL_DECR
 0x1E03

	)

436 
	#GL_NONE
 0

	)

437 
	#GL_LEFT
 0x0406

	)

438 
	#GL_RIGHT
 0x0407

	)

442 
	#GL_FRONT_LEFT
 0x0400

	)

443 
	#GL_FRONT_RIGHT
 0x0401

	)

444 
	#GL_BACK_LEFT
 0x0402

	)

445 
	#GL_BACK_RIGHT
 0x0403

	)

446 
	#GL_AUX0
 0x0409

	)

447 
	#GL_AUX1
 0x040A

	)

448 
	#GL_AUX2
 0x040B

	)

449 
	#GL_AUX3
 0x040C

	)

450 
	#GL_COLOR_INDEX
 0x1900

	)

451 
	#GL_RED
 0x1903

	)

452 
	#GL_GREEN
 0x1904

	)

453 
	#GL_BLUE
 0x1905

	)

454 
	#GL_ALPHA
 0x1906

	)

455 
	#GL_LUMINANCE
 0x1909

	)

456 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

457 
	#GL_ALPHA_BITS
 0x0D55

	)

458 
	#GL_RED_BITS
 0x0D52

	)

459 
	#GL_GREEN_BITS
 0x0D53

	)

460 
	#GL_BLUE_BITS
 0x0D54

	)

461 
	#GL_INDEX_BITS
 0x0D51

	)

462 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

463 
	#GL_AUX_BUFFERS
 0x0C00

	)

464 
	#GL_READ_BUFFER
 0x0C02

	)

465 
	#GL_DRAW_BUFFER
 0x0C01

	)

466 
	#GL_DOUBLEBUFFER
 0x0C32

	)

467 
	#GL_STEREO
 0x0C33

	)

468 
	#GL_BITMAP
 0x1A00

	)

469 
	#GL_COLOR
 0x1800

	)

470 
	#GL_DEPTH
 0x1801

	)

471 
	#GL_STENCIL
 0x1802

	)

472 
	#GL_DITHER
 0x0BD0

	)

473 
	#GL_RGB
 0x1907

	)

474 
	#GL_RGBA
 0x1908

	)

477 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

478 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

479 
	#GL_MAX_LIGHTS
 0x0D31

	)

480 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

481 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

482 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

483 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

484 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

485 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

486 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

487 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

488 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

489 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

492 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

493 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

494 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

495 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

496 
	#GL_CURRENT_INDEX
 0x0B01

	)

497 
	#GL_CURRENT_COLOR
 0x0B00

	)

498 
	#GL_CURRENT_NORMAL
 0x0B02

	)

499 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

500 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

501 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

502 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

503 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

504 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

505 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

506 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

507 
	#GL_INDEX_MODE
 0x0C30

	)

508 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

509 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

510 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

511 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

512 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

513 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

514 
	#GL_RENDER_MODE
 0x0C40

	)

515 
	#GL_RGBA_MODE
 0x0C31

	)

516 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

517 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

518 
	#GL_VIEWPORT
 0x0BA2

	)

521 
	#GL_AUTO_NORMAL
 0x0D80

	)

522 
	#GL_MAP1_COLOR_4
 0x0D90

	)

523 
	#GL_MAP1_INDEX
 0x0D91

	)

524 
	#GL_MAP1_NORMAL
 0x0D92

	)

525 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

526 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

527 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

528 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

529 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

530 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

531 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

532 
	#GL_MAP2_INDEX
 0x0DB1

	)

533 
	#GL_MAP2_NORMAL
 0x0DB2

	)

534 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

535 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

536 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

537 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

538 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

539 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

540 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

541 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

542 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

543 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

544 
	#GL_COEFF
 0x0A00

	)

545 
	#GL_ORDER
 0x0A01

	)

546 
	#GL_DOMAIN
 0x0A02

	)

549 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

550 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

551 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

552 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

553 
	#GL_FOG_HINT
 0x0C54

	)

554 
	#GL_DONT_CARE
 0x1100

	)

555 
	#GL_FASTEST
 0x1101

	)

556 
	#GL_NICEST
 0x1102

	)

559 
	#GL_SCISSOR_BOX
 0x0C10

	)

560 
	#GL_SCISSOR_TEST
 0x0C11

	)

563 
	#GL_MAP_COLOR
 0x0D10

	)

564 
	#GL_MAP_STENCIL
 0x0D11

	)

565 
	#GL_INDEX_SHIFT
 0x0D12

	)

566 
	#GL_INDEX_OFFSET
 0x0D13

	)

567 
	#GL_RED_SCALE
 0x0D14

	)

568 
	#GL_RED_BIAS
 0x0D15

	)

569 
	#GL_GREEN_SCALE
 0x0D18

	)

570 
	#GL_GREEN_BIAS
 0x0D19

	)

571 
	#GL_BLUE_SCALE
 0x0D1A

	)

572 
	#GL_BLUE_BIAS
 0x0D1B

	)

573 
	#GL_ALPHA_SCALE
 0x0D1C

	)

574 
	#GL_ALPHA_BIAS
 0x0D1D

	)

575 
	#GL_DEPTH_SCALE
 0x0D1E

	)

576 
	#GL_DEPTH_BIAS
 0x0D1F

	)

577 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

578 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

579 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

580 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

581 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

582 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

583 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

584 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

585 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

586 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

587 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

588 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

589 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

590 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

591 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

592 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

593 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

594 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

595 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

596 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

597 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

598 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

599 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

600 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

601 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

602 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

603 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

604 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

605 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

606 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

607 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

608 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

609 
	#GL_ZOOM_X
 0x0D16

	)

610 
	#GL_ZOOM_Y
 0x0D17

	)

613 
	#GL_TEXTURE_ENV
 0x2300

	)

614 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

615 
	#GL_TEXTURE_1D
 0x0DE0

	)

616 
	#GL_TEXTURE_2D
 0x0DE1

	)

617 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

618 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

619 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

620 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

621 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

622 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

623 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

624 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

625 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

626 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

627 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

628 
	#GL_TEXTURE_WIDTH
 0x1000

	)

629 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

630 
	#GL_TEXTURE_BORDER
 0x1005

	)

631 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

632 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

633 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

634 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

635 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

636 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

637 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

638 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

639 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

640 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

641 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

642 
	#GL_OBJECT_LINEAR
 0x2401

	)

643 
	#GL_OBJECT_PLANE
 0x2501

	)

644 
	#GL_EYE_LINEAR
 0x2400

	)

645 
	#GL_EYE_PLANE
 0x2502

	)

646 
	#GL_SPHERE_MAP
 0x2402

	)

647 
	#GL_DECAL
 0x2101

	)

648 
	#GL_MODULATE
 0x2100

	)

649 
	#GL_NEAREST
 0x2600

	)

650 
	#GL_REPEAT
 0x2901

	)

651 
	#GL_CLAMP
 0x2900

	)

652 
	#GL_S
 0x2000

	)

653 
	#GL_T
 0x2001

	)

654 
	#GL_R
 0x2002

	)

655 
	#GL_Q
 0x2003

	)

658 
	#GL_VENDOR
 0x1F00

	)

659 
	#GL_RENDERER
 0x1F01

	)

660 
	#GL_VERSION
 0x1F02

	)

661 
	#GL_EXTENSIONS
 0x1F03

	)

664 
	#GL_NO_ERROR
 0

	)

665 
	#GL_INVALID_ENUM
 0x0500

	)

666 
	#GL_INVALID_VALUE
 0x0501

	)

667 
	#GL_INVALID_OPERATION
 0x0502

	)

668 
	#GL_STACK_OVERFLOW
 0x0503

	)

669 
	#GL_STACK_UNDERFLOW
 0x0504

	)

670 
	#GL_OUT_OF_MEMORY
 0x0505

	)

673 
	#GL_CURRENT_BIT
 0x00000001

	)

674 
	#GL_POINT_BIT
 0x00000002

	)

675 
	#GL_LINE_BIT
 0x00000004

	)

676 
	#GL_POLYGON_BIT
 0x00000008

	)

677 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

678 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

679 
	#GL_LIGHTING_BIT
 0x00000040

	)

680 
	#GL_FOG_BIT
 0x00000080

	)

681 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

682 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

683 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

684 
	#GL_VIEWPORT_BIT
 0x00000800

	)

685 
	#GL_TRANSFORM_BIT
 0x00001000

	)

686 
	#GL_ENABLE_BIT
 0x00002000

	)

687 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

688 
	#GL_HINT_BIT
 0x00008000

	)

689 
	#GL_EVAL_BIT
 0x00010000

	)

690 
	#GL_LIST_BIT
 0x00020000

	)

691 
	#GL_TEXTURE_BIT
 0x00040000

	)

692 
	#GL_SCISSOR_BIT
 0x00080000

	)

693 
	#GL_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

697 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

698 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

699 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

700 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

701 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

702 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

703 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

704 
	#GL_ALPHA4
 0x803B

	)

705 
	#GL_ALPHA8
 0x803C

	)

706 
	#GL_ALPHA12
 0x803D

	)

707 
	#GL_ALPHA16
 0x803E

	)

708 
	#GL_LUMINANCE4
 0x803F

	)

709 
	#GL_LUMINANCE8
 0x8040

	)

710 
	#GL_LUMINANCE12
 0x8041

	)

711 
	#GL_LUMINANCE16
 0x8042

	)

712 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

713 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

714 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

715 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

716 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

717 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

718 
	#GL_INTENSITY
 0x8049

	)

719 
	#GL_INTENSITY4
 0x804A

	)

720 
	#GL_INTENSITY8
 0x804B

	)

721 
	#GL_INTENSITY12
 0x804C

	)

722 
	#GL_INTENSITY16
 0x804D

	)

723 
	#GL_R3_G3_B2
 0x2A10

	)

724 
	#GL_RGB4
 0x804F

	)

725 
	#GL_RGB5
 0x8050

	)

726 
	#GL_RGB8
 0x8051

	)

727 
	#GL_RGB10
 0x8052

	)

728 
	#GL_RGB12
 0x8053

	)

729 
	#GL_RGB16
 0x8054

	)

730 
	#GL_RGBA2
 0x8055

	)

731 
	#GL_RGBA4
 0x8056

	)

732 
	#GL_RGB5_A1
 0x8057

	)

733 
	#GL_RGBA8
 0x8058

	)

734 
	#GL_RGB10_A2
 0x8059

	)

735 
	#GL_RGBA12
 0x805A

	)

736 
	#GL_RGBA16
 0x805B

	)

737 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

738 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

739 
	#GL_ALL_CLIENT_ATTRIB_BITS
 0xFFFFFFFF

	)

740 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

748 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Index
–
GLÊﬂt
 
c
 );

750 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Cﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
 );

752 
GLAPI
 
GLAPIENTRY
 
glCÀ¨
–
GLbôfõld
 
mask
 );

754 
GLAPI
 
GLAPIENTRY
 
glIndexMask
–
GLuöt
 
mask
 );

756 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Mask
–
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
 );

758 
GLAPI
 
GLAPIENTRY
 
glAÕhaFunc
–
GLíum
 
func
, 
GL˛ampf
 
ªf
 );

760 
GLAPI
 
GLAPIENTRY
 
glBÀndFunc
–
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
 );

762 
GLAPI
 
GLAPIENTRY
 
glLogicOp
–
GLíum
 
›code
 );

764 
GLAPI
 
GLAPIENTRY
 
glCuŒFa˚
–
GLíum
 
mode
 );

766 
GLAPI
 
GLAPIENTRY
 
glFr⁄tFa˚
–
GLíum
 
mode
 );

768 
GLAPI
 
GLAPIENTRY
 
glPoötSize
–
GLÊﬂt
 
size
 );

770 
GLAPI
 
GLAPIENTRY
 
glLöeWidth
–
GLÊﬂt
 
width
 );

772 
GLAPI
 
GLAPIENTRY
 
glLöeStù∂e
–
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
 );

774 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Mode
–
GLíum
 
Á˚
, GLíum 
mode
 );

776 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Off£t
–
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
 );

778 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Stù∂e
–c⁄° 
GLubyã
 *
mask
 );

780 
GLAPI
 
GLAPIENTRY
 
glGëPﬁyg⁄Stù∂e
–
GLubyã
 *
mask
 );

782 
GLAPI
 
GLAPIENTRY
 
glEdgeFœg
–
GLboﬁón
 
Êag
 );

784 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgv
–c⁄° 
GLboﬁón
 *
Êag
 );

786 
GLAPI
 
GLAPIENTRY
 
glSciss‹
–
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

788 
GLAPI
 
GLAPIENTRY
 
glClùPœ√
–
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
 );

790 
GLAPI
 
GLAPIENTRY
 
glGëClùPœ√
–
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
 );

792 
GLAPI
 
GLAPIENTRY
 
glDøwBuf„r
–
GLíum
 
mode
 );

794 
GLAPI
 
GLAPIENTRY
 
glRódBuf„r
–
GLíum
 
mode
 );

796 
GLAPI
 
GLAPIENTRY
 
glE«bÀ
–
GLíum
 
ˇp
 );

798 
GLAPI
 
GLAPIENTRY
 
glDißbÀ
–
GLíum
 
ˇp
 );

800 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsE«bÀd
–
GLíum
 
ˇp
 );

803 
GLAPI
 
GLAPIENTRY
 
glE«bÀClõ¡Sèã
–
GLíum
 
ˇp
 );

805 
GLAPI
 
GLAPIENTRY
 
glDißbÀClõ¡Sèã
–
GLíum
 
ˇp
 );

808 
GLAPI
 
GLAPIENTRY
 
glGëBoﬁónv
–
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
 );

810 
GLAPI
 
GLAPIENTRY
 
glGëDoubÀv
–
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

812 
GLAPI
 
GLAPIENTRY
 
glGëFlﬂtv
–
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

814 
GLAPI
 
GLAPIENTRY
 
glGëI¡egîv
–
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

817 
GLAPI
 
GLAPIENTRY
 
glPushAârib
–
GLbôfõld
 
mask
 );

819 
GLAPI
 
GLAPIENTRY
 
glP›Aârib
( );

822 
GLAPI
 
GLAPIENTRY
 
glPushClõ¡Aârib
–
GLbôfõld
 
mask
 );

824 
GLAPI
 
GLAPIENTRY
 
glP›Clõ¡Aârib
( );

827 
GLAPI
 
GLöt
 
GLAPIENTRY
 
glRídîMode
–
GLíum
 
mode
 );

829 
GLAPI
 
GLíum
 
GLAPIENTRY
 
glGëEº‹
( );

831 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
glGëSåög
–
GLíum
 
«me
 );

833 
GLAPI
 
GLAPIENTRY
 
glFöish
( );

835 
GLAPI
 
GLAPIENTRY
 
glFlush
( );

837 
GLAPI
 
GLAPIENTRY
 
glHöt
–
GLíum
 
èrgë
, GLíum 
mode
 );

844 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Dïth
–
GL˛ampd
 
dïth
 );

846 
GLAPI
 
GLAPIENTRY
 
glDïthFunc
–
GLíum
 
func
 );

848 
GLAPI
 
GLAPIENTRY
 
glDïthMask
–
GLboﬁón
 
Êag
 );

850 
GLAPI
 
GLAPIENTRY
 
glDïthR™ge
–
GL˛ampd
 
√¨_vÆ
, GL˛ampd 
Ár_vÆ
 );

857 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Accum
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
 );

859 
GLAPI
 
GLAPIENTRY
 
glAccum
–
GLíum
 
›
, 
GLÊﬂt
 
vÆue
 );

866 
GLAPI
 
GLAPIENTRY
 
glM©rixMode
–
GLíum
 
mode
 );

868 
GLAPI
 
GLAPIENTRY
 
glOπho
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

869 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

870 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

872 
GLAPI
 
GLAPIENTRY
 
glFru°um
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

873 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

874 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

876 
GLAPI
 
GLAPIENTRY
 
glVõwp‹t
–
GLöt
 
x
, GLöà
y
,

877 
GLsizei
 
width
, GLsizeò
height
 );

879 
GLAPI
 
GLAPIENTRY
 
glPushM©rix
( );

881 
GLAPI
 
GLAPIENTRY
 
glP›M©rix
( );

883 
GLAPI
 
GLAPIENTRY
 
glLﬂdIdítôy
( );

885 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

886 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

888 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

889 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

891 
GLAPI
 
GLAPIENTRY
 
glRŸ©ed
–
GLdoubÀ
 
™gÀ
,

892 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

893 
GLAPI
 
GLAPIENTRY
 
glRŸ©ef
–
GLÊﬂt
 
™gÀ
,

894 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

896 
GLAPI
 
GLAPIENTRY
 
glSˇÀd
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

897 
GLAPI
 
GLAPIENTRY
 
glSˇÀf
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

899 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ed
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

900 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ef
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

907 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsLi°
–
GLuöt
 
li°
 );

909 
GLAPI
 
GLAPIENTRY
 
glDñëeLi°s
–
GLuöt
 
li°
, 
GLsizei
 
ønge
 );

911 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
glGíLi°s
–
GLsizei
 
ønge
 );

913 
GLAPI
 
GLAPIENTRY
 
glNewLi°
–
GLuöt
 
li°
, 
GLíum
 
mode
 );

915 
GLAPI
 
GLAPIENTRY
 
glEndLi°
( );

917 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°
–
GLuöt
 
li°
 );

919 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°s
–
GLsizei
 
n
, 
GLíum
 
ty≥
,

920 c⁄° 
GLvoid
 *
li°s
 );

922 
GLAPI
 
GLAPIENTRY
 
glLi°Ba£
–
GLuöt
 
ba£
 );

929 
GLAPI
 
GLAPIENTRY
 
glBegö
–
GLíum
 
mode
 );

931 
GLAPI
 
GLAPIENTRY
 
glEnd
( );

934 
GLAPI
 
GLAPIENTRY
 
glVîãx2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

935 
GLAPI
 
GLAPIENTRY
 
glVîãx2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

936 
GLAPI
 
GLAPIENTRY
 
glVîãx2i
–
GLöt
 
x
, GLöà
y
 );

937 
GLAPI
 
GLAPIENTRY
 
glVîãx2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

939 
GLAPI
 
GLAPIENTRY
 
glVîãx3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

940 
GLAPI
 
GLAPIENTRY
 
glVîãx3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

941 
GLAPI
 
GLAPIENTRY
 
glVîãx3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

942 
GLAPI
 
GLAPIENTRY
 
glVîãx3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

944 
GLAPI
 
GLAPIENTRY
 
glVîãx4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

945 
GLAPI
 
GLAPIENTRY
 
glVîãx4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

946 
GLAPI
 
GLAPIENTRY
 
glVîãx4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

947 
GLAPI
 
GLAPIENTRY
 
glVîãx4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

949 
GLAPI
 
GLAPIENTRY
 
glVîãx2dv
–c⁄° 
GLdoubÀ
 *
v
 );

950 
GLAPI
 
GLAPIENTRY
 
glVîãx2fv
–c⁄° 
GLÊﬂt
 *
v
 );

951 
GLAPI
 
GLAPIENTRY
 
glVîãx2iv
–c⁄° 
GLöt
 *
v
 );

952 
GLAPI
 
GLAPIENTRY
 
glVîãx2sv
–c⁄° 
GLsh‹t
 *
v
 );

954 
GLAPI
 
GLAPIENTRY
 
glVîãx3dv
–c⁄° 
GLdoubÀ
 *
v
 );

955 
GLAPI
 
GLAPIENTRY
 
glVîãx3fv
–c⁄° 
GLÊﬂt
 *
v
 );

956 
GLAPI
 
GLAPIENTRY
 
glVîãx3iv
–c⁄° 
GLöt
 *
v
 );

957 
GLAPI
 
GLAPIENTRY
 
glVîãx3sv
–c⁄° 
GLsh‹t
 *
v
 );

959 
GLAPI
 
GLAPIENTRY
 
glVîãx4dv
–c⁄° 
GLdoubÀ
 *
v
 );

960 
GLAPI
 
GLAPIENTRY
 
glVîãx4fv
–c⁄° 
GLÊﬂt
 *
v
 );

961 
GLAPI
 
GLAPIENTRY
 
glVîãx4iv
–c⁄° 
GLöt
 *
v
 );

962 
GLAPI
 
GLAPIENTRY
 
glVîãx4sv
–c⁄° 
GLsh‹t
 *
v
 );

965 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3b
–
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
 );

966 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3d
–
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
 );

967 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3f
–
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
 );

968 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3i
–
GLöt
 
nx
, GLöà
ny
, GLöà
nz
 );

969 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3s
–
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
 );

971 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3bv
–c⁄° 
GLbyã
 *
v
 );

972 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3dv
–c⁄° 
GLdoubÀ
 *
v
 );

973 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3fv
–c⁄° 
GLÊﬂt
 *
v
 );

974 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3iv
–c⁄° 
GLöt
 *
v
 );

975 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3sv
–c⁄° 
GLsh‹t
 *
v
 );

978 
GLAPI
 
GLAPIENTRY
 
glIndexd
–
GLdoubÀ
 
c
 );

979 
GLAPI
 
GLAPIENTRY
 
glIndexf
–
GLÊﬂt
 
c
 );

980 
GLAPI
 
GLAPIENTRY
 
glIndexi
–
GLöt
 
c
 );

981 
GLAPI
 
GLAPIENTRY
 
glIndexs
–
GLsh‹t
 
c
 );

982 
GLAPI
 
GLAPIENTRY
 
glIndexub
–
GLubyã
 
c
 );

984 
GLAPI
 
GLAPIENTRY
 
glIndexdv
–c⁄° 
GLdoubÀ
 *
c
 );

985 
GLAPI
 
GLAPIENTRY
 
glIndexfv
–c⁄° 
GLÊﬂt
 *
c
 );

986 
GLAPI
 
GLAPIENTRY
 
glIndexiv
–c⁄° 
GLöt
 *
c
 );

987 
GLAPI
 
GLAPIENTRY
 
glIndexsv
–c⁄° 
GLsh‹t
 *
c
 );

988 
GLAPI
 
GLAPIENTRY
 
glIndexubv
–c⁄° 
GLubyã
 *
c
 );

990 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3b
–
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
 );

991 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
 );

992 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
 );

993 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3i
–
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
 );

994 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
 );

995 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ub
–
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
 );

996 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ui
–
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
 );

997 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3us
–
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
 );

999 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4b
–
GLbyã
 
ªd
, GLbyã 
gªí
,

1000 
GLbyã
 
blue
, GLbyã 
Æpha
 );

1001 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
,

1002 
GLdoubÀ
 
blue
, GLdoubÀ 
Æpha
 );

1003 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
,

1004 
GLÊﬂt
 
blue
, GLÊﬂà
Æpha
 );

1005 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4i
–
GLöt
 
ªd
, GLöà
gªí
,

1006 
GLöt
 
blue
, GLöà
Æpha
 );

1007 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
,

1008 
GLsh‹t
 
blue
, GLsh‹à
Æpha
 );

1009 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ub
–
GLubyã
 
ªd
, GLubyã 
gªí
,

1010 
GLubyã
 
blue
, GLubyã 
Æpha
 );

1011 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ui
–
GLuöt
 
ªd
, GLuöà
gªí
,

1012 
GLuöt
 
blue
, GLuöà
Æpha
 );

1013 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4us
–
GLush‹t
 
ªd
, GLush‹à
gªí
,

1014 
GLush‹t
 
blue
, GLush‹à
Æpha
 );

1017 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3bv
–c⁄° 
GLbyã
 *
v
 );

1018 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1019 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1020 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3iv
–c⁄° 
GLöt
 *
v
 );

1021 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3sv
–c⁄° 
GLsh‹t
 *
v
 );

1022 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ubv
–c⁄° 
GLubyã
 *
v
 );

1023 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3uiv
–c⁄° 
GLuöt
 *
v
 );

1024 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3usv
–c⁄° 
GLush‹t
 *
v
 );

1026 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4bv
–c⁄° 
GLbyã
 *
v
 );

1027 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1028 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1029 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4iv
–c⁄° 
GLöt
 *
v
 );

1030 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4sv
–c⁄° 
GLsh‹t
 *
v
 );

1031 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ubv
–c⁄° 
GLubyã
 *
v
 );

1032 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4uiv
–c⁄° 
GLuöt
 *
v
 );

1033 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4usv
–c⁄° 
GLush‹t
 *
v
 );

1036 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1d
–
GLdoubÀ
 
s
 );

1037 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1f
–
GLÊﬂt
 
s
 );

1038 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1i
–
GLöt
 
s
 );

1039 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1s
–
GLsh‹t
 
s
 );

1041 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1042 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2f
–
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1043 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2i
–
GLöt
 
s
, GLöà
t
 );

1044 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2s
–
GLsh‹t
 
s
, GLsh‹à
t
 );

1046 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1047 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1048 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3i
–
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1049 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1051 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1052 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1053 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4i
–
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1054 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1056 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1dv
–c⁄° 
GLdoubÀ
 *
v
 );

1057 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1fv
–c⁄° 
GLÊﬂt
 *
v
 );

1058 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1iv
–c⁄° 
GLöt
 *
v
 );

1059 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1sv
–c⁄° 
GLsh‹t
 *
v
 );

1061 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1062 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1063 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2iv
–c⁄° 
GLöt
 *
v
 );

1064 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2sv
–c⁄° 
GLsh‹t
 *
v
 );

1066 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1067 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1068 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3iv
–c⁄° 
GLöt
 *
v
 );

1069 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3sv
–c⁄° 
GLsh‹t
 *
v
 );

1071 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1072 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1073 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4iv
–c⁄° 
GLöt
 *
v
 );

1074 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4sv
–c⁄° 
GLsh‹t
 *
v
 );

1077 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

1078 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

1079 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2i
–
GLöt
 
x
, GLöà
y
 );

1080 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

1082 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

1083 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

1084 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

1085 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

1087 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1088 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1089 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1090 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1092 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1093 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1094 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2iv
–c⁄° 
GLöt
 *
v
 );

1095 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2sv
–c⁄° 
GLsh‹t
 *
v
 );

1097 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1098 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1099 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3iv
–c⁄° 
GLöt
 *
v
 );

1100 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3sv
–c⁄° 
GLsh‹t
 *
v
 );

1102 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1103 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1104 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4iv
–c⁄° 
GLöt
 *
v
 );

1105 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4sv
–c⁄° 
GLsh‹t
 *
v
 );

1108 
GLAPI
 
GLAPIENTRY
 
glRe˘d
–
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
 );

1109 
GLAPI
 
GLAPIENTRY
 
glRe˘f
–
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
 );

1110 
GLAPI
 
GLAPIENTRY
 
glRe˘i
–
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
 );

1111 
GLAPI
 
GLAPIENTRY
 
glRe˘s
–
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
 );

1114 
GLAPI
 
GLAPIENTRY
 
glRe˘dv
–c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
 );

1115 
GLAPI
 
GLAPIENTRY
 
glRe˘fv
–c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
 );

1116 
GLAPI
 
GLAPIENTRY
 
glRe˘iv
–c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
 );

1117 
GLAPI
 
GLAPIENTRY
 
glRe˘sv
–c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
 );

1124 
GLAPI
 
GLAPIENTRY
 
glVîãxPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1125 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1127 
GLAPI
 
GLAPIENTRY
 
glN‹mÆPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1128 c⁄° 
GLvoid
 *
±r
 );

1130 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Poöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1131 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1133 
GLAPI
 
GLAPIENTRY
 
glIndexPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1134 c⁄° 
GLvoid
 *
±r
 );

1136 
GLAPI
 
GLAPIENTRY
 
glTexCo‹dPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1137 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1139 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgPoöãr
–
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1141 
GLAPI
 
GLAPIENTRY
 
glGëPoöãrv
–
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
 );

1143 
GLAPI
 
GLAPIENTRY
 
glAºayEÀmít
–
GLöt
 
i
 );

1145 
GLAPI
 
GLAPIENTRY
 
glDøwAºays
–
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
 );

1147 
GLAPI
 
GLAPIENTRY
 
glDøwEÀmíts
–
GLíum
 
mode
, 
GLsizei
 
cou¡
,

1148 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1150 
GLAPI
 
GLAPIENTRY
 
glI¡îÀavedAºays
–
GLíum
 
f‹m©
, 
GLsizei
 
°ride
,

1151 c⁄° 
GLvoid
 *
poöãr
 );

1157 
GLAPI
 
GLAPIENTRY
 
glShadeModñ
–
GLíum
 
mode
 );

1159 
GLAPI
 
GLAPIENTRY
 
glLightf
–
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1160 
GLAPI
 
GLAPIENTRY
 
glLighti
–
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1161 
GLAPI
 
GLAPIENTRY
 
glLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1162 c⁄° 
GLÊﬂt
 *
∑øms
 );

1163 
GLAPI
 
GLAPIENTRY
 
glLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1164 c⁄° 
GLöt
 *
∑øms
 );

1166 
GLAPI
 
GLAPIENTRY
 
glGëLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1167 
GLÊﬂt
 *
∑øms
 );

1168 
GLAPI
 
GLAPIENTRY
 
glGëLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1169 
GLöt
 *
∑øms
 );

1171 
GLAPI
 
GLAPIENTRY
 
glLightModñf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1172 
GLAPI
 
GLAPIENTRY
 
glLightModñi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1173 
GLAPI
 
GLAPIENTRY
 
glLightModñfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1174 
GLAPI
 
GLAPIENTRY
 
glLightModñiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1176 
GLAPI
 
GLAPIENTRY
 
glM©îülf
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1177 
GLAPI
 
GLAPIENTRY
 
glM©îüli
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1178 
GLAPI
 
GLAPIENTRY
 
glM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1179 
GLAPI
 
GLAPIENTRY
 
glM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1181 
GLAPI
 
GLAPIENTRY
 
glGëM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1182 
GLAPI
 
GLAPIENTRY
 
glGëM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1184 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹M©îül
–
GLíum
 
Á˚
, GLíum 
mode
 );

1191 
GLAPI
 
GLAPIENTRY
 
glPixñZoom
–
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
 );

1193 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ef
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1194 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ei
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1196 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„rf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1197 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„ri
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1199 
GLAPI
 
GLAPIENTRY
 
glPixñM≠fv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1200 c⁄° 
GLÊﬂt
 *
vÆues
 );

1201 
GLAPI
 
GLAPIENTRY
 
glPixñM≠uiv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1202 c⁄° 
GLuöt
 *
vÆues
 );

1203 
GLAPI
 
GLAPIENTRY
 
glPixñM≠usv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1204 c⁄° 
GLush‹t
 *
vÆues
 );

1206 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠fv
–
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
 );

1207 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠uiv
–
GLíum
 
m≠
, 
GLuöt
 *
vÆues
 );

1208 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠usv
–
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
 );

1210 
GLAPI
 
GLAPIENTRY
 
glBôm≠
–
GLsizei
 
width
, GLsizeò
height
,

1211 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
,

1212 
GLÊﬂt
 
xmove
, GLÊﬂà
ymove
,

1213 c⁄° 
GLubyã
 *
bôm≠
 );

1215 
GLAPI
 
GLAPIENTRY
 
glRódPixñs
–
GLöt
 
x
, GLöà
y
,

1216 
GLsizei
 
width
, GLsizeò
height
,

1217 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1218 
GLvoid
 *
pixñs
 );

1220 
GLAPI
 
GLAPIENTRY
 
glDøwPixñs
–
GLsizei
 
width
, GLsizeò
height
,

1221 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1222 c⁄° 
GLvoid
 *
pixñs
 );

1224 
GLAPI
 
GLAPIENTRY
 
glC›yPixñs
–
GLöt
 
x
, GLöà
y
,

1225 
GLsizei
 
width
, GLsizeò
height
,

1226 
GLíum
 
ty≥
 );

1232 
GLAPI
 
GLAPIENTRY
 
glSãncûFunc
–
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
 );

1234 
GLAPI
 
GLAPIENTRY
 
glSãncûMask
–
GLuöt
 
mask
 );

1236 
GLAPI
 
GLAPIENTRY
 
glSãncûOp
–
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
 );

1238 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Sãncû
–
GLöt
 
s
 );

1246 
GLAPI
 
GLAPIENTRY
 
glTexGíd
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
 );

1247 
GLAPI
 
GLAPIENTRY
 
glTexGíf
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1248 
GLAPI
 
GLAPIENTRY
 
glTexGíi
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1250 
GLAPI
 
GLAPIENTRY
 
glTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
 );

1251 
GLAPI
 
GLAPIENTRY
 
glTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1252 
GLAPI
 
GLAPIENTRY
 
glTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1254 
GLAPI
 
GLAPIENTRY
 
glGëTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

1255 
GLAPI
 
GLAPIENTRY
 
glGëTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1256 
GLAPI
 
GLAPIENTRY
 
glGëTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1259 
GLAPI
 
GLAPIENTRY
 
glTexEnvf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1260 
GLAPI
 
GLAPIENTRY
 
glTexEnvi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1262 
GLAPI
 
GLAPIENTRY
 
glTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1263 
GLAPI
 
GLAPIENTRY
 
glTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1265 
GLAPI
 
GLAPIENTRY
 
glGëTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1266 
GLAPI
 
GLAPIENTRY
 
glGëTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1269 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1270 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1272 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1273 c⁄° 
GLÊﬂt
 *
∑øms
 );

1274 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1275 c⁄° 
GLöt
 *
∑øms
 );

1277 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîfv
–
GLíum
 
èrgë
,

1278 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1279 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîiv
–
GLíum
 
èrgë
,

1280 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1282 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîfv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1283 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1284 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîiv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1285 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1288 
GLAPI
 
GLAPIENTRY
 
glTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1289 
GLöt
 
öã∫ÆF‹m©
,

1290 
GLsizei
 
width
, 
GLöt
 
b‹dî
,

1291 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1292 c⁄° 
GLvoid
 *
pixñs
 );

1294 
GLAPI
 
GLAPIENTRY
 
glTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1295 
GLöt
 
öã∫ÆF‹m©
,

1296 
GLsizei
 
width
, GLsizeò
height
,

1297 
GLöt
 
b‹dî
, 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1298 c⁄° 
GLvoid
 *
pixñs
 );

1300 
GLAPI
 
GLAPIENTRY
 
glGëTexImage
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1301 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1302 
GLvoid
 *
pixñs
 );

1307 
GLAPI
 
GLAPIENTRY
 
glGíTextuªs
–
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
 );

1309 
GLAPI
 
GLAPIENTRY
 
glDñëeTextuªs
–
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

1311 
GLAPI
 
GLAPIENTRY
 
glBödTextuª
–
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
 );

1313 
GLAPI
 
GLAPIENTRY
 
glPri‹ôizeTextuªs
–
GLsizei
 
n
,

1314 c⁄° 
GLuöt
 *
ãxtuªs
,

1315 c⁄° 
GL˛ampf
 *
¥i‹ôõs
 );

1317 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glAªTextuªsResidít
–
GLsizei
 
n
,

1318 c⁄° 
GLuöt
 *
ãxtuªs
,

1319 
GLboﬁón
 *
ªsidí˚s
 );

1321 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsTextuª
–
GLuöt
 
ãxtuª
 );

1324 
GLAPI
 
GLAPIENTRY
 
glTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1325 
GLöt
 
xoff£t
,

1326 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1327 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
 );

1330 
GLAPI
 
GLAPIENTRY
 
glTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1331 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1332 
GLsizei
 
width
, GLsizeò
height
,

1333 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1334 c⁄° 
GLvoid
 *
pixñs
 );

1337 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1338 
GLíum
 
öã∫Æf‹m©
,

1339 
GLöt
 
x
, GLöà
y
,

1340 
GLsizei
 
width
, 
GLöt
 
b‹dî
 );

1343 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1344 
GLíum
 
öã∫Æf‹m©
,

1345 
GLöt
 
x
, GLöà
y
,

1346 
GLsizei
 
width
, GLsizeò
height
,

1347 
GLöt
 
b‹dî
 );

1350 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1351 
GLöt
 
xoff£t
, GLöà
x
, GLöà
y
,

1352 
GLsizei
 
width
 );

1355 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1356 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1357 
GLöt
 
x
, GLöà
y
,

1358 
GLsizei
 
width
, GLsizeò
height
 );

1365 
GLAPI
 
GLAPIENTRY
 
glM≠1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1366 
GLöt
 
°ride
,

1367 
GLöt
 
‹dî
, c⁄° 
GLdoubÀ
 *
poöts
 );

1368 
GLAPI
 
GLAPIENTRY
 
glM≠1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1369 
GLöt
 
°ride
,

1370 
GLöt
 
‹dî
, c⁄° 
GLÊﬂt
 *
poöts
 );

1372 
GLAPI
 
GLAPIENTRY
 
glM≠2d
–
GLíum
 
èrgë
,

1373 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1374 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1375 c⁄° 
GLdoubÀ
 *
poöts
 );

1376 
GLAPI
 
GLAPIENTRY
 
glM≠2f
–
GLíum
 
èrgë
,

1377 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1378 
GLÊﬂt
 
v1
, GLÊﬂà
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1379 c⁄° 
GLÊﬂt
 *
poöts
 );

1381 
GLAPI
 
GLAPIENTRY
 
glGëM≠dv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
 );

1382 
GLAPI
 
GLAPIENTRY
 
glGëM≠fv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
 );

1383 
GLAPI
 
GLAPIENTRY
 
glGëM≠iv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
 );

1385 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1d
–
GLdoubÀ
 
u
 );

1386 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1f
–
GLÊﬂt
 
u
 );

1388 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1dv
–c⁄° 
GLdoubÀ
 *
u
 );

1389 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1fv
–c⁄° 
GLÊﬂt
 *
u
 );

1391 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2d
–
GLdoubÀ
 
u
, GLdoubÀ 
v
 );

1392 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2f
–
GLÊﬂt
 
u
, GLÊﬂà
v
 );

1394 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2dv
–c⁄° 
GLdoubÀ
 *
u
 );

1395 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2fv
–c⁄° 
GLÊﬂt
 *
u
 );

1397 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
 );

1398 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
 );

1400 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1401 
GLöt
 
vn
, 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
 );

1402 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1403 
GLöt
 
vn
, 
GLÊﬂt
 
v1
, GLÊﬂà
v2
 );

1405 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt1
–
GLöt
 
i
 );

1407 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt2
–
GLöt
 
i
, GLöà
j
 );

1409 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh1
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
 );

1411 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh2
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
 );

1418 
GLAPI
 
GLAPIENTRY
 
glFogf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1420 
GLAPI
 
GLAPIENTRY
 
glFogi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1422 
GLAPI
 
GLAPIENTRY
 
glFogfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1424 
GLAPI
 
GLAPIENTRY
 
glFogiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1431 
GLAPI
 
GLAPIENTRY
 
glFìdbackBuf„r
–
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
 );

1433 
GLAPI
 
GLAPIENTRY
 
glPassThrough
–
GLÊﬂt
 
tokí
 );

1435 
GLAPI
 
GLAPIENTRY
 
glSñe˘Buf„r
–
GLsizei
 
size
, 
GLuöt
 *
buf„r
 );

1437 
GLAPI
 
GLAPIENTRY
 
glInôNames
( );

1439 
GLAPI
 
GLAPIENTRY
 
glLﬂdName
–
GLuöt
 
«me
 );

1441 
GLAPI
 
GLAPIENTRY
 
glPushName
–
GLuöt
 
«me
 );

1443 
GLAPI
 
GLAPIENTRY
 
glP›Name
( );

1451 
	#GL_RESCALE_NORMAL
 0x803A

	)

1452 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1453 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1454 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1455 
	#GL_BGR
 0x80E0

	)

1456 
	#GL_BGRA
 0x80E1

	)

1457 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1458 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1459 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1460 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1461 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1462 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1463 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1464 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1465 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1466 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1467 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1468 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1469 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1470 
	#GL_SINGLE_COLOR
 0x81F9

	)

1471 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1472 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1473 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1474 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1475 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1476 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1477 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1478 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1479 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1480 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1481 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1482 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1483 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1484 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1485 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1486 
	#GL_TEXTURE_3D
 0x806F

	)

1487 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1488 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1489 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1490 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1491 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1493 
GLAPI
 
GLAPIENTRY
 
glDøwR™geEÀmíts
–
GLíum
 
mode
, 
GLuöt
 
°¨t
,

1494 
GLuöt
 
íd
, 
GLsizei
 
cou¡
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1496 
GLAPI
 
GLAPIENTRY
 
glTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1497 
GLöt
 
öã∫ÆF‹m©
,

1498 
GLsizei
 
width
, GLsizeò
height
,

1499 
GLsizei
 
dïth
, 
GLöt
 
b‹dî
,

1500 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1501 c⁄° 
GLvoid
 *
pixñs
 );

1503 
GLAPI
 
GLAPIENTRY
 
glTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1504 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1505 
GLöt
 
zoff£t
, 
GLsizei
 
width
,

1506 
GLsizei
 
height
, GLsizeò
dïth
,

1507 
GLíum
 
f‹m©
,

1508 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1510 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1511 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1512 
GLöt
 
zoff£t
, GLöà
x
,

1513 
GLöt
 
y
, 
GLsizei
 
width
,

1514 
GLsizei
 
height
 );

1516 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1517 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1518 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1519 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1526 
	#GL_CONSTANT_COLOR
 0x8001

	)

1527 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

1528 
	#GL_CONSTANT_ALPHA
 0x8003

	)

1529 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

1530 
	#GL_COLOR_TABLE
 0x80D0

	)

1531 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

1532 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

1533 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

1534 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

1535 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

1536 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

1537 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

1538 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

1539 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

1540 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

1541 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

1542 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

1543 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

1544 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

1545 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

1546 
	#GL_CONVOLUTION_1D
 0x8010

	)

1547 
	#GL_CONVOLUTION_2D
 0x8011

	)

1548 
	#GL_SEPARABLE_2D
 0x8012

	)

1549 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

1550 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

1551 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

1552 
	#GL_REDUCE
 0x8016

	)

1553 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

1554 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

1555 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

1556 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

1557 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

1558 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

1559 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

1560 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

1561 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

1562 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

1563 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

1564 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

1565 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

1566 
	#GL_CONSTANT_BORDER
 0x8151

	)

1567 
	#GL_REPLICATE_BORDER
 0x8153

	)

1568 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

1569 
	#GL_COLOR_MATRIX
 0x80B1

	)

1570 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

1571 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

1572 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

1573 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

1574 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

1575 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

1576 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

1577 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

1578 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

1579 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

1580 
	#GL_HISTOGRAM
 0x8024

	)

1581 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

1582 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

1583 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

1584 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

1585 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

1586 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

1587 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

1588 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

1589 
	#GL_HISTOGRAM_SINK
 0x802D

	)

1590 
	#GL_MINMAX
 0x802E

	)

1591 
	#GL_MINMAX_FORMAT
 0x802F

	)

1592 
	#GL_MINMAX_SINK
 0x8030

	)

1593 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

1594 
	#GL_BLEND_EQUATION
 0x8009

	)

1595 
	#GL_MIN
 0x8007

	)

1596 
	#GL_MAX
 0x8008

	)

1597 
	#GL_FUNC_ADD
 0x8006

	)

1598 
	#GL_FUNC_SUBTRACT
 0x800A

	)

1599 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

1600 
	#GL_BLEND_COLOR
 0x8005

	)

1603 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1604 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1605 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
 );

1607 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹SubTabÀ
–
GLíum
 
èrgë
,

1608 
GLsizei
 
°¨t
, GLsizeò
cou¡
,

1609 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1610 c⁄° 
GLvoid
 *
d©a
 );

1612 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîiv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1613 c⁄° 
GLöt
 *
∑øms
);

1615 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîfv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1616 c⁄° 
GLÊﬂt
 *
∑øms
);

1618 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹SubTabÀ
–
GLíum
 
èrgë
, 
GLsizei
 
°¨t
,

1619 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1621 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1622 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1624 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1625 
GLíum
 
ty≥
, 
GLvoid
 *
èbÀ
 );

1627 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1628 
GLÊﬂt
 *
∑øms
 );

1630 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1631 
GLöt
 *
∑øms
 );

1633 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄
–
GLíum
 
mode
 );

1635 
GLAPI
 
GLAPIENTRY
 
glBÀndCﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
,

1636 
GL˛ampf
 
blue
, GL˛amp‡
Æpha
 );

1638 
GLAPI
 
GLAPIENTRY
 
glHi°ogøm
–
GLíum
 
èrgë
, 
GLsizei
 
width
,

1639 
GLíum
 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
 );

1641 
GLAPI
 
GLAPIENTRY
 
glRe£tHi°ogøm
–
GLíum
 
èrgë
 );

1643 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogøm
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1644 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1645 
GLvoid
 *
vÆues
 );

1647 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1648 
GLÊﬂt
 *
∑øms
 );

1650 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1651 
GLöt
 *
∑øms
 );

1653 
GLAPI
 
GLAPIENTRY
 
glMömax
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1654 
GLboﬁón
 
sök
 );

1656 
GLAPI
 
GLAPIENTRY
 
glRe£tMömax
–
GLíum
 
èrgë
 );

1658 
GLAPI
 
GLAPIENTRY
 
glGëMömax
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1659 
GLíum
 
f‹m©
, GLíum 
ty≥s
,

1660 
GLvoid
 *
vÆues
 );

1662 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1663 
GLÊﬂt
 *
∑øms
 );

1665 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1666 
GLöt
 *
∑øms
 );

1668 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1669 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
,

1670 c⁄° 
GLvoid
 *
image
 );

1672 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1673 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1674 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
image
 );

1676 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1677 
GLÊﬂt
 
∑øms
 );

1679 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1680 c⁄° 
GLÊﬂt
 *
∑øms
 );

1682 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1683 
GLöt
 
∑øms
 );

1685 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1686 c⁄° 
GLöt
 *
∑øms
 );

1688 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1689 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1691 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1692 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
,

1693 
GLsizei
 
height
);

1695 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1696 
GLíum
 
ty≥
, 
GLvoid
 *
image
 );

1698 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1699 
GLÊﬂt
 *
∑øms
 );

1701 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1702 
GLöt
 *
∑øms
 );

1704 
GLAPI
 
GLAPIENTRY
 
glSï¨abÀFûãr2D
–
GLíum
 
èrgë
,

1705 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1706 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
 );

1708 
GLAPI
 
GLAPIENTRY
 
glGëSï¨abÀFûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1709 
GLíum
 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
 );

1719 
	#GL_TEXTURE0
 0x84C0

	)

1720 
	#GL_TEXTURE1
 0x84C1

	)

1721 
	#GL_TEXTURE2
 0x84C2

	)

1722 
	#GL_TEXTURE3
 0x84C3

	)

1723 
	#GL_TEXTURE4
 0x84C4

	)

1724 
	#GL_TEXTURE5
 0x84C5

	)

1725 
	#GL_TEXTURE6
 0x84C6

	)

1726 
	#GL_TEXTURE7
 0x84C7

	)

1727 
	#GL_TEXTURE8
 0x84C8

	)

1728 
	#GL_TEXTURE9
 0x84C9

	)

1729 
	#GL_TEXTURE10
 0x84CA

	)

1730 
	#GL_TEXTURE11
 0x84CB

	)

1731 
	#GL_TEXTURE12
 0x84CC

	)

1732 
	#GL_TEXTURE13
 0x84CD

	)

1733 
	#GL_TEXTURE14
 0x84CE

	)

1734 
	#GL_TEXTURE15
 0x84CF

	)

1735 
	#GL_TEXTURE16
 0x84D0

	)

1736 
	#GL_TEXTURE17
 0x84D1

	)

1737 
	#GL_TEXTURE18
 0x84D2

	)

1738 
	#GL_TEXTURE19
 0x84D3

	)

1739 
	#GL_TEXTURE20
 0x84D4

	)

1740 
	#GL_TEXTURE21
 0x84D5

	)

1741 
	#GL_TEXTURE22
 0x84D6

	)

1742 
	#GL_TEXTURE23
 0x84D7

	)

1743 
	#GL_TEXTURE24
 0x84D8

	)

1744 
	#GL_TEXTURE25
 0x84D9

	)

1745 
	#GL_TEXTURE26
 0x84DA

	)

1746 
	#GL_TEXTURE27
 0x84DB

	)

1747 
	#GL_TEXTURE28
 0x84DC

	)

1748 
	#GL_TEXTURE29
 0x84DD

	)

1749 
	#GL_TEXTURE30
 0x84DE

	)

1750 
	#GL_TEXTURE31
 0x84DF

	)

1751 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1752 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1753 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1755 
	#GL_NORMAL_MAP
 0x8511

	)

1756 
	#GL_REFLECTION_MAP
 0x8512

	)

1757 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1758 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1759 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1760 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1761 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1762 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1763 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1764 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1765 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1766 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1768 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1769 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1770 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1771 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1772 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1773 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1774 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1775 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1776 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1777 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1778 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1780 
	#GL_MULTISAMPLE
 0x809D

	)

1781 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1782 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1783 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1784 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1785 
	#GL_SAMPLES
 0x80A9

	)

1786 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1787 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1788 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1790 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1791 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1792 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1793 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1795 
	#GL_COMBINE
 0x8570

	)

1796 
	#GL_COMBINE_RGB
 0x8571

	)

1797 
	#GL_COMBINE_ALPHA
 0x8572

	)

1798 
	#GL_SOURCE0_RGB
 0x8580

	)

1799 
	#GL_SOURCE1_RGB
 0x8581

	)

1800 
	#GL_SOURCE2_RGB
 0x8582

	)

1801 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1802 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1803 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1804 
	#GL_OPERAND0_RGB
 0x8590

	)

1805 
	#GL_OPERAND1_RGB
 0x8591

	)

1806 
	#GL_OPERAND2_RGB
 0x8592

	)

1807 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1808 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1809 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1810 
	#GL_RGB_SCALE
 0x8573

	)

1811 
	#GL_ADD_SIGNED
 0x8574

	)

1812 
	#GL_INTERPOLATE
 0x8575

	)

1813 
	#GL_SUBTRACT
 0x84E7

	)

1814 
	#GL_CONSTANT
 0x8576

	)

1815 
	#GL_PRIMARY_COLOR
 0x8577

	)

1816 
	#GL_PREVIOUS
 0x8578

	)

1818 
	#GL_DOT3_RGB
 0x86AE

	)

1819 
	#GL_DOT3_RGBA
 0x86AF

	)

1821 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1823 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuª
–
GLíum
 
ãxtuª
 );

1825 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuª
–
GLíum
 
ãxtuª
 );

1827 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1829 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1831 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1833 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1835 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1837 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1839 
GLAPI
 
GLAPIENTRY
 
glGëCom¥es£dTexImage
–
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
 );

1841 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
 );

1843 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1845 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
 );

1847 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1849 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1i
–
GLíum
 
èrgë
, 
GLöt
 
s
 );

1851 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1853 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
 );

1855 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1857 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1859 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1861 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1863 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1865 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
 );

1867 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1869 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
 );

1871 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1873 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1875 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1877 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1879 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1881 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1883 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1885 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1887 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1889 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1891 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1893 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1895 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1897 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1899 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1901 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1903 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1906 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1908 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1910 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1912 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1914 
GLAPI
 
GLAPIENTRY
 
glSam∂eCovîage
–
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
 );

1917 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1918 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1919 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1920 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1921 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1922 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1923 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1924 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1925 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

1932 #i‚de‡
GL_ARB_mu…ôextuª


1933 
	#GL_ARB_mu…ôextuª
 1

	)

1935 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1936 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1937 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1938 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1939 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1940 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1941 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1942 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1943 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1944 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1945 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1946 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1947 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1948 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1949 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1950 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1951 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1952 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1953 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1954 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1955 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1956 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1957 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1958 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1959 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1960 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1961 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1962 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1963 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1964 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1965 
	#GL_TEXTURE30_ARB
 0x84DE

	)

1966 
	#GL_TEXTURE31_ARB
 0x84DF

	)

1967 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

1968 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

1969 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

1971 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuªARB
(
GLíum
 
ãxtuª
);

1972 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuªARB
(
GLíum
 
ãxtuª
);

1973 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

1974 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1975 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

1976 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1977 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
);

1978 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1979 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

1980 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1981 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

1982 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1983 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

1984 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1985 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

1986 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1987 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

1988 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1989 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

1990 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1991 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

1992 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1993 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

1994 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1995 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

1996 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1997 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

1998 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1999 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

2000 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2001 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

2002 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2003 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

2004 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2006 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2007 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2008 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

2009 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2010 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

2011 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2012 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

2013 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2014 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

2015 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2016 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

2017 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2018 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

2019 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2020 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

2021 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2022 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

2023 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2024 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

2025 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2026 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

2027 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2028 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

2029 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2030 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2031 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2032 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2033 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2034 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2035 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2036 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2037 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2038 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2039 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2049 #i‡
deföed
(
GL_GLEXT_LEGACY
)

2055 
	~<GL/gÀxt.h
>

2065 #i‚de‡
GL_MESA_∑cked_dïth_°ícû


2066 
	#GL_MESA_∑cked_dïth_°ícû
 1

	)

2068 
	#GL_DEPTH_STENCIL_MESA
 0x8750

	)

2069 
	#GL_UNSIGNED_INT_24_8_MESA
 0x8751

	)

2070 
	#GL_UNSIGNED_INT_8_24_REV_MESA
 0x8752

	)

2071 
	#GL_UNSIGNED_SHORT_15_1_MESA
 0x8753

	)

2072 
	#GL_UNSIGNED_SHORT_1_15_REV_MESA
 0x8754

	)

2077 #i‚de‡
GL_ATI_bÀnd_equ©i⁄_£∑øã


2078 
	#GL_ATI_bÀnd_equ©i⁄_£∑øã
 1

	)

2080 
	#GL_ALPHA_BLEND_EQUATION_ATI
 0x883D

	)

2082 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄Sï¨©eATI
–
GLíum
 
modeRGB
, GLíum 
modeA
 );

2083 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEATIPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeA
);

2089 #i‚de‡
GL_OES_EGL_image


2090 * 
	tGLeglImageOES
;

2093 #i‚de‡
GL_OES_EGL_image


2094 
	#GL_OES_EGL_image
 1

	)

2095 #ifde‡
GL_GLEXT_PROTOTYPES


2096 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2097 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2099 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2100 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2111 #ifde‡
__˝lu•lus


	@/usr/include/GL/glu.h

31 #i‚de‡
__glu_h__


32 
	#__glu_h__


	)

34 #i‡
deföed
(
USE_MGL_NAMESPACE
)

35 
	~"glu_m™gÀ.h
"

38 
	~<GL/gl.h
>

40 #i‚de‡
GLAPIENTRY


41 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)

42 
	#GLAPIENTRY
 
__°dˇŒ


	)

44 
	#GLAPIENTRY


	)

48 #i‚de‡
GLAPIENTRYP


49 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

52 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GLU32
)

53 #unde‡
GLAPI


54 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

55 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

57 #unde‡
GLAPI


58 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

59 #ñi‡!
deföed
(
GLAPI
)

61 
	#GLAPI
 

	)

64 #ifde‡
__˝lu•lus


71 
	#GLU_EXT_obje˘_•a˚_ãss
 1

	)

72 
	#GLU_EXT_nurbs_ãs£Œ©‹
 1

	)

75 
	#GLU_FALSE
 0

	)

76 
	#GLU_TRUE
 1

	)

79 
	#GLU_VERSION_1_1
 1

	)

80 
	#GLU_VERSION_1_2
 1

	)

81 
	#GLU_VERSION_1_3
 1

	)

84 
	#GLU_VERSION
 100800

	)

85 
	#GLU_EXTENSIONS
 100801

	)

88 
	#GLU_INVALID_ENUM
 100900

	)

89 
	#GLU_INVALID_VALUE
 100901

	)

90 
	#GLU_OUT_OF_MEMORY
 100902

	)

91 
	#GLU_INCOMPATIBLE_GL_VERSION
 100903

	)

92 
	#GLU_INVALID_OPERATION
 100904

	)

96 
	#GLU_OUTLINE_POLYGON
 100240

	)

97 
	#GLU_OUTLINE_PATCH
 100241

	)

100 
	#GLU_NURBS_ERROR
 100103

	)

101 
	#GLU_ERROR
 100103

	)

102 
	#GLU_NURBS_BEGIN
 100164

	)

103 
	#GLU_NURBS_BEGIN_EXT
 100164

	)

104 
	#GLU_NURBS_VERTEX
 100165

	)

105 
	#GLU_NURBS_VERTEX_EXT
 100165

	)

106 
	#GLU_NURBS_NORMAL
 100166

	)

107 
	#GLU_NURBS_NORMAL_EXT
 100166

	)

108 
	#GLU_NURBS_COLOR
 100167

	)

109 
	#GLU_NURBS_COLOR_EXT
 100167

	)

110 
	#GLU_NURBS_TEXTURE_COORD
 100168

	)

111 
	#GLU_NURBS_TEX_COORD_EXT
 100168

	)

112 
	#GLU_NURBS_END
 100169

	)

113 
	#GLU_NURBS_END_EXT
 100169

	)

114 
	#GLU_NURBS_BEGIN_DATA
 100170

	)

115 
	#GLU_NURBS_BEGIN_DATA_EXT
 100170

	)

116 
	#GLU_NURBS_VERTEX_DATA
 100171

	)

117 
	#GLU_NURBS_VERTEX_DATA_EXT
 100171

	)

118 
	#GLU_NURBS_NORMAL_DATA
 100172

	)

119 
	#GLU_NURBS_NORMAL_DATA_EXT
 100172

	)

120 
	#GLU_NURBS_COLOR_DATA
 100173

	)

121 
	#GLU_NURBS_COLOR_DATA_EXT
 100173

	)

122 
	#GLU_NURBS_TEXTURE_COORD_DATA
 100174

	)

123 
	#GLU_NURBS_TEX_COORD_DATA_EXT
 100174

	)

124 
	#GLU_NURBS_END_DATA
 100175

	)

125 
	#GLU_NURBS_END_DATA_EXT
 100175

	)

128 
	#GLU_NURBS_ERROR1
 100251

	)

129 
	#GLU_NURBS_ERROR2
 100252

	)

130 
	#GLU_NURBS_ERROR3
 100253

	)

131 
	#GLU_NURBS_ERROR4
 100254

	)

132 
	#GLU_NURBS_ERROR5
 100255

	)

133 
	#GLU_NURBS_ERROR6
 100256

	)

134 
	#GLU_NURBS_ERROR7
 100257

	)

135 
	#GLU_NURBS_ERROR8
 100258

	)

136 
	#GLU_NURBS_ERROR9
 100259

	)

137 
	#GLU_NURBS_ERROR10
 100260

	)

138 
	#GLU_NURBS_ERROR11
 100261

	)

139 
	#GLU_NURBS_ERROR12
 100262

	)

140 
	#GLU_NURBS_ERROR13
 100263

	)

141 
	#GLU_NURBS_ERROR14
 100264

	)

142 
	#GLU_NURBS_ERROR15
 100265

	)

143 
	#GLU_NURBS_ERROR16
 100266

	)

144 
	#GLU_NURBS_ERROR17
 100267

	)

145 
	#GLU_NURBS_ERROR18
 100268

	)

146 
	#GLU_NURBS_ERROR19
 100269

	)

147 
	#GLU_NURBS_ERROR20
 100270

	)

148 
	#GLU_NURBS_ERROR21
 100271

	)

149 
	#GLU_NURBS_ERROR22
 100272

	)

150 
	#GLU_NURBS_ERROR23
 100273

	)

151 
	#GLU_NURBS_ERROR24
 100274

	)

152 
	#GLU_NURBS_ERROR25
 100275

	)

153 
	#GLU_NURBS_ERROR26
 100276

	)

154 
	#GLU_NURBS_ERROR27
 100277

	)

155 
	#GLU_NURBS_ERROR28
 100278

	)

156 
	#GLU_NURBS_ERROR29
 100279

	)

157 
	#GLU_NURBS_ERROR30
 100280

	)

158 
	#GLU_NURBS_ERROR31
 100281

	)

159 
	#GLU_NURBS_ERROR32
 100282

	)

160 
	#GLU_NURBS_ERROR33
 100283

	)

161 
	#GLU_NURBS_ERROR34
 100284

	)

162 
	#GLU_NURBS_ERROR35
 100285

	)

163 
	#GLU_NURBS_ERROR36
 100286

	)

164 
	#GLU_NURBS_ERROR37
 100287

	)

167 
	#GLU_AUTO_LOAD_MATRIX
 100200

	)

168 
	#GLU_CULLING
 100201

	)

169 
	#GLU_SAMPLING_TOLERANCE
 100203

	)

170 
	#GLU_DISPLAY_MODE
 100204

	)

171 
	#GLU_PARAMETRIC_TOLERANCE
 100202

	)

172 
	#GLU_SAMPLING_METHOD
 100205

	)

173 
	#GLU_U_STEP
 100206

	)

174 
	#GLU_V_STEP
 100207

	)

175 
	#GLU_NURBS_MODE
 100160

	)

176 
	#GLU_NURBS_MODE_EXT
 100160

	)

177 
	#GLU_NURBS_TESSELLATOR
 100161

	)

178 
	#GLU_NURBS_TESSELLATOR_EXT
 100161

	)

179 
	#GLU_NURBS_RENDERER
 100162

	)

180 
	#GLU_NURBS_RENDERER_EXT
 100162

	)

183 
	#GLU_OBJECT_PARAMETRIC_ERROR
 100208

	)

184 
	#GLU_OBJECT_PARAMETRIC_ERROR_EXT
 100208

	)

185 
	#GLU_OBJECT_PATH_LENGTH
 100209

	)

186 
	#GLU_OBJECT_PATH_LENGTH_EXT
 100209

	)

187 
	#GLU_PATH_LENGTH
 100215

	)

188 
	#GLU_PARAMETRIC_ERROR
 100216

	)

189 
	#GLU_DOMAIN_DISTANCE
 100217

	)

192 
	#GLU_MAP1_TRIM_2
 100210

	)

193 
	#GLU_MAP1_TRIM_3
 100211

	)

196 
	#GLU_POINT
 100010

	)

197 
	#GLU_LINE
 100011

	)

198 
	#GLU_FILL
 100012

	)

199 
	#GLU_SILHOUETTE
 100013

	)

205 
	#GLU_SMOOTH
 100000

	)

206 
	#GLU_FLAT
 100001

	)

207 
	#GLU_NONE
 100002

	)

210 
	#GLU_OUTSIDE
 100020

	)

211 
	#GLU_INSIDE
 100021

	)

214 
	#GLU_TESS_BEGIN
 100100

	)

215 
	#GLU_BEGIN
 100100

	)

216 
	#GLU_TESS_VERTEX
 100101

	)

217 
	#GLU_VERTEX
 100101

	)

218 
	#GLU_TESS_END
 100102

	)

219 
	#GLU_END
 100102

	)

220 
	#GLU_TESS_ERROR
 100103

	)

221 
	#GLU_TESS_EDGE_FLAG
 100104

	)

222 
	#GLU_EDGE_FLAG
 100104

	)

223 
	#GLU_TESS_COMBINE
 100105

	)

224 
	#GLU_TESS_BEGIN_DATA
 100106

	)

225 
	#GLU_TESS_VERTEX_DATA
 100107

	)

226 
	#GLU_TESS_END_DATA
 100108

	)

227 
	#GLU_TESS_ERROR_DATA
 100109

	)

228 
	#GLU_TESS_EDGE_FLAG_DATA
 100110

	)

229 
	#GLU_TESS_COMBINE_DATA
 100111

	)

232 
	#GLU_CW
 100120

	)

233 
	#GLU_CCW
 100121

	)

234 
	#GLU_INTERIOR
 100122

	)

235 
	#GLU_EXTERIOR
 100123

	)

236 
	#GLU_UNKNOWN
 100124

	)

239 
	#GLU_TESS_WINDING_RULE
 100140

	)

240 
	#GLU_TESS_BOUNDARY_ONLY
 100141

	)

241 
	#GLU_TESS_TOLERANCE
 100142

	)

244 
	#GLU_TESS_ERROR1
 100151

	)

245 
	#GLU_TESS_ERROR2
 100152

	)

246 
	#GLU_TESS_ERROR3
 100153

	)

247 
	#GLU_TESS_ERROR4
 100154

	)

248 
	#GLU_TESS_ERROR5
 100155

	)

249 
	#GLU_TESS_ERROR6
 100156

	)

250 
	#GLU_TESS_ERROR7
 100157

	)

251 
	#GLU_TESS_ERROR8
 100158

	)

252 
	#GLU_TESS_MISSING_BEGIN_POLYGON
 100151

	)

253 
	#GLU_TESS_MISSING_BEGIN_CONTOUR
 100152

	)

254 
	#GLU_TESS_MISSING_END_POLYGON
 100153

	)

255 
	#GLU_TESS_MISSING_END_CONTOUR
 100154

	)

256 
	#GLU_TESS_COORD_TOO_LARGE
 100155

	)

257 
	#GLU_TESS_NEED_COMBINE_CALLBACK
 100156

	)

260 
	#GLU_TESS_WINDING_ODD
 100130

	)

261 
	#GLU_TESS_WINDING_NONZERO
 100131

	)

262 
	#GLU_TESS_WINDING_POSITIVE
 100132

	)

263 
	#GLU_TESS_WINDING_NEGATIVE
 100133

	)

264 
	#GLU_TESS_WINDING_ABS_GEQ_TWO
 100134

	)

269 #ifde‡
__˝lu•lus


270 
˛ass
 
GLUnurbs
;

271 
˛ass
 
GLUquadric
;

272 
˛ass
 
GLUãs£œt‹
;

274 
GLUnurbs
 
	tGLUnurbs
;

275 
GLUquadric
 
	tGLUquadric
;

276 
GLUãs£œt‹
 
	tGLUãs£œt‹
;

279 
GLUnurbs
 
	tGLUnurbsObj
;

280 
GLUquadric
 
	tGLUquadricObj
;

281 
GLUãs£œt‹
 
	tGLUãs£œt‹Obj
;

282 
GLUãs£œt‹
 
	tGLUåünguœt‹Obj
;

284 
	#GLU_TESS_MAX_COORD
 1.0e150

	)

287 (
GLAPIENTRYP
 
	t_GLUfun˝å
)();

289 
GLAPI
 
GLAPIENTRY
 
gluBegöCurve
 (
GLUnurbs
* 
nurb
);

290 
GLAPI
 
GLAPIENTRY
 
gluBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

291 
GLAPI
 
GLAPIENTRY
 
gluBegöSurÁ˚
 (
GLUnurbs
* 
nurb
);

292 
GLAPI
 
GLAPIENTRY
 
gluBegöTrim
 (
GLUnurbs
* 
nurb
);

293 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

294 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

295 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

296 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

297 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

298 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

299 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
gluCheckExãnsi⁄
 (c⁄° 
GLubyã
 *
extName
, c⁄° GLubyã *
extSåög
);

300 
GLAPI
 
GLAPIENTRY
 
gluCylödî
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ba£
, GLdoubÀ 
t›
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

301 
GLAPI
 
GLAPIENTRY
 
gluDñëeNurbsRídîî
 (
GLUnurbs
* 
nurb
);

302 
GLAPI
 
GLAPIENTRY
 
gluDñëeQuadric
 (
GLUquadric
* 
quad
);

303 
GLAPI
 
GLAPIENTRY
 
gluDñëeTess
 (
GLUãs£œt‹
* 
ãss
);

304 
GLAPI
 
GLAPIENTRY
 
gluDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
);

305 
GLAPI
 
GLAPIENTRY
 
gluEndCurve
 (
GLUnurbs
* 
nurb
);

306 
GLAPI
 
GLAPIENTRY
 
gluEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

307 
GLAPI
 
GLAPIENTRY
 
gluEndSurÁ˚
 (
GLUnurbs
* 
nurb
);

308 
GLAPI
 
GLAPIENTRY
 
gluEndTrim
 (
GLUnurbs
* 
nurb
);

309 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluEº‹Såög
 (
GLíum
 
îr‹
);

310 
GLAPI
 
GLAPIENTRY
 
gluGëNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
* 
d©a
);

311 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluGëSåög
 (
GLíum
 
«me
);

312 
GLAPI
 
GLAPIENTRY
 
gluGëTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
* 
d©a
);

313 
GLAPI
 
GLAPIENTRY
 
gluLﬂdSam∂ögM©ri˚s
 (
GLUnurbs
* 
nurb
, c⁄° 
GLÊﬂt
 *
modñ
, c⁄° GLÊﬂà*
≥r•e˘ive
, c⁄° 
GLöt
 *
võw
);

314 
GLAPI
 
GLAPIENTRY
 
gluLookAt
 (
GLdoubÀ
 
eyeX
, GLdoubÀ 
eyeY
, GLdoubÀ 
eyeZ
, GLdoubÀ 
˚¡îX
, GLdoubÀ 
˚¡îY
, GLdoubÀ 
˚¡îZ
, GLdoubÀ 
upX
, GLdoubÀ 
upY
, GLdoubÀ 
upZ
);

315 
GLAPI
 
GLUnurbs
* 
GLAPIENTRY
 
gluNewNurbsRídîî
 ();

316 
GLAPI
 
GLUquadric
* 
GLAPIENTRY
 
gluNewQuadric
 ();

317 
GLAPI
 
GLUãs£œt‹
* 
GLAPIENTRY
 
gluNewTess
 ();

318 
GLAPI
 
GLAPIENTRY
 
gluNextC⁄tour
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
ty≥
);

319 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlback
 (
GLUnurbs
* 
nurb
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

320 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©a
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

321 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©aEXT
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

322 
GLAPI
 
GLAPIENTRY
 
gluNurbsCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
knŸCou¡
, 
GLÊﬂt
 *
knŸs
, GLöà
°ride
, GLÊﬂà*
c⁄åﬁ
, GLöà
‹dî
, 
GLíum
 
ty≥
);

323 
GLAPI
 
GLAPIENTRY
 
gluNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
 
vÆue
);

324 
GLAPI
 
GLAPIENTRY
 
gluNurbsSurÁ˚
 (
GLUnurbs
* 
nurb
, 
GLöt
 
sKnŸCou¡
, 
GLÊﬂt
* 
sKnŸs
, GLöà
tKnŸCou¡
, GLÊﬂt* 
tKnŸs
, GLöà
sSåide
, GLöà
tSåide
, GLÊﬂt* 
c⁄åﬁ
, GLöà
sOrdî
, GLöà
tOrdî
, 
GLíum
 
ty≥
);

325 
GLAPI
 
GLAPIENTRY
 
gluOπho2D
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
);

326 
GLAPI
 
GLAPIENTRY
 
gluP¨tülDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
, GLdoubÀ 
°¨t
, GLdoubÀ 
swìp
);

327 
GLAPI
 
GLAPIENTRY
 
gluPî•e˘ive
 (
GLdoubÀ
 
fovy
, GLdoubÀ 
a•e˘
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

328 
GLAPI
 
GLAPIENTRY
 
gluPickM©rix
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
dñX
, GLdoubÀ 
dñY
, 
GLöt
 *
võwp‹t
);

329 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluProje˘
 (
GLdoubÀ
 
objX
, GLdoubÀ 
objY
, GLdoubÀ 
objZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
wöX
, GLdoubÀ* 
wöY
, GLdoubÀ* 
wöZ
);

330 
GLAPI
 
GLAPIENTRY
 
gluPwlCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
cou¡
, 
GLÊﬂt
* 
d©a
, GLöà
°ride
, 
GLíum
 
ty≥
);

331 
GLAPI
 
GLAPIENTRY
 
gluQuadricCÆlback
 (
GLUquadric
* 
quad
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

332 
GLAPI
 
GLAPIENTRY
 
gluQuadricDøwStyÀ
 (
GLUquadric
* 
quad
, 
GLíum
 
døw
);

333 
GLAPI
 
GLAPIENTRY
 
gluQuadricN‹mÆs
 (
GLUquadric
* 
quad
, 
GLíum
 
n‹mÆ
);

334 
GLAPI
 
GLAPIENTRY
 
gluQuadricOrõ¡©i⁄
 (
GLUquadric
* 
quad
, 
GLíum
 
‹õ¡©i⁄
);

335 
GLAPI
 
GLAPIENTRY
 
gluQuadricTextuª
 (
GLUquadric
* 
quad
, 
GLboﬁón
 
ãxtuª
);

336 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluSˇÀImage
 (
GLíum
 
f‹m©
, 
GLsizei
 
wIn
, GLsizeò
hIn
, GLíum 
ty≥In
, c⁄° *
d©aIn
, GLsizeò
wOut
, GLsizeò
hOut
, GLíum 
ty≥Out
, 
GLvoid
* 
d©aOut
);

337 
GLAPI
 
GLAPIENTRY
 
gluSphîe
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

338 
GLAPI
 
GLAPIENTRY
 
gluTessBegöC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

339 
GLAPI
 
GLAPIENTRY
 
gluTessBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
, 
GLvoid
* 
d©a
);

340 
GLAPI
 
GLAPIENTRY
 
gluTessCÆlback
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

341 
GLAPI
 
GLAPIENTRY
 
gluTessEndC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

342 
GLAPI
 
GLAPIENTRY
 
gluTessEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

343 
GLAPI
 
GLAPIENTRY
 
gluTessN‹mÆ
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 
vÆueX
, GLdoubÀ 
vÆueY
, GLdoubÀ 
vÆueZ
);

344 
GLAPI
 
GLAPIENTRY
 
gluTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
 
d©a
);

345 
GLAPI
 
GLAPIENTRY
 
gluTessVîãx
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 *
loˇti⁄
, 
GLvoid
* 
d©a
);

346 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
);

347 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘4
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, GLdoubÀ 
˛ùW
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ 
√¨VÆ
, GLdoubÀ 
ÁrVÆ
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
, GLdoubÀ* 
objW
);

349 #ifde‡
__˝lu•lus


	@/usr/include/GL/glut.h

1 #i‚de‡ 
__GLUT_H__


2 
	#__GLUT_H__


	)

17 
	~"‰ìglut_°d.h
"

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@HBuilding.h

13 #i‚de‡
__HBUILDING_H_


14 
	#__HBUILDING_H_


	)

15 
	~<GL/gl.h
>

17 ˛as†
	cHBuûdög
{

18 
	m¥iv©e
:

19 
GLÊﬂt
 
x
, 
	my
, 
	mz
;

20 
GLÊﬂt
 
	mu
, 
	mv
;

21 
	mpublic
:

33 
	$HBuûdög
(){

35 
	$HBuûdög
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
){

36 
this
->
x
 = x;

37 
this
->
y
 = y;

38 
this
->
z
 = z;

39 
	}
}

40 
	$HBuûdög
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
u
, GLÊﬂà
v
){

41 
this
->
x
 = x;

42 
this
->
y
 = y;

43 
this
->
z
 = z;

44 
this
->
u
 = u;

45 
this
->
v
 = v;

46 
	}
}

48 
	$£tX
(
GLÊﬂt
 
x
){

49 
this
->
x
 = x;

50 
	}
}

51 
	$£tY
(
GLÊﬂt
 
y
){

52 
this
->
y
 = y;

53 
	}
}

54 
	$£tZ
(
GLÊﬂt
 
z
){

55 
this
->
z
 = z;

56 
	}
}

57 
	$£tU
(
GLÊﬂt
 
u
){

58 
this
->
u
 = u;

59 
	}
}

60 
	$£tV
(
GLÊﬂt
 
v
){

61 
this
->
v
 = v;

62 
	}
}

74 
	$døwHBuûdög
(){

75 
	`glBegö
(
GL_QUADS
);

78 
	`glTexCo‹d2f
(0.0f, 
z
);

79 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

80 
	`glTexCo‹d2f
(0.0f, 0.0f);

81 
	`glVîãx3f
(0.0f, 
y
, 
z
);

82 
	`glTexCo‹d2f
(
x
, 0.0f);

83 
	`glVîãx3f
(
x
, 
y
, 
z
);

84 
	`glTexCo‹d2f
(
x
, 
z
);

85 
	`glVîãx3f
(
x
, 
y
, 0.0f);

88 
	`glTexCo‹d2f
(0.0f, 
z
);

89 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

90 
	`glTexCo‹d2f
(0.0f, 0.0f);

91 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

92 
	`glTexCo‹d2f
(
x
, 0.0f);

93 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

94 
	`glTexCo‹d2f
(
x
, 
z
);

95 
	`glVîãx3f
(
x
, 0.0f, 
z
);

98 
	`glTexCo‹d2f
(0.0f, 
z
);

99 
	`glVîãx3f
(0.0f, 
y
, 
z
);

100 
	`glTexCo‹d2f
(0.0f, 0.0f);

101 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

102 
	`glTexCo‹d2f
(
x
, 0.0f);

103 
	`glVîãx3f
(
x
, 0.0f, 
z
);

104 
	`glTexCo‹d2f
(
x
, 
z
);

105 
	`glVîãx3f
(
x
, 
y
, 
z
);

108 
	`glTexCo‹d2f
(0.0f, 
z
);

109 
	`glVîãx3f
(
x
, 
y
, 0.0f);

110 
	`glTexCo‹d2f
(0.0f, 0.0f);

111 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

112 
	`glTexCo‹d2f
(
x
, 0.0f);

113 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

114 
	`glTexCo‹d2f
(
x
, 
z
);

115 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

118 
	`glTexCo‹d2f
(0.0f, 
z
);

119 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

120 
	`glTexCo‹d2f
(0.0f, 0.0f);

121 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

122 
	`glTexCo‹d2f
(
x
, 0.0f);

123 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

124 
	`glTexCo‹d2f
(
x
, 
z
);

125 
	`glVîãx3f
(0.0f, 
y
, 
z
);

128 
	`glTexCo‹d2f
(0.0f, 
z
);

129 
	`glVîãx3f
(
x
, 
y
, 
z
);

130 
	`glTexCo‹d2f
(0.0f, 0.0f);

131 
	`glVîãx3f
(
x
, 0.0f, 
z
);

132 
	`glTexCo‹d2f
(
x
, 0.0f);

133 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

134 
	`glTexCo‹d2f
(
x
, 
z
);

135 
	`glVîãx3f
(
x
, 
y
, 0.0f);

136 
	`glEnd
();

137 
	}
}

140 
	$døwHBuûdög
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
){

141 
	`glBegö
(
GL_QUADS
);

144 
	`glTexCo‹d2f
(0.0f, 
z
);

145 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

146 
	`glTexCo‹d2f
(0.0f, 0.0f);

147 
	`glVîãx3f
(0.0f, 
y
, 
z
);

148 
	`glTexCo‹d2f
(
x
, 0.0f);

149 
	`glVîãx3f
(
x
, 
y
, 
z
);

150 
	`glTexCo‹d2f
(
x
, 
z
);

151 
	`glVîãx3f
(
x
, 
y
, 0.0f);

154 
	`glTexCo‹d2f
(0.0f, 
z
);

155 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

156 
	`glTexCo‹d2f
(0.0f, 0.0f);

157 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

158 
	`glTexCo‹d2f
(
x
, 0.0f);

159 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

160 
	`glTexCo‹d2f
(
x
, 
z
);

161 
	`glVîãx3f
(
x
, 0.0f, 
z
);

164 
	`glTexCo‹d2f
(0.0f, 
z
);

165 
	`glVîãx3f
(0.0f, 
y
, 
z
);

166 
	`glTexCo‹d2f
(0.0f, 0.0f);

167 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

168 
	`glTexCo‹d2f
(
x
, 0.0f);

169 
	`glVîãx3f
(
x
, 0.0f, 
z
);

170 
	`glTexCo‹d2f
(
x
, 
z
);

171 
	`glVîãx3f
(
x
, 
y
, 
z
);

174 
	`glTexCo‹d2f
(0.0f, 
z
);

175 
	`glVîãx3f
(
x
, 
y
, 0.0f);

176 
	`glTexCo‹d2f
(0.0f, 0.0f);

177 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

178 
	`glTexCo‹d2f
(
x
, 0.0f);

179 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

180 
	`glTexCo‹d2f
(
x
, 
z
);

181 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

184 
	`glTexCo‹d2f
(0.0f, 
z
);

185 
	`glVîãx3f
(0.0f, 
y
, 0.0f);

186 
	`glTexCo‹d2f
(0.0f, 0.0f);

187 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

188 
	`glTexCo‹d2f
(
x
, 0.0f);

189 
	`glVîãx3f
(0.0f, 0.0f, 
z
);

190 
	`glTexCo‹d2f
(
x
, 
z
);

191 
	`glVîãx3f
(0.0f, 
y
, 
z
);

194 
	`glTexCo‹d2f
(0.0f, 
z
);

195 
	`glVîãx3f
(
x
, 
y
, 
z
);

196 
	`glTexCo‹d2f
(0.0f, 0.0f);

197 
	`glVîãx3f
(
x
, 0.0f, 
z
);

198 
	`glTexCo‹d2f
(
x
, 0.0f);

199 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

200 
	`glTexCo‹d2f
(
x
, 
z
);

201 
	`glVîãx3f
(
x
, 
y
, 0.0f);

202 
	`glEnd
();

203 
	}
}

	@Objects.h

12 #i‚de‡
__OBJECTS_H_


13 
	#__OBJECTS_H_


	)

15 
	~"Re˘™gÀ.h
"

16 
	~"HBuûdög.h
"

18 
GLuöt
 
	grﬂd
;

19 
GLuöt
 
	ggøss
;

20 
GLuöt
 
	gbuûdög1
;

21 
GLuöt
 
	gbuûdög2
;

22 
GLuöt
 
	gchûdªn
;

23 
GLuöt
 
	gcomm⁄_box
;

24 
GLuöt
 
	gb¨_box
;

26 
GLÊﬂt
 
	gwidth
, 
	gheight
, 
	gdïth
;

28 
GLvoid
 
	$BuûdLi°
() {

29 
Re˘™gÀ
 
ª˘™gÀ
;

30 
HBuûdög
 
hBuûdög
;

33 
rﬂd
 = 
	`glGíLi°s
(6);

34 
	`glNewLi°
(
rﬂd
, 
GL_COMPILE
);

35 
width
 = 4.0f, 
dïth
 = 4.0f;

37 
ª˘™gÀ
.
	`døwHRe˘™gÀ
(
width
, 0.0f, 
dïth
);

38 
	`glEndLi°
();

41 
gøss
 = 
rﬂd
 + 1;

42 
	`glNewLi°
(
gøss
, 
GL_COMPILE
);

43 
width
 = 4.0f, 
dïth
 = 4.0f;

44 
ª˘™gÀ
.
	`døwHRe˘™gÀ
(
width
, 0.0f, 
dïth
);

45 
	`glEndLi°
();

48 
buûdög1
 = 
rﬂd
 + 2;

49 
width
 = 1.0f, 
height
 = 5.0f, 
dïth
 = 3.0f;

50 
	`glNewLi°
(
buûdög1
, 
GL_COMPILE
);

51 
hBuûdög
.
	`døwHBuûdög
(
width
, 
height
, 
dïth
);

52 
	`glEndLi°
();

55 
buûdög2
 = 
rﬂd
 + 3;

56 
width
 = 1.0f, 
height
 = 3.0f, 
dïth
 = 3.0f;

57 
	`glNewLi°
(
buûdög2
, 
GL_COMPILE
);

58 
hBuûdög
.
	`døwHBuûdög
(
width
, 
height
, 
dïth
);

59 
	`glEndLi°
();

62 
chûdªn
 = 
rﬂd
 + 4;

63 
width
 = 1.0f;

64 
height
 = 1.0f;

65 
	`glNewLi°
(
chûdªn
, 
GL_COMPILE
);

66 
	`glBegö
(
GL_QUADS
);

67 
	`glTexCo‹d2f
(0.0f, 1.0f);

68 
	`glVîãx3f
(0.0f, 
height
, 0.0f);

69 
	`glTexCo‹d2f
(0.0f, 0.0f);

70 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

71 
	`glTexCo‹d2f
(1.0f, 0.0f);

72 
	`glVîãx3f
(1.0f, 0.0f, 0.0f);

73 
	`glTexCo‹d2f
(1.0f, 1.0f);

74 
	`glVîãx3f
(1.0f, 
height
, 0.0f);

75 
	`glEnd
();

76 
	`glEndLi°
();

79 
comm⁄_box
 = 
rﬂd
 + 5;

80 
width
 = 0.5f, 
height
 = 0.5f, 
dïth
 = 0.5f;

81 
	`glNewLi°
(
comm⁄_box
, 
GL_COMPILE
);

82 
hBuûdög
.
	`døwHBuûdög
(
width
, 
height
, 
dïth
);

83 
	`glEndLi°
();

97 
	}
}

	@Rectangle.h

13 #i‚de‡
__RECTANGLE_H_


14 
	#__RECTANGLE_H_


	)

15 
	~<GL/gl.h
>

17 ˛as†
	cRe˘™gÀ
{

18 
	m¥iv©e
:

19 
GLÊﬂt
 
x
, 
	my
, 
	mz
;

20 
GLÊﬂt
 
	mu
, 
	mv
;

21 
	mpublic
:

33 
	$Re˘™gÀ
(){

35 
	$Re˘™gÀ
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
){

36 
this
->
x
 = x;

37 
this
->
y
 = y;

38 
this
->
z
 = z;

39 
this
->
u
 = 1.0f;

40 
this
->
v
 = 1.0f;

41 
	}
}

42 
	$Re˘™gÀ
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
u
, GLÊﬂà
v
){

43 
this
->
x
 = x;

44 
this
->
y
 = y;

45 
this
->
z
 = z;

46 
this
->
u
 = u;

47 
this
->
v
 = v;

48 
	}
}

50 
	$£tX
(
GLÊﬂt
 
x
){

51 
this
->
x
 = x;

52 
	}
}

53 
	$£tY
(
GLÊﬂt
 
y
){

54 
this
->
y
 = y;

55 
	}
}

56 
	$£tZ
(
GLÊﬂt
 
z
){

57 
this
->
z
 = z;

58 
	}
}

59 
	$£tU
(
GLÊﬂt
 
u
){

60 
this
->
u
 = u;

61 
	}
}

62 
	$£tV
(
GLÊﬂt
 
v
){

63 
this
->
v
 = v;

64 
	}
}

76 
	$døwHRe˘™gÀ
(){

78 
	`glBegö
(
GL_QUADS
);

81 
	`glTexCo‹d2f
(0.0f, 
v
);

82 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

83 
	`glTexCo‹d2f
(0.0f, 0.0f);

84 
	`glVîãx3f
(0.0f, 
y
, 
z
);

85 
	`glTexCo‹d2f
(
u
, 0.0f);

86 
	`glVîãx3f
(
x
, 
y
, 
z
);

87 
	`glTexCo‹d2f
(
u
, 
v
);

88 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

89 
	`glEnd
();

90 
	}
}

92 
	$døwHRe˘™gÀ
(
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
u
 = 1.0f, GLÊﬂà
v
 = 1.0f){

94 
	`glBegö
(
GL_QUADS
);

97 
	`glTexCo‹d2f
(0.0f, 
v
);

98 
	`glVîãx3f
(0.0f, 0.0f, 0.0f);

99 
	`glTexCo‹d2f
(0.0f, 0.0f);

100 
	`glVîãx3f
(0.0f, 
y
, 
z
);

101 
	`glTexCo‹d2f
(
u
, 0.0f);

102 
	`glVîãx3f
(
x
, 
y
, 
z
);

103 
	`glTexCo‹d2f
(
u
, 
v
);

104 
	`glVîãx3f
(
x
, 0.0f, 0.0f);

105 
	`glEnd
();

106 
	}
}

	@config.h

8 #i‚de‡
__CONFIG_H_


9 
	#__CONFIG_H_


	)

11 
	~<°rög
>

12 
	~<m≠
>

13 
usög
 
«me•a˚
 
	g°d
;

15 
	#COMMENT_CHAR
 '#'

	)

17 
boﬁ
 
RódC⁄fig
(c⁄° 
°rög
 & 
fûíame
, 
m≠
<°rög, såög> & 
m
);

18 
PrötC⁄fig
(c⁄° 
m≠
<
°rög
, såög> & 
m
);

	@image.h

11 ˛as†
	cImage
 {

14 #i‚de‡
__IMAGE_H_


15 
	#__IMAGE_H_


	)

18 
	~<°dio.h
>

19 
	~<°rög.h
>

21 
	m¥iv©e
:

22 
sizeX
;

23 
	msizeY
;

24 
	msize
;

25 *
	md©a
;

27 
	mpublic
:

29 
	$Image
(){

30 
this
->
sizeX
 = 1L;

31 
this
->
sizeY
 = 1L;

32 
this
->
size
 = 
sizeX
*
sizeY
*3;

33 
this
->
d©a
 = 
NULL
;

36 
	$Image
(
sizeX
, 
sizeY
){

37 
this
->
sizeX
 = sizeX;

38 
this
->
sizeY
 = sizeY;

39 
this
->
size
 = 
sizeX
*
sizeY
*3;

40 
this
->
d©a
 = 
NULL
;

41 
	}
}

43 
	$Image
(
sizeX
, 
sizeY
, * 
d©a
){

44 
this
->
sizeX
 = sizeX;

45 
this
->
sizeY
 = sizeY;

46 
this
->
size
 = 
sizeX
*
sizeY
*3;

47 
this
->
d©a
 = data;

48 
	}
}

50 ~
	$Image
(){

52 
dñëe
[] 
this
->
d©a
;

53 
this
->
d©a
 = 
NULL
;

54 
	}
}

56 
	$ˇlcuœãSize
(){

57 
this
->
size
 = 
sizeX
*
sizeY
*3;

58 
	}
}

60 
	$£tSizeX
(
sizeX
){

61 
this
->
sizeX
 = sizeX;

62 
	`ˇlcuœãSize
();

63 
	}
}

65 
	$£tSizeY
(
sizeY
){

66 
this
->
sizeY
 = sizeY;

67 
	`ˇlcuœãSize
();

68 
	}
}

70 
	$£tD©a
(*
d©a
){

71 
this
->
d©a
 = data;

72 
	}
}

74 
	$gëSizeX
(){

75  
this
->
sizeX
;

76 
	}
}

78 
	$gëSizeY
(){

79  
this
->
sizeY
;

80 
	}
}

82 * 
	$gëD©a
(){

83  
this
->
d©a
;

84 
	}
}

99 
	$imageLﬂd
(*
fûíame
) {

100 
FILE
 *
fûe
;

101 
i
;

102 
ãmp
;

103 
∂™es
;

104 
bµ
;

107 i‡((
fûe
 = 
	`f›í
(
fûíame
, "rb"))==
NULL
) {

113 
	`f£ek
(
fûe
, 18, 
SEEK_CUR
);

116 i‡((
i
 = 
	`‰ód
(&
sizeX
, 4, 1, 
fûe
)) != 1) {

123 i‡((
i
 = 
	`‰ód
(&
sizeY
, 4, 1, 
fûe
)) != 1) {

130 
	`ˇlcuœãSize
();

133 i‡((
	`‰ód
(&
∂™es
, 2, 1, 
fûe
)) != 1) {

137 i‡(
∂™es
 != 1) {

143 i‡((
i
 = 
	`‰ód
(&
bµ
, 2, 1, 
fûe
)) != 1) {

147 i‡(
bµ
 != 24) {

153 
	`f£ek
(
fûe
, 24, 
SEEK_CUR
);

156 
this
->
d©a
 = 
√w
 [this->
size
];

157 i‡(
this
->
d©a
 =
NULL
) {

162 i‡((
i
 = 
	`‰ód
(
this
->
d©a
,Åhis->
size
, 1, 
fûe
)) != 1) {

167 
i
=0; i<(
this
->
size
); i+=3) {

168 
ãmp
 = 
this
->
d©a
[
i
];

169 
this
->
d©a
[
i
] =Åhis->data[i+2];

170 
this
->
d©a
[
i
+2] = 
ãmp
;

175 
	}
}

	@tcp_server.h

1 
	~<sys/ty≥s.h
>

2 
	~<sys/sockë.h
>

3 
	~<°dio.h
>

4 
	~<√töë/ö.h
>

5 
	~<¨∑/öë.h
>

6 
	~<uni°d.h
>

7 
	~<°rög.h
>

8 
	~<°dlib.h
>

9 
	~<f˙é.h
>

10 
	~<sys/shm.h
>

12 
	#MYPORT
 8887

	)

13 
	#QUEUE
 20

	)

15 
boﬁ
 
	$t˝_£rvî_öô
(&
£rvî_sockfd
, &
c⁄n
) {

17 
£rvî_sockfd
 = 
	`sockë
(
AF_INET
,
SOCK_STREAM
, 0);

20 
sockaddr_ö
 
£rvî_sockaddr
;

21 
£rvî_sockaddr
.
sö_Ámûy
 = 
AF_INET
;

22 
£rvî_sockaddr
.
sö_p‹t
 = 
	`ht⁄s
(
MYPORT
);

23 
£rvî_sockaddr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

26 if(
	`böd
(
£rvî_sockfd
,(
sockaddr
 *)&
£rvî_sockaddr
,(server_sockaddr))==-1) {

27 
	`≥º‹
("bind");

32 if(
	`li°í
(
£rvî_sockfd
,
QUEUE
) == -1) {

33 
	`≥º‹
("listen");

38 
sockaddr_ö
 
˛õ¡_addr
;

39 
sockÀn_t
 
Àngth
 = (
˛õ¡_addr
);

42 
c⁄n
 = 
	`ac˚±
(
£rvî_sockfd
, (
sockaddr
*)&
˛õ¡_addr
, &
Àngth
);

43 if(
c⁄n
<0) {

44 
	`≥º‹
("connect");

49 
	}
}

51 
boﬁ
 
	$t˝_£rvî_˛o£
(&
£rvî_sockfd
, &
c⁄n
) {

52 
	`˛o£
(
c⁄n
);

53 
	`˛o£
(
£rvî_sockfd
);

55 
	}
}

	@texture.h

13 #i‚de‡
__TEXTURE_H_


14 
	#__TEXTURE_H_


	)

17 
	~<GL/gl.h
>

18 
	~<GL/glu.h
>

19 
	~<ve˘‹
>

21 ˛as†
	cTextuª
 {

22 
	m¥iv©e
 :

23 
GLuöt
 *
ãxtuªs
;

24 
	mÀngth
;

25 
	mmax_Àngth
;

26 
	mpublic
 :

28 
	$Textuª
(
max_Àngth
){

29 
this
->
ãxtuªs
 = 
√w
 
GLuöt
[
max_Àngth
];

30 
this
->
Àngth
 = 0;

31 
this
->
max_Àngth
 = max_length;

34 ~
	$Textuª
(){

35 
dñëe
[] 
ãxtuªs
;

36 
ãxtuªs
 = 
NULL
;

37 
	}
}

51 
	$lﬂdGLTextuª
(
Image
 *
image
){

52 if((
this
->
Àngth
Ë>—his->
max_Àngth
)){

53 
	`¥ötf
("length out ofÑange");

55 
	`glGíTextuªs
(1, &
ãxtuªs
[
this
->
Àngth
]);

56 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuªs
[
this
->
Àngth
]);

59 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
,
GL_TEXTURE_MAG_FILTER
,
GL_NEAREST
);

60 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
,
GL_TEXTURE_MIN_FILTER
,
GL_NEAREST
);

61 
	`gluBuûd2DMùm≠s
(
GL_TEXTURE_2D
, 3, 
image
->
	`gëSizeX
(), image->
	`gëSizeY
(), 
GL_RGB
, 
GL_UNSIGNED_BYTE
, image->
	`gëD©a
());

63 ++(
this
->
Àngth
);

64 
	}
}

66 
GLuöt
 
	$gëGLTextuª
(
ödex
){

67 if(
ödex
 >(
this
->
Àngth
)){

68 
	`¥ötf
("index out ofÑange");

70  (
this
->
ãxtuªs
)[
ödex
];

71 
	}
}

73 
	$gëLígth
(){

74  
this
->
Àngth
;

75 
	}
}

77 
	$gëMaxLígth
(){

78  
this
->
max_Àngth
;

79 
	}
}

83 
Textuª
 *
	gãxtuª
;

86 
	$LﬂdGLTextuªs
() {

88 
Image
 *
image
;

89 
ãxtuª
 = 
√w
 
	`Textuª
(8);

92 
image
 = 
√w
 
	`Image
();

93 i‡(!
image
->
	`imageLﬂd
("Data/road.bmp")){

94 
	`exô
(1);

96 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

97 
dñëe
 
image
;

100 
image
 = 
√w
 
	`Image
();

101 i‡(!
image
->
	`imageLﬂd
("Data/grass.bmp")) {

102 
	`exô
(1);

104 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

105 
dñëe
 
image
;

108 
image
 = 
√w
 
	`Image
();

109 i‡(
image
 =
NULL
) {

110 
	`exô
(0);

113 i‡(!
image
->
	`imageLﬂd
("Data/building.bmp")) {

114 
	`exô
(1);

116 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

117 
dñëe
 
image
;

120 
image
 = 
√w
 
	`Image
();

121 i‡(!
image
->
	`imageLﬂd
("Data/building2.bmp")) {

122 
	`exô
(1);

124 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

125 
dñëe
 
image
;

128 
image
 = 
√w
 
	`Image
();

129 i‡(!
image
->
	`imageLﬂd
("Data/bdw.bmp")) {

130 
	`exô
(1);

132 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

133 
dñëe
 
image
;

136 
image
 = 
√w
 
	`Image
();

137 i‡(!
image
->
	`imageLﬂd
("Data/crate.bmp")) {

138 
	`exô
(1);

140 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

141 
dñëe
 
image
;

144 
image
 = 
√w
 
	`Image
();

145 i‡(!
image
->
	`imageLﬂd
("Data/muwenli3.bmp")) {

146 
	`exô
(1);

148 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

149 
dñëe
 
image
;

152 
image
 = 
√w
 
	`Image
();

153 i‡(!
image
->
	`imageLﬂd
("Data/muwenli2.bmp")) {

154 
	`exô
(1);

156 
ãxtuª
->
	`lﬂdGLTextuª
(
image
);

157 
dñëe
 
image
;

159 
	}
}

	@/usr/include/GL/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_
 1

	)

4 #ifde‡
__˝lu•lus


39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

40 #i‚de‡
WIN32_LEAN_AND_MEAN


41 
	#WIN32_LEAN_AND_MEAN
 1

	)

43 
	~<wödows.h
>

46 #i‚de‡
APIENTRY


47 
	#APIENTRY


	)

49 #i‚de‡
APIENTRYP


50 
	#APIENTRYP
 
APIENTRY
 *

	)

52 #i‚de‡
GLAPI


53 
	#GLAPI
 

	)

56 
	#GL_GLEXT_VERSION
 20160609

	)

68 #i‚de‡
GL_VERSION_1_2


69 
	#GL_VERSION_1_2
 1

	)

70 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

71 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

72 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

73 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

74 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

75 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

76 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

77 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

78 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

79 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

80 
	#GL_TEXTURE_3D
 0x806F

	)

81 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

82 
	#GL_TEXTURE_DEPTH
 0x8071

	)

83 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

84 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

85 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

86 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

87 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

88 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

89 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

90 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

91 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

92 
	#GL_BGR
 0x80E0

	)

93 
	#GL_BGRA
 0x80E1

	)

94 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

95 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

96 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

97 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

98 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

99 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

100 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

101 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

102 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

103 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

104 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

105 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

106 
	#GL_RESCALE_NORMAL
 0x803A

	)

107 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

108 
	#GL_SINGLE_COLOR
 0x81F9

	)

109 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

110 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

111 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

112 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

113 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

114 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

115 #ifde‡
GL_GLEXT_PROTOTYPES


116 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

117 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

118 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

119 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

123 #i‚de‡
GL_VERSION_1_3


124 
	#GL_VERSION_1_3
 1

	)

125 
	#GL_TEXTURE0
 0x84C0

	)

126 
	#GL_TEXTURE1
 0x84C1

	)

127 
	#GL_TEXTURE2
 0x84C2

	)

128 
	#GL_TEXTURE3
 0x84C3

	)

129 
	#GL_TEXTURE4
 0x84C4

	)

130 
	#GL_TEXTURE5
 0x84C5

	)

131 
	#GL_TEXTURE6
 0x84C6

	)

132 
	#GL_TEXTURE7
 0x84C7

	)

133 
	#GL_TEXTURE8
 0x84C8

	)

134 
	#GL_TEXTURE9
 0x84C9

	)

135 
	#GL_TEXTURE10
 0x84CA

	)

136 
	#GL_TEXTURE11
 0x84CB

	)

137 
	#GL_TEXTURE12
 0x84CC

	)

138 
	#GL_TEXTURE13
 0x84CD

	)

139 
	#GL_TEXTURE14
 0x84CE

	)

140 
	#GL_TEXTURE15
 0x84CF

	)

141 
	#GL_TEXTURE16
 0x84D0

	)

142 
	#GL_TEXTURE17
 0x84D1

	)

143 
	#GL_TEXTURE18
 0x84D2

	)

144 
	#GL_TEXTURE19
 0x84D3

	)

145 
	#GL_TEXTURE20
 0x84D4

	)

146 
	#GL_TEXTURE21
 0x84D5

	)

147 
	#GL_TEXTURE22
 0x84D6

	)

148 
	#GL_TEXTURE23
 0x84D7

	)

149 
	#GL_TEXTURE24
 0x84D8

	)

150 
	#GL_TEXTURE25
 0x84D9

	)

151 
	#GL_TEXTURE26
 0x84DA

	)

152 
	#GL_TEXTURE27
 0x84DB

	)

153 
	#GL_TEXTURE28
 0x84DC

	)

154 
	#GL_TEXTURE29
 0x84DD

	)

155 
	#GL_TEXTURE30
 0x84DE

	)

156 
	#GL_TEXTURE31
 0x84DF

	)

157 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

158 
	#GL_MULTISAMPLE
 0x809D

	)

159 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

160 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

161 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

162 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

163 
	#GL_SAMPLES
 0x80A9

	)

164 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

165 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

166 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

167 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

168 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

169 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

170 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

171 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

172 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

173 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

174 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

175 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

176 
	#GL_COMPRESSED_RGB
 0x84ED

	)

177 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

178 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

179 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

180 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

181 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

182 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

183 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

184 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

185 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

186 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

187 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

188 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

189 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

190 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

191 
	#GL_NORMAL_MAP
 0x8511

	)

192 
	#GL_REFLECTION_MAP
 0x8512

	)

193 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

194 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

195 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

196 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

197 
	#GL_COMBINE
 0x8570

	)

198 
	#GL_COMBINE_RGB
 0x8571

	)

199 
	#GL_COMBINE_ALPHA
 0x8572

	)

200 
	#GL_SOURCE0_RGB
 0x8580

	)

201 
	#GL_SOURCE1_RGB
 0x8581

	)

202 
	#GL_SOURCE2_RGB
 0x8582

	)

203 
	#GL_SOURCE0_ALPHA
 0x8588

	)

204 
	#GL_SOURCE1_ALPHA
 0x8589

	)

205 
	#GL_SOURCE2_ALPHA
 0x858A

	)

206 
	#GL_OPERAND0_RGB
 0x8590

	)

207 
	#GL_OPERAND1_RGB
 0x8591

	)

208 
	#GL_OPERAND2_RGB
 0x8592

	)

209 
	#GL_OPERAND0_ALPHA
 0x8598

	)

210 
	#GL_OPERAND1_ALPHA
 0x8599

	)

211 
	#GL_OPERAND2_ALPHA
 0x859A

	)

212 
	#GL_RGB_SCALE
 0x8573

	)

213 
	#GL_ADD_SIGNED
 0x8574

	)

214 
	#GL_INTERPOLATE
 0x8575

	)

215 
	#GL_SUBTRACT
 0x84E7

	)

216 
	#GL_CONSTANT
 0x8576

	)

217 
	#GL_PRIMARY_COLOR
 0x8577

	)

218 
	#GL_PREVIOUS
 0x8578

	)

219 
	#GL_DOT3_RGB
 0x86AE

	)

220 
	#GL_DOT3_RGBA
 0x86AF

	)

221 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

222 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

223 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

224 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

225 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

226 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

227 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

228 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

229 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

230 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

231 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

232 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

233 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

234 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

235 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

236 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

237 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

238 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

239 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

240 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

241 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

242 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

243 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

244 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

245 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

246 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

247 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

248 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

249 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

250 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

251 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

252 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

253 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

254 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

255 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

256 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

257 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

258 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

259 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

260 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

261 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

262 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

263 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

264 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

265 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

266 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

267 #ifde‡
GL_GLEXT_PROTOTYPES


268 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

269 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

270 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

271 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

272 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

273 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

274 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

275 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

276 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

277 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
 
ãxtuª
);

278 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

279 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

280 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

281 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

282 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

283 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

284 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

285 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

286 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

287 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

288 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

289 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

290 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

291 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

292 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

293 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

294 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

295 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

296 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

297 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

298 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

299 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

300 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

301 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

302 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

303 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

304 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

305 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

306 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

307 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

308 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

309 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

310 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

311 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

312 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

313 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

317 #i‚de‡
GL_VERSION_1_4


318 
	#GL_VERSION_1_4
 1

	)

319 
	#GL_BLEND_DST_RGB
 0x80C8

	)

320 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

321 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

322 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

323 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

324 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

325 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

326 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

327 
	#GL_MIRRORED_REPEAT
 0x8370

	)

328 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

329 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

330 
	#GL_INCR_WRAP
 0x8507

	)

331 
	#GL_DECR_WRAP
 0x8508

	)

332 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

333 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

334 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

335 
	#GL_POINT_SIZE_MIN
 0x8126

	)

336 
	#GL_POINT_SIZE_MAX
 0x8127

	)

337 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

338 
	#GL_GENERATE_MIPMAP
 0x8191

	)

339 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

340 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

341 
	#GL_FOG_COORDINATE
 0x8451

	)

342 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

343 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

344 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

345 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

346 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

347 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

348 
	#GL_COLOR_SUM
 0x8458

	)

349 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

350 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

351 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

352 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

353 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

354 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

355 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

356 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

357 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

358 
	#GL_FUNC_ADD
 0x8006

	)

359 
	#GL_FUNC_SUBTRACT
 0x800A

	)

360 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

361 
	#GL_MIN
 0x8007

	)

362 
	#GL_MAX
 0x8008

	)

363 
	#GL_CONSTANT_COLOR
 0x8001

	)

364 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

365 
	#GL_CONSTANT_ALPHA
 0x8003

	)

366 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

367 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

368 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

369 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
);

370 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

371 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

372 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

373 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

374 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

375 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

376 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

377 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

378 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

379 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

380 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

381 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

382 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

383 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

384 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

385 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

386 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

387 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

388 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

389 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

390 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

391 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

392 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

393 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

394 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

395 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

396 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

397 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

398 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

399 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

400 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

401 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

402 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

403 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

404 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

405 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

406 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

407 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

408 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

409 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

410 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

411 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

412 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

413 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

414 #ifde‡
GL_GLEXT_PROTOTYPES


415 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

416 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
døwcou¡
);

417 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
);

418 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

419 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

420 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

421 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

422 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
 
co‹d
);

423 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *
co‹d
);

424 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
 
co‹d
);

425 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *
co‹d
);

426 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

427 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

428 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *
v
);

429 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

430 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *
v
);

431 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

432 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *
v
);

433 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

434 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *
v
);

435 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

436 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *
v
);

437 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

438 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *
v
);

439 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

440 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *
v
);

441 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

442 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *
v
);

443 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

444 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

445 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *
v
);

446 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

447 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *
v
);

448 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
 
x
, GLöà
y
);

449 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *
v
);

450 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

451 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *
v
);

452 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

453 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *
v
);

454 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

455 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *
v
);

456 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

457 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *
v
);

458 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

459 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *
v
);

460 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

461 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
 
mode
);

465 #i‚de‡
GL_VERSION_1_5


466 
	#GL_VERSION_1_5
 1

	)

467 
	~<°ddef.h
>

468 
±rdiff_t
 
	tGLsizeùå
;

469 
±rdiff_t
 
	tGLöçå
;

470 
	#GL_BUFFER_SIZE
 0x8764

	)

471 
	#GL_BUFFER_USAGE
 0x8765

	)

472 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

473 
	#GL_CURRENT_QUERY
 0x8865

	)

474 
	#GL_QUERY_RESULT
 0x8866

	)

475 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

476 
	#GL_ARRAY_BUFFER
 0x8892

	)

477 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

478 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

479 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

480 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

481 
	#GL_READ_ONLY
 0x88B8

	)

482 
	#GL_WRITE_ONLY
 0x88B9

	)

483 
	#GL_READ_WRITE
 0x88BA

	)

484 
	#GL_BUFFER_ACCESS
 0x88BB

	)

485 
	#GL_BUFFER_MAPPED
 0x88BC

	)

486 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

487 
	#GL_STREAM_DRAW
 0x88E0

	)

488 
	#GL_STREAM_READ
 0x88E1

	)

489 
	#GL_STREAM_COPY
 0x88E2

	)

490 
	#GL_STATIC_DRAW
 0x88E4

	)

491 
	#GL_STATIC_READ
 0x88E5

	)

492 
	#GL_STATIC_COPY
 0x88E6

	)

493 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

494 
	#GL_DYNAMIC_READ
 0x88E9

	)

495 
	#GL_DYNAMIC_COPY
 0x88EA

	)

496 
	#GL_SAMPLES_PASSED
 0x8914

	)

497 
	#GL_SRC1_ALPHA
 0x8589

	)

498 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

499 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

500 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

501 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

502 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

503 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

504 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

505 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

506 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

507 
	#GL_FOG_COORD_SRC
 0x8450

	)

508 
	#GL_FOG_COORD
 0x8451

	)

509 
	#GL_CURRENT_FOG_COORD
 0x8453

	)

510 
	#GL_FOG_COORD_ARRAY_TYPE
 0x8454

	)

511 
	#GL_FOG_COORD_ARRAY_STRIDE
 0x8455

	)

512 
	#GL_FOG_COORD_ARRAY_POINTER
 0x8456

	)

513 
	#GL_FOG_COORD_ARRAY
 0x8457

	)

514 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 0x889D

	)

515 
	#GL_SRC0_RGB
 0x8580

	)

516 
	#GL_SRC1_RGB
 0x8581

	)

517 
	#GL_SRC2_RGB
 0x8582

	)

518 
	#GL_SRC0_ALPHA
 0x8588

	)

519 
	#GL_SRC2_ALPHA
 0x858A

	)

520 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

521 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

522 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

523 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

524 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

525 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

526 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

527 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

528 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

529 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

530 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

531 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

532 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

533 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

534 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

535 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

536 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

537 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

538 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

539 #ifde‡
GL_GLEXT_PROTOTYPES


540 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

541 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

542 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
 
id
);

543 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

544 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
 
èrgë
);

545 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

546 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

547 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

548 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

549 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

550 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

551 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

552 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

553 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

554 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

555 
GLAPI
 *
APIENTRY
 
glM≠Buf„r
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

556 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
 
èrgë
);

557 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

558 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

562 #i‚de‡
GL_VERSION_2_0


563 
	#GL_VERSION_2_0
 1

	)

564 
	tGLch¨
;

565 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

566 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

567 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

568 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

569 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

570 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

571 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

572 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

573 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

574 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

575 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

576 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

577 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

578 
	#GL_DRAW_BUFFER0
 0x8825

	)

579 
	#GL_DRAW_BUFFER1
 0x8826

	)

580 
	#GL_DRAW_BUFFER2
 0x8827

	)

581 
	#GL_DRAW_BUFFER3
 0x8828

	)

582 
	#GL_DRAW_BUFFER4
 0x8829

	)

583 
	#GL_DRAW_BUFFER5
 0x882A

	)

584 
	#GL_DRAW_BUFFER6
 0x882B

	)

585 
	#GL_DRAW_BUFFER7
 0x882C

	)

586 
	#GL_DRAW_BUFFER8
 0x882D

	)

587 
	#GL_DRAW_BUFFER9
 0x882E

	)

588 
	#GL_DRAW_BUFFER10
 0x882F

	)

589 
	#GL_DRAW_BUFFER11
 0x8830

	)

590 
	#GL_DRAW_BUFFER12
 0x8831

	)

591 
	#GL_DRAW_BUFFER13
 0x8832

	)

592 
	#GL_DRAW_BUFFER14
 0x8833

	)

593 
	#GL_DRAW_BUFFER15
 0x8834

	)

594 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

595 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

596 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

597 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

598 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

599 
	#GL_VERTEX_SHADER
 0x8B31

	)

600 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

601 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

602 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

603 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

604 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

605 
	#GL_SHADER_TYPE
 0x8B4F

	)

606 
	#GL_FLOAT_VEC2
 0x8B50

	)

607 
	#GL_FLOAT_VEC3
 0x8B51

	)

608 
	#GL_FLOAT_VEC4
 0x8B52

	)

609 
	#GL_INT_VEC2
 0x8B53

	)

610 
	#GL_INT_VEC3
 0x8B54

	)

611 
	#GL_INT_VEC4
 0x8B55

	)

612 
	#GL_BOOL
 0x8B56

	)

613 
	#GL_BOOL_VEC2
 0x8B57

	)

614 
	#GL_BOOL_VEC3
 0x8B58

	)

615 
	#GL_BOOL_VEC4
 0x8B59

	)

616 
	#GL_FLOAT_MAT2
 0x8B5A

	)

617 
	#GL_FLOAT_MAT3
 0x8B5B

	)

618 
	#GL_FLOAT_MAT4
 0x8B5C

	)

619 
	#GL_SAMPLER_1D
 0x8B5D

	)

620 
	#GL_SAMPLER_2D
 0x8B5E

	)

621 
	#GL_SAMPLER_3D
 0x8B5F

	)

622 
	#GL_SAMPLER_CUBE
 0x8B60

	)

623 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

624 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

625 
	#GL_DELETE_STATUS
 0x8B80

	)

626 
	#GL_COMPILE_STATUS
 0x8B81

	)

627 
	#GL_LINK_STATUS
 0x8B82

	)

628 
	#GL_VALIDATE_STATUS
 0x8B83

	)

629 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

630 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

631 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

632 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

633 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

634 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

635 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

636 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

637 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

638 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

639 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

640 
	#GL_LOWER_LEFT
 0x8CA1

	)

641 
	#GL_UPPER_LEFT
 0x8CA2

	)

642 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

643 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

644 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

645 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

646 
	#GL_POINT_SPRITE
 0x8861

	)

647 
	#GL_COORD_REPLACE
 0x8862

	)

648 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

649 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

650 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

651 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

652 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

653 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

654 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

655 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

656 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

657 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

658 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

659 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

660 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

661 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

662 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

663 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

664 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

665 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

666 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tshadîs
);

667 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

668 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

669 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

670 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

671 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

672 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

673 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

674 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

675 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

676 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

677 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

678 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

679 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

680 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

681 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

682 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

683 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

684 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

685 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

686 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

687 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

688 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

689 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

690 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

691 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

692 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

693 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

694 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

695 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

696 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

697 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

698 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

699 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

700 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

701 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

702 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

703 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

704 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

705 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

706 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

707 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

708 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

709 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

710 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

711 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

712 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

713 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

714 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

715 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

716 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

717 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

718 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

719 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

720 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

721 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

722 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

723 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

724 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

725 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

726 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

727 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

728 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

729 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

730 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

731 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

732 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

733 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

734 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

735 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

736 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

737 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

738 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

739 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

740 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

741 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

742 #ifde‡
GL_GLEXT_PROTOTYPES


743 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

744 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

745 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

746 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

747 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

748 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

749 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

750 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

751 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

752 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

753 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

754 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

755 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

756 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

757 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

758 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

759 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

760 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLuöà*
shadîs
);

761 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

762 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

763 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

764 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

765 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

766 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
sour˚
);

767 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

768 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

769 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

770 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

771 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

772 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

773 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

774 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

775 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

776 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

777 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rög
, c⁄° 
GLöt
 *
Àngth
);

778 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

779 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

780 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

781 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

782 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

783 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

784 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

785 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

786 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

787 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

788 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

789 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

790 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

791 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

792 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

793 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

794 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

795 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

796 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

797 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

798 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

799 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

800 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

801 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

802 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

803 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

804 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

805 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

806 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

807 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

808 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

809 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

810 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

811 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

812 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

813 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

814 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

815 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

816 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

817 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

818 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

819 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

820 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

821 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

822 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

823 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

824 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

825 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

826 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

827 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

828 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

829 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

830 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

831 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

832 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

833 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

834 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

835 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

839 #i‚de‡
GL_VERSION_2_1


840 
	#GL_VERSION_2_1
 1

	)

841 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

842 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

843 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

844 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

845 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

846 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

847 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

848 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

849 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

850 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

851 
	#GL_SRGB
 0x8C40

	)

852 
	#GL_SRGB8
 0x8C41

	)

853 
	#GL_SRGB_ALPHA
 0x8C42

	)

854 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

855 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

856 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

857 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

858 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

859 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

860 
	#GL_SLUMINANCE
 0x8C46

	)

861 
	#GL_SLUMINANCE8
 0x8C47

	)

862 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

863 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

864 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

865 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

866 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

867 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

868 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

869 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

870 #ifde‡
GL_GLEXT_PROTOTYPES


871 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

872 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

873 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

874 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

875 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

876 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

880 #i‚de‡
GL_VERSION_3_0


881 
	#GL_VERSION_3_0
 1

	)

882 
	tGLhÆf
;

883 
	#GL_COMPARE_REF_TO_TEXTURE
 0x884E

	)

884 
	#GL_CLIP_DISTANCE0
 0x3000

	)

885 
	#GL_CLIP_DISTANCE1
 0x3001

	)

886 
	#GL_CLIP_DISTANCE2
 0x3002

	)

887 
	#GL_CLIP_DISTANCE3
 0x3003

	)

888 
	#GL_CLIP_DISTANCE4
 0x3004

	)

889 
	#GL_CLIP_DISTANCE5
 0x3005

	)

890 
	#GL_CLIP_DISTANCE6
 0x3006

	)

891 
	#GL_CLIP_DISTANCE7
 0x3007

	)

892 
	#GL_MAX_CLIP_DISTANCES
 0x0D32

	)

893 
	#GL_MAJOR_VERSION
 0x821B

	)

894 
	#GL_MINOR_VERSION
 0x821C

	)

895 
	#GL_NUM_EXTENSIONS
 0x821D

	)

896 
	#GL_CONTEXT_FLAGS
 0x821E

	)

897 
	#GL_COMPRESSED_RED
 0x8225

	)

898 
	#GL_COMPRESSED_RG
 0x8226

	)

899 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x00000001

	)

900 
	#GL_RGBA32F
 0x8814

	)

901 
	#GL_RGB32F
 0x8815

	)

902 
	#GL_RGBA16F
 0x881A

	)

903 
	#GL_RGB16F
 0x881B

	)

904 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

905 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

906 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

907 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

908 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

909 
	#GL_FIXED_ONLY
 0x891D

	)

910 
	#GL_MAX_VARYING_COMPONENTS
 0x8B4B

	)

911 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

912 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

913 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

914 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

915 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

916 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

917 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

918 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

919 
	#GL_RGB9_E5
 0x8C3D

	)

920 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

921 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

922 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

923 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

924 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

925 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

926 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

927 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

928 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

929 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

930 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

931 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

932 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

933 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

934 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

935 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

936 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

937 
	#GL_RGBA32UI
 0x8D70

	)

938 
	#GL_RGB32UI
 0x8D71

	)

939 
	#GL_RGBA16UI
 0x8D76

	)

940 
	#GL_RGB16UI
 0x8D77

	)

941 
	#GL_RGBA8UI
 0x8D7C

	)

942 
	#GL_RGB8UI
 0x8D7D

	)

943 
	#GL_RGBA32I
 0x8D82

	)

944 
	#GL_RGB32I
 0x8D83

	)

945 
	#GL_RGBA16I
 0x8D88

	)

946 
	#GL_RGB16I
 0x8D89

	)

947 
	#GL_RGBA8I
 0x8D8E

	)

948 
	#GL_RGB8I
 0x8D8F

	)

949 
	#GL_RED_INTEGER
 0x8D94

	)

950 
	#GL_GREEN_INTEGER
 0x8D95

	)

951 
	#GL_BLUE_INTEGER
 0x8D96

	)

952 
	#GL_RGB_INTEGER
 0x8D98

	)

953 
	#GL_RGBA_INTEGER
 0x8D99

	)

954 
	#GL_BGR_INTEGER
 0x8D9A

	)

955 
	#GL_BGRA_INTEGER
 0x8D9B

	)

956 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

957 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

958 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

959 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

960 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

961 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

962 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

963 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

964 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

965 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

966 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

967 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

968 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

969 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

970 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

971 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

972 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

973 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

974 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

975 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

976 
	#GL_QUERY_WAIT
 0x8E13

	)

977 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

978 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

979 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

980 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

981 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

982 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

983 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

984 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

985 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

986 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

987 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

988 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

989 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

990 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

991 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

992 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

993 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

994 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

995 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

996 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

997 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

998 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

999 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1000 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1001 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1002 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1003 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

1004 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

1005 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

1006 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

1007 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

1008 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

1009 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1010 
	#GL_DRAW_FRAMEBUFFER_BINDING
 0x8CA6

	)

1011 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1012 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1013 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1014 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1015 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1016 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1017 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1018 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1019 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1020 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1021 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1022 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1023 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1024 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1025 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1026 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1027 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1028 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1029 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

1030 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

1031 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

1032 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

1033 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

1034 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

1035 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

1036 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

1037 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

1038 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

1039 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

1040 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

1041 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

1042 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

1043 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

1044 
	#GL_COLOR_ATTACHMENT16
 0x8CF0

	)

1045 
	#GL_COLOR_ATTACHMENT17
 0x8CF1

	)

1046 
	#GL_COLOR_ATTACHMENT18
 0x8CF2

	)

1047 
	#GL_COLOR_ATTACHMENT19
 0x8CF3

	)

1048 
	#GL_COLOR_ATTACHMENT20
 0x8CF4

	)

1049 
	#GL_COLOR_ATTACHMENT21
 0x8CF5

	)

1050 
	#GL_COLOR_ATTACHMENT22
 0x8CF6

	)

1051 
	#GL_COLOR_ATTACHMENT23
 0x8CF7

	)

1052 
	#GL_COLOR_ATTACHMENT24
 0x8CF8

	)

1053 
	#GL_COLOR_ATTACHMENT25
 0x8CF9

	)

1054 
	#GL_COLOR_ATTACHMENT26
 0x8CFA

	)

1055 
	#GL_COLOR_ATTACHMENT27
 0x8CFB

	)

1056 
	#GL_COLOR_ATTACHMENT28
 0x8CFC

	)

1057 
	#GL_COLOR_ATTACHMENT29
 0x8CFD

	)

1058 
	#GL_COLOR_ATTACHMENT30
 0x8CFE

	)

1059 
	#GL_COLOR_ATTACHMENT31
 0x8CFF

	)

1060 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

1061 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

1062 
	#GL_FRAMEBUFFER
 0x8D40

	)

1063 
	#GL_RENDERBUFFER
 0x8D41

	)

1064 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

1065 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

1066 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

1067 
	#GL_STENCIL_INDEX1
 0x8D46

	)

1068 
	#GL_STENCIL_INDEX4
 0x8D47

	)

1069 
	#GL_STENCIL_INDEX8
 0x8D48

	)

1070 
	#GL_STENCIL_INDEX16
 0x8D49

	)

1071 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

1072 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

1073 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

1074 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

1075 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

1076 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

1077 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

1078 
	#GL_MAX_SAMPLES
 0x8D57

	)

1079 
	#GL_INDEX
 0x8222

	)

1080 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

1081 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

1082 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

1083 
	#GL_HALF_FLOAT
 0x140B

	)

1084 
	#GL_MAP_READ_BIT
 0x0001

	)

1085 
	#GL_MAP_WRITE_BIT
 0x0002

	)

1086 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

1087 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

1088 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

1089 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

1090 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

1091 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

1092 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

1093 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

1094 
	#GL_RG
 0x8227

	)

1095 
	#GL_RG_INTEGER
 0x8228

	)

1096 
	#GL_R8
 0x8229

	)

1097 
	#GL_R16
 0x822A

	)

1098 
	#GL_RG8
 0x822B

	)

1099 
	#GL_RG16
 0x822C

	)

1100 
	#GL_R16F
 0x822D

	)

1101 
	#GL_R32F
 0x822E

	)

1102 
	#GL_RG16F
 0x822F

	)

1103 
	#GL_RG32F
 0x8230

	)

1104 
	#GL_R8I
 0x8231

	)

1105 
	#GL_R8UI
 0x8232

	)

1106 
	#GL_R16I
 0x8233

	)

1107 
	#GL_R16UI
 0x8234

	)

1108 
	#GL_R32I
 0x8235

	)

1109 
	#GL_R32UI
 0x8236

	)

1110 
	#GL_RG8I
 0x8237

	)

1111 
	#GL_RG8UI
 0x8238

	)

1112 
	#GL_RG16I
 0x8239

	)

1113 
	#GL_RG16UI
 0x823A

	)

1114 
	#GL_RG32I
 0x823B

	)

1115 
	#GL_RG32UI
 0x823C

	)

1116 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

1117 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

1118 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

1119 
	#GL_ALPHA_INTEGER
 0x8D97

	)

1120 (
APIENTRYP
 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

1121 (
APIENTRYP
 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

1122 (
APIENTRYP
 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

1123 (
APIENTRYP
 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1124 (
APIENTRYP
 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1125 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1126 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

1127 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

1128 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

1129 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

1130 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

1131 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

1132 (
APIENTRYP
 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

1133 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

1134 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

1135 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1136 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1137 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1138 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

1139 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

1140 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

1141 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

1142 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

1143 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

1144 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

1145 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

1146 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1147 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1148 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1149 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1150 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1151 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1152 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1153 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1154 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

1155 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

1156 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

1157 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

1158 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

1159 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

1160 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1161 (
APIENTRYP
 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

1162 (
APIENTRYP
 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

1163 (
APIENTRYP
 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1164 (
APIENTRYP
 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1165 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1166 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1167 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1168 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1169 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

1170 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

1171 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1172 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

1173 (
APIENTRYP
 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

1174 (
APIENTRYP
 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1175 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1176 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

1177 c⁄° 
	tGLubyã
 *(
	tAPIENTRYP
 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
 
	t«me
, 
	tGLuöt
 
	tödex
);

1178 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

1179 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

1180 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

1181 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

1182 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1183 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1184 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

1185 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

1186 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

1187 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

1188 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

1189 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1190 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1191 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

1192 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

1193 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1194 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

1195 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

1196 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1197 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

1198 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

1199 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

1200 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1201 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

1202 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

1203 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1204 #ifde‡
GL_GLEXT_PROTOTYPES


1205 
GLAPI
 
APIENTRY
 
glCﬁ‹Maski
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

1206 
GLAPI
 
APIENTRY
 
glGëBoﬁóni_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

1207 
GLAPI
 
APIENTRY
 
glGëI¡egîi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

1208 
GLAPI
 
APIENTRY
 
glE«bÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1209 
GLAPI
 
APIENTRY
 
glDißbÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1210 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1211 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdback
 (
GLíum
 
¥imôiveMode
);

1212 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdback
 ();

1213 
GLAPI
 
APIENTRY
 
glBödBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

1214 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

1215 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

1216 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yög
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

1217 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

1218 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídî
 (
GLuöt
 
id
, 
GLíum
 
mode
);

1219 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídî
 ();

1220 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

1221 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1222 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1223 
GLAPI
 
APIENTRY
 
glVîãxAâribI1i
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

1224 
GLAPI
 
APIENTRY
 
glVîãxAâribI2i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

1225 
GLAPI
 
APIENTRY
 
glVîãxAâribI3i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

1226 
GLAPI
 
APIENTRY
 
glVîãxAâribI4i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1227 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ui
 (
GLuöt
 
ödex
, GLuöà
x
);

1228 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

1229 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

1230 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

1231 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1232 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1233 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1234 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1235 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1236 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1237 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1238 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1239 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

1240 
GLAPI
 
APIENTRY
 
glVîãxAâribI4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

1241 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

1242 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

1243 
GLAPI
 
APIENTRY
 
glGëUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

1244 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

1245 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1246 
GLAPI
 
APIENTRY
 
glUnif‹m1ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

1247 
GLAPI
 
APIENTRY
 
glUnif‹m2ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

1248 
GLAPI
 
APIENTRY
 
glUnif‹m3ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

1249 
GLAPI
 
APIENTRY
 
glUnif‹m4ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

1250 
GLAPI
 
APIENTRY
 
glUnif‹m1uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1251 
GLAPI
 
APIENTRY
 
glUnif‹m2uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1252 
GLAPI
 
APIENTRY
 
glUnif‹m3uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1253 
GLAPI
 
APIENTRY
 
glUnif‹m4uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1254 
GLAPI
 
APIENTRY
 
glTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1255 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

1256 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1257 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

1258 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„riv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

1259 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„ruiv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLuöt
 *
vÆue
);

1260 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

1261 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfi
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

1262 
GLAPI
 c⁄° 
GLubyã
 *
APIENTRY
 
glGëSåögi
 (
GLíum
 
«me
, 
GLuöt
 
ödex
);

1263 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

1264 
GLAPI
 
APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

1265 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

1266 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

1267 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

1268 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1269 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

1270 
GLAPI
 
APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

1271 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

1272 
GLAPI
 
APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

1273 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

1274 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1275 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1276 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

1277 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

1278 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1279 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

1280 
GLAPI
 
APIENTRY
 
glBlôFømebuf„r
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

1281 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1282 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayî
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

1283 
GLAPI
 *
APIENTRY
 
glM≠Buf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

1284 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

1285 
GLAPI
 
APIENTRY
 
glBödVîãxAºay
 (
GLuöt
 
¨øy
);

1286 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºays
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

1287 
GLAPI
 
APIENTRY
 
glGíVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

1288 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºay
 (
GLuöt
 
¨øy
);

1292 #i‚de‡
GL_VERSION_3_1


1293 
	#GL_VERSION_3_1
 1

	)

1294 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

1295 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

1296 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

1297 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

1298 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

1299 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

1300 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

1301 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

1302 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

1303 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

1304 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

1305 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

1306 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

1307 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

1308 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

1309 
	#GL_R8_SNORM
 0x8F94

	)

1310 
	#GL_RG8_SNORM
 0x8F95

	)

1311 
	#GL_RGB8_SNORM
 0x8F96

	)

1312 
	#GL_RGBA8_SNORM
 0x8F97

	)

1313 
	#GL_R16_SNORM
 0x8F98

	)

1314 
	#GL_RG16_SNORM
 0x8F99

	)

1315 
	#GL_RGB16_SNORM
 0x8F9A

	)

1316 
	#GL_RGBA16_SNORM
 0x8F9B

	)

1317 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

1318 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

1319 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

1320 
	#GL_COPY_READ_BUFFER
 0x8F36

	)

1321 
	#GL_COPY_WRITE_BUFFER
 0x8F37

	)

1322 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

1323 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

1324 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

1325 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

1326 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

1327 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

1328 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

1329 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

1330 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

1331 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

1332 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

1333 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

1334 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

1335 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

1336 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

1337 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

1338 
	#GL_UNIFORM_TYPE
 0x8A37

	)

1339 
	#GL_UNIFORM_SIZE
 0x8A38

	)

1340 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

1341 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

1342 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

1343 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

1344 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

1345 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

1346 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

1347 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

1348 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

1349 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

1350 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

1351 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

1352 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

1353 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

1354 
	#GL_INVALID_INDEX
 0xFFFFFFFFu

	)

1355 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
);

1356 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
);

1357 (
APIENTRYP
 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

1358 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
 
	tödex
);

1359 (
APIENTRYP
 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadT¨gë
, GLíum 
	twrôeT¨gë
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

1360 (
APIENTRYP
 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tunif‹mNames
, GLuöà*
	tunif‹mIndi˚s
);

1361 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöà*
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1362 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mName
);

1363 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	tunif‹mBlockName
);

1364 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1365 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mBlockName
);

1366 (
APIENTRYP
 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

1367 #ifde‡
GL_GLEXT_PROTOTYPES


1368 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚d
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
);

1369 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚d
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
);

1370 
GLAPI
 
APIENTRY
 
glTexBuf„r
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

1371 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndex
 (
GLuöt
 
ödex
);

1372 
GLAPI
 
APIENTRY
 
glC›yBuf„rSubD©a
 (
GLíum
 
ªadT¨gë
, GLíum 
wrôeT¨gë
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

1373 
GLAPI
 
APIENTRY
 
glGëUnif‹mIndi˚s
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° 
GLch¨
 *c⁄°*
unif‹mNames
, GLuöà*
unif‹mIndi˚s
);

1374 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹msiv
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° GLuöà*
unif‹mIndi˚s
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1375 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mName
);

1376 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëUnif‹mBlockIndex
 (GLuöà
¥ogøm
, c⁄° 
GLch¨
 *
unif‹mBlockName
);

1377 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockiv
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1378 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mBlockName
);

1379 
GLAPI
 
APIENTRY
 
glUnif‹mBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, GLuöà
unif‹mBlockBödög
);

1383 #i‚de‡
GL_VERSION_3_2


1384 
	#GL_VERSION_3_2
 1

	)

1385 
__GLsync
 *
	tGLsync
;

1386 #i‚de‡
GLEXT_64_TYPES_DEFINED


1388 
	#GLEXT_64_TYPES_DEFINED


	)

1391 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

1392 
	~<öây≥s.h
>

1393 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

1394 
	~<öây≥s.h
>

1395 #i‡
deföed
(
__STDC__
)

1396 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

1397 
	töt64_t
;

1398 
	tuöt64_t
;

1400 
	töt64_t
;

1401 
	tuöt64_t
;

1404 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

1405 
	~<öây≥s.h
>

1406 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

1407 
	~<°döt.h
>

1408 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

1409 
	töt32_t
;

1410 
	töt64_t
;

1411 
	tuöt64_t
;

1412 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

1413 
	~<°döt.h
>

1414 #ñi‡
deföed
(
_WIN32
)

1415 
__öt32
 
	töt32_t
;

1416 
__öt64
 
	töt64_t
;

1417 
	t__öt64
 
	tuöt64_t
;

1420 
	~<öây≥s.h
>

1423 
uöt64_t
 
	tGLuöt64
;

1424 
öt64_t
 
	tGLöt64
;

1425 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

1426 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

1427 
	#GL_LINES_ADJACENCY
 0x000A

	)

1428 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

1429 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

1430 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

1431 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

1432 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

1433 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

1434 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

1435 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

1436 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

1437 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

1438 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

1439 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

1440 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

1441 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

1442 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

1443 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

1444 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

1445 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

1446 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

1447 
	#GL_DEPTH_CLAMP
 0x864F

	)

1448 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

1449 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

1450 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

1451 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

1452 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

1453 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

1454 
	#GL_OBJECT_TYPE
 0x9112

	)

1455 
	#GL_SYNC_CONDITION
 0x9113

	)

1456 
	#GL_SYNC_STATUS
 0x9114

	)

1457 
	#GL_SYNC_FLAGS
 0x9115

	)

1458 
	#GL_SYNC_FENCE
 0x9116

	)

1459 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

1460 
	#GL_UNSIGNALED
 0x9118

	)

1461 
	#GL_SIGNALED
 0x9119

	)

1462 
	#GL_ALREADY_SIGNALED
 0x911A

	)

1463 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

1464 
	#GL_CONDITION_SATISFIED
 0x911C

	)

1465 
	#GL_WAIT_FAILED
 0x911D

	)

1466 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFFuŒ

	)

1467 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

1468 
	#GL_SAMPLE_POSITION
 0x8E50

	)

1469 
	#GL_SAMPLE_MASK
 0x8E51

	)

1470 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

1471 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

1472 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

1473 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

1474 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

1475 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

1476 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

1477 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

1478 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

1479 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

1480 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

1481 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

1482 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

1483 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

1484 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

1485 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

1486 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

1487 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

1488 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

1489 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1490 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1491 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
);

1492 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

1493 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

1494 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

1495 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 
	tsync
);

1496 (
APIENTRYP
 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 
	tsync
);

1497 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1498 (
APIENTRYP
 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1499 (
APIENTRYP
 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	td©a
);

1500 (
APIENTRYP
 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

1501 (
APIENTRYP
 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt64
 *
	td©a
);

1502 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1503 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1504 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1505 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1506 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

1507 (
APIENTRYP
 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tmaskNumbî
, 
	tGLbôfõld
 
	tmask
);

1508 #ifde‡
GL_GLEXT_PROTOTYPES


1509 
GLAPI
 
APIENTRY
 
glDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1510 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1511 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
);

1512 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
, c⁄° 
GLöt
 *
ba£vîãx
);

1513 
GLAPI
 
APIENTRY
 
glProvokögVîãx
 (
GLíum
 
mode
);

1514 
GLAPI
 
GLsync
 
APIENTRY
 
glFí˚Sync
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

1515 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSync
 (
GLsync
 
sync
);

1516 
GLAPI
 
APIENTRY
 
glDñëeSync
 (
GLsync
 
sync
);

1517 
GLAPI
 
GLíum
 
APIENTRY
 
glClõ¡WaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1518 
GLAPI
 
APIENTRY
 
glWaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1519 
GLAPI
 
APIENTRY
 
glGëI¡egî64v
 (
GLíum
 
≤ame
, 
GLöt64
 *
d©a
);

1520 
GLAPI
 
APIENTRY
 
glGëSynciv
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

1521 
GLAPI
 
APIENTRY
 
glGëI¡egî64i_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt64
 *
d©a
);

1522 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîi64v
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt64
 *
∑øms
);

1523 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1524 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1525 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1526 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efv
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

1527 
GLAPI
 
APIENTRY
 
glSam∂eMaski
 (
GLuöt
 
maskNumbî
, 
GLbôfõld
 
mask
);

1531 #i‚de‡
GL_VERSION_3_3


1532 
	#GL_VERSION_3_3
 1

	)

1533 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

1534 
	#GL_SRC1_COLOR
 0x88F9

	)

1535 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

1536 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

1537 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

1538 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

1539 
	#GL_SAMPLER_BINDING
 0x8919

	)

1540 
	#GL_RGB10_A2UI
 0x906F

	)

1541 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

1542 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

1543 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

1544 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

1545 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

1546 
	#GL_TIME_ELAPSED
 0x88BF

	)

1547 
	#GL_TIMESTAMP
 0x8E28

	)

1548 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

1549 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

1550 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1551 (
APIENTRYP
 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
 *
	tßm∂îs
);

1552 (
APIENTRYP
 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tßm∂îs
);

1553 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

1554 (
APIENTRYP
 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

1555 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

1556 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1557 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

1558 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

1559 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1560 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øm
);

1561 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1562 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1563 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

1564 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1565 (
APIENTRYP
 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

1566 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1567 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

1568 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

1569 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1570 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1571 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1572 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1573 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1574 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1575 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1576 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1577 (
APIENTRYP
 
	tPFNGLVERTEXP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1578 (
APIENTRYP
 
	tPFNGLVERTEXP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1579 (
APIENTRYP
 
	tPFNGLVERTEXP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1580 (
APIENTRYP
 
	tPFNGLVERTEXP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1581 (
APIENTRYP
 
	tPFNGLVERTEXP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1582 (
APIENTRYP
 
	tPFNGLVERTEXP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1583 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1584 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1585 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1586 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1587 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1588 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1589 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1590 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1591 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1592 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1593 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1594 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1595 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1596 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1597 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1598 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1599 (
APIENTRYP
 
	tPFNGLNORMALP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1600 (
APIENTRYP
 
	tPFNGLNORMALP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1601 (
APIENTRYP
 
	tPFNGLCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1602 (
APIENTRYP
 
	tPFNGLCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1603 (
APIENTRYP
 
	tPFNGLCOLORP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1604 (
APIENTRYP
 
	tPFNGLCOLORP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1605 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1606 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1607 #ifde‡
GL_GLEXT_PROTOTYPES


1608 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄Indexed
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹Numbî
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

1609 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aIndex
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1610 
GLAPI
 
APIENTRY
 
glGíSam∂îs
 (
GLsizei
 
cou¡
, 
GLuöt
 *
ßm∂îs
);

1611 
GLAPI
 
APIENTRY
 
glDñëeSam∂îs
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ßm∂îs
);

1612 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSam∂î
 (
GLuöt
 
ßm∂î
);

1613 
GLAPI
 
APIENTRY
 
glBödSam∂î
 (
GLuöt
 
unô
, GLuöà
ßm∂î
);

1614 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîi
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

1615 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1616 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîf
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

1617 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

1618 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1619 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øm
);

1620 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1621 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1622 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1623 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1624 
GLAPI
 
APIENTRY
 
glQuîyCou¡î
 (
GLuöt
 
id
, 
GLíum
 
èrgë
);

1625 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

1626 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

1627 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

1628 
GLAPI
 
APIENTRY
 
glVîãxAâribP1ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1629 
GLAPI
 
APIENTRY
 
glVîãxAâribP1uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1630 
GLAPI
 
APIENTRY
 
glVîãxAâribP2ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1631 
GLAPI
 
APIENTRY
 
glVîãxAâribP2uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1632 
GLAPI
 
APIENTRY
 
glVîãxAâribP3ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1633 
GLAPI
 
APIENTRY
 
glVîãxAâribP3uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1634 
GLAPI
 
APIENTRY
 
glVîãxAâribP4ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1635 
GLAPI
 
APIENTRY
 
glVîãxAâribP4uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1636 
GLAPI
 
APIENTRY
 
glVîãxP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1637 
GLAPI
 
APIENTRY
 
glVîãxP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1638 
GLAPI
 
APIENTRY
 
glVîãxP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1639 
GLAPI
 
APIENTRY
 
glVîãxP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1640 
GLAPI
 
APIENTRY
 
glVîãxP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1641 
GLAPI
 
APIENTRY
 
glVîãxP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1642 
GLAPI
 
APIENTRY
 
glTexCo‹dP1ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1643 
GLAPI
 
APIENTRY
 
glTexCo‹dP1uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1644 
GLAPI
 
APIENTRY
 
glTexCo‹dP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1645 
GLAPI
 
APIENTRY
 
glTexCo‹dP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1646 
GLAPI
 
APIENTRY
 
glTexCo‹dP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1647 
GLAPI
 
APIENTRY
 
glTexCo‹dP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1648 
GLAPI
 
APIENTRY
 
glTexCo‹dP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1649 
GLAPI
 
APIENTRY
 
glTexCo‹dP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1650 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1651 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1652 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1653 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1654 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1655 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1656 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1657 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1658 
GLAPI
 
APIENTRY
 
glN‹mÆP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1659 
GLAPI
 
APIENTRY
 
glN‹mÆP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1660 
GLAPI
 
APIENTRY
 
glCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1661 
GLAPI
 
APIENTRY
 
glCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1662 
GLAPI
 
APIENTRY
 
glCﬁ‹P4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1663 
GLAPI
 
APIENTRY
 
glCﬁ‹P4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1664 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1665 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1669 #i‚de‡
GL_VERSION_4_0


1670 
	#GL_VERSION_4_0
 1

	)

1671 
	#GL_SAMPLE_SHADING
 0x8C36

	)

1672 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

1673 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

1674 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

1675 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

1676 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

1677 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

1678 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

1679 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

1680 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

1681 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

1682 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

1683 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

1684 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

1685 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

1686 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

1687 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

1688 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

1689 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

1690 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

1691 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

1692 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

1693 
	#GL_DOUBLE_MAT2
 0x8F46

	)

1694 
	#GL_DOUBLE_MAT3
 0x8F47

	)

1695 
	#GL_DOUBLE_MAT4
 0x8F48

	)

1696 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

1697 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

1698 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

1699 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

1700 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

1701 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

1702 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

1703 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

1704 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

1705 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

1706 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

1707 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

1708 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

1709 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

1710 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

1711 
	#GL_PATCHES
 0x000E

	)

1712 
	#GL_PATCH_VERTICES
 0x8E72

	)

1713 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

1714 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

1715 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

1716 
	#GL_TESS_GEN_MODE
 0x8E76

	)

1717 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

1718 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

1719 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

1720 
	#GL_ISOLINES
 0x8E7A

	)

1721 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

1722 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

1723 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

1724 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

1725 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

1726 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

1727 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

1728 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

1729 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

1730 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

1731 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

1732 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

1733 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

1734 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

1735 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

1736 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

1737 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

1738 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

1739 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

1740 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

1741 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

1742 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

1743 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

1744 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 0x8E23

	)

1745 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 0x8E24

	)

1746 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

1747 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

1748 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

1749 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

1750 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

1751 (
APIENTRYP
 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

1752 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

1753 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
);

1754 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
);

1755 (
APIENTRYP
 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

1756 (
APIENTRYP
 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1757 (
APIENTRYP
 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1758 (
APIENTRYP
 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1759 (
APIENTRYP
 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1760 (
APIENTRYP
 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1761 (
APIENTRYP
 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1762 (
APIENTRYP
 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1763 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1764 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1765 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1766 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1767 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1768 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1769 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1770 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1771 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1772 (
APIENTRYP
 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 *
	t∑øms
);

1773 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1774 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1775 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1776 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1777 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1778 (
APIENTRYP
 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

1779 (
APIENTRYP
 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 *
	t∑øms
);

1780 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1781 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1782 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆues
);

1783 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

1784 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

1785 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

1786 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

1787 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

1788 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

1789 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

1790 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

1791 (
APIENTRYP
 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

1792 (
APIENTRYP
 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1793 (
APIENTRYP
 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1794 #ifde‡
GL_GLEXT_PROTOTYPES


1795 
GLAPI
 
APIENTRY
 
glMöSam∂eShadög
 (
GLÊﬂt
 
vÆue
);

1796 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄i
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

1797 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

1798 
GLAPI
 
APIENTRY
 
glBÀndFunci
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

1799 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

1800 
GLAPI
 
APIENTRY
 
glDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
);

1801 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
);

1802 
GLAPI
 
APIENTRY
 
glUnif‹m1d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

1803 
GLAPI
 
APIENTRY
 
glUnif‹m2d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

1804 
GLAPI
 
APIENTRY
 
glUnif‹m3d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1805 
GLAPI
 
APIENTRY
 
glUnif‹m4d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

1806 
GLAPI
 
APIENTRY
 
glUnif‹m1dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1807 
GLAPI
 
APIENTRY
 
glUnif‹m2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1808 
GLAPI
 
APIENTRY
 
glUnif‹m3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1809 
GLAPI
 
APIENTRY
 
glUnif‹m4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1810 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1811 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1812 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1813 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1814 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1815 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1816 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1817 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1818 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1819 
GLAPI
 
APIENTRY
 
glGëUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 *
∑øms
);

1820 
GLAPI
 
GLöt
 
APIENTRY
 
glGëSubroutöeUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1821 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëSubroutöeIndex
 (GLuöà
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1822 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1823 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹mName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1824 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1825 
GLAPI
 
APIENTRY
 
glUnif‹mSubroutöesuiv
 (
GLíum
 
shadîty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ödi˚s
);

1826 
GLAPI
 
APIENTRY
 
glGëUnif‹mSubroutöeuiv
 (
GLíum
 
shadîty≥
, 
GLöt
 
loˇti⁄
, 
GLuöt
 *
∑øms
);

1827 
GLAPI
 
APIENTRY
 
glGëProgømSègeiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1828 
GLAPI
 
APIENTRY
 
glP©chP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1829 
GLAPI
 
APIENTRY
 
glP©chP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆues
);

1830 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdback
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

1831 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacks
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

1832 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

1833 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdback
 (
GLuöt
 
id
);

1834 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdback
 ();

1835 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdback
 ();

1836 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdback
 (
GLíum
 
mode
, 
GLuöt
 
id
);

1837 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåóm
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
);

1838 
GLAPI
 
APIENTRY
 
glBegöQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
id
);

1839 
GLAPI
 
APIENTRY
 
glEndQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1840 
GLAPI
 
APIENTRY
 
glGëQuîyIndexediv
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1844 #i‚de‡
GL_VERSION_4_1


1845 
	#GL_VERSION_4_1
 1

	)

1846 
	#GL_FIXED
 0x140C

	)

1847 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

1848 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

1849 
	#GL_LOW_FLOAT
 0x8DF0

	)

1850 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

1851 
	#GL_HIGH_FLOAT
 0x8DF2

	)

1852 
	#GL_LOW_INT
 0x8DF3

	)

1853 
	#GL_MEDIUM_INT
 0x8DF4

	)

1854 
	#GL_HIGH_INT
 0x8DF5

	)

1855 
	#GL_SHADER_COMPILER
 0x8DFA

	)

1856 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

1857 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

1858 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

1859 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

1860 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

1861 
	#GL_RGB565
 0x8D62

	)

1862 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

1863 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

1864 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

1865 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

1866 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

1867 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

1868 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

1869 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

1870 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

1871 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

1872 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

1873 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

1874 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

1875 
	#GL_MAX_VIEWPORTS
 0x825B

	)

1876 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

1877 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

1878 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

1879 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

1880 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

1881 (
APIENTRYP
 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

1882 (
APIENTRYP
 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° *
	tbö¨y
, GLsizeò
	tÀngth
);

1883 (
APIENTRYP
 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
 *
	tønge
, GLöà*
	t¥ecisi⁄
);

1884 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGLÊﬂt
 
	tn
, GLÊﬂà
	tf
);

1885 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGLÊﬂt
 
	td
);

1886 (
APIENTRYP
 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, *
	tbö¨y
);

1887 (
APIENTRYP
 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° *
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

1888 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1889 (
APIENTRYP
 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

1890 (
APIENTRYP
 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

1891 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rögs
);

1892 (
APIENTRYP
 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1893 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tpùñöes
);

1894 (
APIENTRYP
 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

1895 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1896 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1897 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

1898 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1899 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

1900 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1901 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
);

1902 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1903 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

1904 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1905 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

1906 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1907 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

1908 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1909 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
);

1910 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1911 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

1912 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1913 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

1914 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1915 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

1916 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1917 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
);

1918 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1919 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1920 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1921 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

1922 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1923 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

1924 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1925 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLdoubÀ 
	tv3
);

1926 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1927 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1928 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1929 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1930 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1931 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1932 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1933 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1934 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1935 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1936 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1937 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1938 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1939 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1940 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1941 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1942 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1943 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1944 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1945 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1946 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1947 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1948 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

1949 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

1950 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1951 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1952 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1953 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1954 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1955 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1956 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1957 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1958 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

1959 (
APIENTRYP
 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1960 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

1961 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1962 (
APIENTRYP
 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tv
);

1963 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1964 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1965 (
APIENTRYP
 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1966 (
APIENTRYP
 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tn
, GLdoubÀ 
	tf
);

1967 (
APIENTRYP
 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

1968 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

1969 #ifde‡
GL_GLEXT_PROTOTYPES


1970 
GLAPI
 
APIENTRY
 
glRñó£ShadîCompûî
 ();

1971 
GLAPI
 
APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° *
bö¨y
, GLsizeò
Àngth
);

1972 
GLAPI
 
APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
 *
ønge
, GLöà*
¥ecisi⁄
);

1973 
GLAPI
 
APIENTRY
 
glDïthR™gef
 (
GLÊﬂt
 
n
, GLÊﬂà
f
);

1974 
GLAPI
 
APIENTRY
 
glCÀ¨Dïthf
 (
GLÊﬂt
 
d
);

1975 
GLAPI
 
APIENTRY
 
glGëProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, *
bö¨y
);

1976 
GLAPI
 
APIENTRY
 
glProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° *
bö¨y
, 
GLsizei
 
Àngth
);

1977 
GLAPI
 
APIENTRY
 
glProgømP¨amëîi
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1978 
GLAPI
 
APIENTRY
 
glU£ProgømSèges
 (
GLuöt
 
pùñöe
, 
GLbôfõld
 
°ages
, GLuöà
¥ogøm
);

1979 
GLAPI
 
APIENTRY
 
glA˘iveShadîProgøm
 (
GLuöt
 
pùñöe
, GLuöà
¥ogøm
);

1980 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømv
 (
GLíum
 
ty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rögs
);

1981 
GLAPI
 
APIENTRY
 
glBödProgømPùñöe
 (
GLuöt
 
pùñöe
);

1982 
GLAPI
 
APIENTRY
 
glDñëeProgømPùñöes
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
pùñöes
);

1983 
GLAPI
 
APIENTRY
 
glGíProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

1984 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømPùñöe
 (
GLuöt
 
pùñöe
);

1985 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeiv
 (
GLuöt
 
pùñöe
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1986 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

1987 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1988 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

1989 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1990 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
);

1991 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1992 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

1993 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

1994 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

1995 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1996 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

1997 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1998 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
);

1999 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2000 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

2001 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2002 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

2003 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2004 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

2005 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2006 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

2007 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2008 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

2009 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2010 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

2011 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2012 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

2013 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2014 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLdoubÀ 
v3
);

2015 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2016 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

2017 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2018 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2019 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2020 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2021 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2022 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2023 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2024 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2025 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2026 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2027 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2028 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2029 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2030 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2031 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2032 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2033 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2034 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2035 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2036 
GLAPI
 
APIENTRY
 
glVÆid©eProgømPùñöe
 (
GLuöt
 
pùñöe
);

2037 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeInfoLog
 (
GLuöt
 
pùñöe
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

2038 
GLAPI
 
APIENTRY
 
glVîãxAâribL1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

2039 
GLAPI
 
APIENTRY
 
glVîãxAâribL2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

2040 
GLAPI
 
APIENTRY
 
glVîãxAâribL3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

2041 
GLAPI
 
APIENTRY
 
glVîãxAâribL4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

2042 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2043 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2044 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2045 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2046 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

2047 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

2048 
GLAPI
 
APIENTRY
 
glVõwp‹tAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

2049 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedf
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
w
, GLÊﬂà
h
);

2050 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedfv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

2051 
GLAPI
 
APIENTRY
 
glSciss‹Aºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
v
);

2052 
GLAPI
 
APIENTRY
 
glSciss‹Indexed
 (
GLuöt
 
ödex
, 
GLöt
 
À·
, GLöà
bŸtom
, 
GLsizei
 
width
, GLsizeò
height
);

2053 
GLAPI
 
APIENTRY
 
glSciss‹Indexedv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

2054 
GLAPI
 
APIENTRY
 
glDïthR™geAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

2055 
GLAPI
 
APIENTRY
 
glDïthR™geIndexed
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
n
, GLdoubÀ 
f
);

2056 
GLAPI
 
APIENTRY
 
glGëFlﬂti_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

2057 
GLAPI
 
APIENTRY
 
glGëDoubÀi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

2061 #i‚de‡
GL_VERSION_4_2


2062 
	#GL_VERSION_4_2
 1

	)

2063 
	#GL_COPY_READ_BUFFER_BINDING
 0x8F36

	)

2064 
	#GL_COPY_WRITE_BUFFER_BINDING
 0x8F37

	)

2065 
	#GL_TRANSFORM_FEEDBACK_ACTIVE
 0x8E24

	)

2066 
	#GL_TRANSFORM_FEEDBACK_PAUSED
 0x8E23

	)

2067 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

2068 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

2069 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

2070 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

2071 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

2072 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

2073 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

2074 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

2075 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

2076 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

2077 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

2078 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

2079 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

2080 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

2081 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

2082 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

2083 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

2084 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

2085 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

2086 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

2087 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

2088 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

2089 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

2090 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

2091 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

2092 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

2093 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

2094 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

2095 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

2096 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

2097 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

2098 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

2099 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

2100 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

2101 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

2102 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

2103 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

2104 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

2105 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

2106 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

2107 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

2108 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

2109 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

2110 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

2111 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

2112 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

2113 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

2114 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

2115 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

2116 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

2117 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

2118 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

2119 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

2120 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

2121 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

2122 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

2123 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

2124 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

2125 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

2126 
	#GL_IMAGE_1D
 0x904C

	)

2127 
	#GL_IMAGE_2D
 0x904D

	)

2128 
	#GL_IMAGE_3D
 0x904E

	)

2129 
	#GL_IMAGE_2D_RECT
 0x904F

	)

2130 
	#GL_IMAGE_CUBE
 0x9050

	)

2131 
	#GL_IMAGE_BUFFER
 0x9051

	)

2132 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

2133 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

2134 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

2135 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

2136 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

2137 
	#GL_INT_IMAGE_1D
 0x9057

	)

2138 
	#GL_INT_IMAGE_2D
 0x9058

	)

2139 
	#GL_INT_IMAGE_3D
 0x9059

	)

2140 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

2141 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

2142 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

2143 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

2144 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

2145 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

2146 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

2147 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

2148 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

2149 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

2150 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

2151 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

2152 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

2153 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

2154 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

2155 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

2156 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

2157 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

2158 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

2159 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

2160 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

2161 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

2162 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

2163 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

2164 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

2165 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

2166 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

2167 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

2168 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

2169 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

2170 
	#GL_COMPRESSED_RGBA_BPTC_UNORM
 0x8E8C

	)

2171 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
 0x8E8D

	)

2172 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
 0x8E8E

	)

2173 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
 0x8E8F

	)

2174 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

2175 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2176 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2177 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

2178 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

2179 (
APIENTRYP
 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2180 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

2181 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2182 (
APIENTRYP
 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2183 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2184 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2185 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tö°™˚cou¡
);

2186 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	tö°™˚cou¡
);

2187 #ifde‡
GL_GLEXT_PROTOTYPES


2188 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2189 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2190 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
, 
GLuöt
 
ba£ö°™˚
);

2191 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©iv
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt
 *
∑øms
);

2192 
GLAPI
 
APIENTRY
 
glGëA˘iveAtomicCou¡îBuf„riv
 (
GLuöt
 
¥ogøm
, GLuöà
buf„rIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2193 
GLAPI
 
APIENTRY
 
glBödImageTextuª
 (
GLuöt
 
unô
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLíum 
f‹m©
);

2194 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõr
 (
GLbôfõld
 
b¨rõrs
);

2195 
GLAPI
 
APIENTRY
 
glTexSt‹age1D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

2196 
GLAPI
 
APIENTRY
 
glTexSt‹age2D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2197 
GLAPI
 
APIENTRY
 
glTexSt‹age3D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2198 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, 
GLsizei
 
ö°™˚cou¡
);

2199 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåómIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
, 
GLsizei
 
ö°™˚cou¡
);

2203 #i‚de‡
GL_VERSION_4_3


2204 
	#GL_VERSION_4_3
 1

	)

2205 (
APIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

2206 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

2207 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

2208 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

2209 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

2210 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

2211 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

2212 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

2213 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

2214 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

2215 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

2216 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

2217 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

2218 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

2219 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

2220 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

2221 
	#GL_COMPUTE_SHADER
 0x91B9

	)

2222 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

2223 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

2224 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

2225 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

2226 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

2227 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

2228 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

2229 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

2230 
	#GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
 0x90EB

	)

2231 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

2232 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

2233 
	#GL_COMPUTE_WORK_GROUP_SIZE
 0x8267

	)

2234 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

2235 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

2236 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

2237 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

2238 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

2239 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

2240 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

2241 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

2242 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

2243 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

2244 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

2245 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

2246 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

2247 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

2248 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

2249 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

2250 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

2251 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

2252 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

2253 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

2254 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

2255 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

2256 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

2257 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

2258 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

2259 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

2260 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

2261 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

2262 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

2263 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

2264 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

2265 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

2266 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

2267 
	#GL_BUFFER
 0x82E0

	)

2268 
	#GL_SHADER
 0x82E1

	)

2269 
	#GL_PROGRAM
 0x82E2

	)

2270 
	#GL_QUERY
 0x82E3

	)

2271 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

2272 
	#GL_SAMPLER
 0x82E6

	)

2273 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

2274 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

2275 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

2276 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

2277 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

2278 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

2279 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

2280 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

2281 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

2282 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

2283 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

2284 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

2285 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

2286 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

2287 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

2288 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

2289 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

2290 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

2291 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

2292 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

2293 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

2294 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

2295 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

2296 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

2297 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

2298 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

2299 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

2300 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

2301 
	#GL_MAX_WIDTH
 0x827E

	)

2302 
	#GL_MAX_HEIGHT
 0x827F

	)

2303 
	#GL_MAX_DEPTH
 0x8280

	)

2304 
	#GL_MAX_LAYERS
 0x8281

	)

2305 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

2306 
	#GL_COLOR_COMPONENTS
 0x8283

	)

2307 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

2308 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

2309 
	#GL_COLOR_RENDERABLE
 0x8286

	)

2310 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

2311 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

2312 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

2313 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

2314 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

2315 
	#GL_READ_PIXELS
 0x828C

	)

2316 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

2317 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

2318 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

2319 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

2320 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

2321 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

2322 
	#GL_MIPMAP
 0x8293

	)

2323 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

2324 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

2325 
	#GL_COLOR_ENCODING
 0x8296

	)

2326 
	#GL_SRGB_READ
 0x8297

	)

2327 
	#GL_SRGB_WRITE
 0x8298

	)

2328 
	#GL_FILTER
 0x829A

	)

2329 
	#GL_VERTEX_TEXTURE
 0x829B

	)

2330 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

2331 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

2332 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

2333 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

2334 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

2335 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

2336 
	#GL_TEXTURE_GATHER
 0x82A2

	)

2337 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

2338 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

2339 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

2340 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

2341 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

2342 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

2343 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

2344 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

2345 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

2346 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

2347 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

2348 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

2349 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

2350 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

2351 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

2352 
	#GL_CLEAR_BUFFER
 0x82B4

	)

2353 
	#GL_TEXTURE_VIEW
 0x82B5

	)

2354 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

2355 
	#GL_FULL_SUPPORT
 0x82B7

	)

2356 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

2357 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

2358 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

2359 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

2360 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

2361 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

2362 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

2363 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

2364 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

2365 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

2366 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

2367 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

2368 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

2369 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

2370 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

2371 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

2372 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

2373 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

2374 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

2375 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

2376 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

2377 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

2378 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

2379 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

2380 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

2381 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

2382 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

2383 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

2384 
	#GL_UNIFORM
 0x92E1

	)

2385 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

2386 
	#GL_PROGRAM_INPUT
 0x92E3

	)

2387 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

2388 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

2389 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

2390 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

2391 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

2392 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

2393 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

2394 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

2395 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

2396 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

2397 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

2398 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

2399 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

2400 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

2401 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

2402 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

2403 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

2404 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

2405 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

2406 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

2407 
	#GL_NAME_LENGTH
 0x92F9

	)

2408 
	#GL_TYPE
 0x92FA

	)

2409 
	#GL_ARRAY_SIZE
 0x92FB

	)

2410 
	#GL_OFFSET
 0x92FC

	)

2411 
	#GL_BLOCK_INDEX
 0x92FD

	)

2412 
	#GL_ARRAY_STRIDE
 0x92FE

	)

2413 
	#GL_MATRIX_STRIDE
 0x92FF

	)

2414 
	#GL_IS_ROW_MAJOR
 0x9300

	)

2415 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

2416 
	#GL_BUFFER_BINDING
 0x9302

	)

2417 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

2418 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

2419 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

2420 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

2421 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

2422 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

2423 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

2424 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

2425 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

2426 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

2427 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

2428 
	#GL_LOCATION
 0x930E

	)

2429 
	#GL_LOCATION_INDEX
 0x930F

	)

2430 
	#GL_IS_PER_PATCH
 0x92E7

	)

2431 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

2432 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

2433 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

2434 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

2435 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

2436 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

2437 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

2438 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

2439 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

2440 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

2441 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

2442 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

2443 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

2444 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

2445 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x00002000

	)

2446 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 0x8F39

	)

2447 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

2448 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

2449 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

2450 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

2451 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

2452 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

2453 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

2454 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

2455 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

2456 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

2457 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

2458 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

2459 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

2460 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

2461 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

2462 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

2463 
	#GL_VERTEX_BINDING_BUFFER
 0x8F4F

	)

2464 
	#GL_DISPLAY_LIST
 0x82E7

	)

2465 (
APIENTRYP
 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2466 (
APIENTRYP
 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2467 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

2468 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

2469 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

2470 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2471 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2472 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

2473 (
APIENTRYP
 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2474 (
APIENTRYP
 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2475 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2476 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2477 (
APIENTRYP
 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

2478 (
APIENTRYP
 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2479 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2480 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2481 (
APIENTRYP
 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2482 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2483 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

2484 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

2485 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2486 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2487 (
APIENTRYP
 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

2488 (
APIENTRYP
 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2489 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2490 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2491 (
APIENTRYP
 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

2492 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2493 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2494 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2495 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2496 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

2497 (
APIENTRYP
 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

2498 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

2499 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

2500 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

2501 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

2502 (
APIENTRYP
 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
);

2503 (
APIENTRYP
 
	tPFNGLPOPDEBUGGROUPPROC
) ();

2504 (
APIENTRYP
 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2505 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2506 (
APIENTRYP
 
	tPFNGLOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2507 (
APIENTRYP
 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2508 #ifde‡
GL_GLEXT_PROTOTYPES


2509 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2510 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rSubD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2511 
GLAPI
 
APIENTRY
 
glDi•©chCompuã
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
);

2512 
GLAPI
 
APIENTRY
 
glDi•©chCompuãIndúe˘
 (
GLöçå
 
ödúe˘
);

2513 
GLAPI
 
APIENTRY
 
glC›yImageSubD©a
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
§cWidth
, GLsizeò
§cHeight
, GLsizeò
§cDïth
);

2514 
GLAPI
 
APIENTRY
 
glFømebuf„rP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

2515 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2516 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©i64v
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

2517 
GLAPI
 
APIENTRY
 
glInvÆid©eTexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

2518 
GLAPI
 
APIENTRY
 
glInvÆid©eTexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

2519 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2520 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rD©a
 (
GLuöt
 
buf„r
);

2521 
GLAPI
 
APIENTRY
 
glInvÆid©eFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

2522 
GLAPI
 
APIENTRY
 
glInvÆid©eSubFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2523 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2524 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2525 
GLAPI
 
APIENTRY
 
glGëProgømI¡îÁ˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2526 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëProgømResour˚Index
 (GLuöà
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2527 
GLAPI
 
APIENTRY
 
glGëProgømResour˚Name
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

2528 
GLAPI
 
APIENTRY
 
glGëProgømResour˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
∑øms
);

2529 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2530 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄Index
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2531 
GLAPI
 
APIENTRY
 
glShadîSt‹ageBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
°‹ageBlockIndex
, GLuöà
°‹ageBlockBödög
);

2532 
GLAPI
 
APIENTRY
 
glTexBuf„rR™ge
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2533 
GLAPI
 
APIENTRY
 
glTexSt‹age2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2534 
GLAPI
 
APIENTRY
 
glTexSt‹age3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2535 
GLAPI
 
APIENTRY
 
glTextuªVõw
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
‹igãxtuª
, GLíum 
öã∫Æf‹m©
, GLuöà
möÀvñ
, GLuöà
numÀvñs
, GLuöà
möœyî
, GLuöà
numœyîs
);

2536 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„r
 (
GLuöt
 
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2537 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2538 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2539 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2540 
GLAPI
 
APIENTRY
 
glVîãxAâribBödög
 (
GLuöt
 
©åibödex
, GLuöà
bödögödex
);

2541 
GLAPI
 
APIENTRY
 
glVîãxBödögDivis‹
 (
GLuöt
 
bödögödex
, GLuöà
divis‹
);

2542 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁ
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

2543 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£π
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

2544 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlback
 (
GLDEBUGPROC
 
ˇŒback
, c⁄° *
u£rP¨am
);

2545 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLog
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

2546 
GLAPI
 
APIENTRY
 
glPushDebugGroup
 (
GLíum
 
sour˚
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
mesßge
);

2547 
GLAPI
 
APIENTRY
 
glP›DebugGroup
 ();

2548 
GLAPI
 
APIENTRY
 
glObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2549 
GLAPI
 
APIENTRY
 
glGëObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2550 
GLAPI
 
APIENTRY
 
glObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2551 
GLAPI
 
APIENTRY
 
glGëObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2555 #i‚de‡
GL_VERSION_4_4


2556 
	#GL_VERSION_4_4
 1

	)

2557 
	#GL_MAX_VERTEX_ATTRIB_STRIDE
 0x82E5

	)

2558 
	#GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
 0x8221

	)

2559 
	#GL_TEXTURE_BUFFER_BINDING
 0x8C2A

	)

2560 
	#GL_MAP_PERSISTENT_BIT
 0x0040

	)

2561 
	#GL_MAP_COHERENT_BIT
 0x0080

	)

2562 
	#GL_DYNAMIC_STORAGE_BIT
 0x0100

	)

2563 
	#GL_CLIENT_STORAGE_BIT
 0x0200

	)

2564 
	#GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
 0x00004000

	)

2565 
	#GL_BUFFER_IMMUTABLE_STORAGE
 0x821F

	)

2566 
	#GL_BUFFER_STORAGE_FLAGS
 0x8220

	)

2567 
	#GL_CLEAR_TEXTURE
 0x9365

	)

2568 
	#GL_LOCATION_COMPONENT
 0x934A

	)

2569 
	#GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
 0x934B

	)

2570 
	#GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
 0x934C

	)

2571 
	#GL_QUERY_BUFFER
 0x9192

	)

2572 
	#GL_QUERY_BUFFER_BARRIER_BIT
 0x00008000

	)

2573 
	#GL_QUERY_BUFFER_BINDING
 0x9193

	)

2574 
	#GL_QUERY_RESULT_NO_WAIT
 0x9194

	)

2575 
	#GL_MIRROR_CLAMP_TO_EDGE
 0x8743

	)

2576 (
APIENTRYP
 
	tPFNGLBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2577 (
APIENTRYP
 
	tPFNGLCLEARTEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2578 (
APIENTRYP
 
	tPFNGLCLEARTEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2579 (
APIENTRYP
 
	tPFNGLBINDBUFFERSBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
);

2580 (
APIENTRYP
 
	tPFNGLBINDBUFFERSRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° 
	tGLsizeùå
 *
	tsizes
);

2581 (
APIENTRYP
 
	tPFNGLBINDTEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2582 (
APIENTRYP
 
	tPFNGLBINDSAMPLERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tßm∂îs
);

2583 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2584 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2585 #ifde‡
GL_GLEXT_PROTOTYPES


2586 
GLAPI
 
APIENTRY
 
glBuf„rSt‹age
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2587 
GLAPI
 
APIENTRY
 
glCÀ¨TexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2588 
GLAPI
 
APIENTRY
 
glCÀ¨TexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2589 
GLAPI
 
APIENTRY
 
glBödBuf„rsBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
);

2590 
GLAPI
 
APIENTRY
 
glBödBuf„rsR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° 
GLsizeùå
 *
sizes
);

2591 
GLAPI
 
APIENTRY
 
glBödTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2592 
GLAPI
 
APIENTRY
 
glBödSam∂îs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ßm∂îs
);

2593 
GLAPI
 
APIENTRY
 
glBödImageTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2594 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„rs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2598 #i‚de‡
GL_VERSION_4_5


2599 
	#GL_VERSION_4_5
 1

	)

2600 
	#GL_CONTEXT_LOST
 0x0507

	)

2601 
	#GL_NEGATIVE_ONE_TO_ONE
 0x935E

	)

2602 
	#GL_ZERO_TO_ONE
 0x935F

	)

2603 
	#GL_CLIP_ORIGIN
 0x935C

	)

2604 
	#GL_CLIP_DEPTH_MODE
 0x935D

	)

2605 
	#GL_QUERY_WAIT_INVERTED
 0x8E17

	)

2606 
	#GL_QUERY_NO_WAIT_INVERTED
 0x8E18

	)

2607 
	#GL_QUERY_BY_REGION_WAIT_INVERTED
 0x8E19

	)

2608 
	#GL_QUERY_BY_REGION_NO_WAIT_INVERTED
 0x8E1A

	)

2609 
	#GL_MAX_CULL_DISTANCES
 0x82F9

	)

2610 
	#GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
 0x82FA

	)

2611 
	#GL_TEXTURE_TARGET
 0x1006

	)

2612 
	#GL_QUERY_TARGET
 0x82EA

	)

2613 
	#GL_GUILTY_CONTEXT_RESET
 0x8253

	)

2614 
	#GL_INNOCENT_CONTEXT_RESET
 0x8254

	)

2615 
	#GL_UNKNOWN_CONTEXT_RESET
 0x8255

	)

2616 
	#GL_RESET_NOTIFICATION_STRATEGY
 0x8256

	)

2617 
	#GL_LOSE_CONTEXT_ON_RESET
 0x8252

	)

2618 
	#GL_NO_RESET_NOTIFICATION
 0x8261

	)

2619 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
 0x00000004

	)

2620 
	#GL_CONTEXT_RELEASE_BEHAVIOR
 0x82FB

	)

2621 
	#GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
 0x82FC

	)

2622 (
APIENTRYP
 
	tPFNGLCLIPCONTROLPROC
Ë(
	tGLíum
 
	t‹igö
, GLíum 
	tdïth
);

2623 (
APIENTRYP
 
	tPFNGLCREATETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

2624 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKBUFFERBASEPROC
Ë(
	tGLuöt
 
	txfb
, GLuöà
	tödex
, GLuöà
	tbuf„r
);

2625 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC
Ë(
	tGLuöt
 
	txfb
, GLuöà
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2626 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKIVPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2627 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKI_VPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øm
);

2628 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKI64_VPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, GLuöà
	tödex
, 
	tGLöt64
 *
	t∑øm
);

2629 (
APIENTRYP
 
	tPFNGLCREATEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

2630 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSTORAGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2631 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLíum
 
	tußge
);

2632 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

2633 (
APIENTRYP
 
	tPFNGLCOPYNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

2634 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2635 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2636 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

2637 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

2638 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2639 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2640 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2641 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERI64VPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

2642 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, **
	t∑øms
);

2643 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

2644 (
APIENTRYP
 
	tPFNGLCREATEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

2645 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

2646 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2647 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2648 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

2649 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf
);

2650 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

2651 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERREADBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t§c
);

2652 (
APIENTRYP
 
	tPFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° 
	tGLíum
 *
	t©èchmíts
);

2653 (
APIENTRYP
 
	tPFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° 
	tGLíum
 *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2654 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

2655 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERUIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLuöà*
	tvÆue
);

2656 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERFVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2657 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERFIPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

2658 (
APIENTRYP
 
	tPFNGLBLITNAMEDFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	tªadFømebuf„r
, GLuöà
	tdøwFømebuf„r
, 
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

2659 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

2660 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2661 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2662 (
APIENTRYP
 
	tPFNGLCREATERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

2663 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2664 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2665 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2666 (
APIENTRYP
 
	tPFNGLCREATETEXTURESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

2667 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

2668 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2669 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2670 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2671 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2672 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2673 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2674 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2675 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2676 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2677 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2678 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2679 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2680 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

2681 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2682 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2683 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

2684 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

2685 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2686 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

2687 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

2688 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

2689 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2690 (
APIENTRYP
 
	tPFNGLBINDTEXTUREUNITPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
);

2691 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2692 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2693 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

2694 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

2695 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

2696 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2697 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

2698 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2699 (
APIENTRYP
 
	tPFNGLCREATEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

2700 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYATTRIBPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

2701 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYATTRIBPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

2702 (
APIENTRYP
 
	tPFNGLVERTEXARRAYELEMENTBUFFERPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
);

2703 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2704 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2705 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

2706 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2707 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2708 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2709 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

2710 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYIVPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2711 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINDEXEDIVPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2712 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINDEXED64IVPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øm
);

2713 (
APIENTRYP
 
	tPFNGLCREATESAMPLERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tßm∂îs
);

2714 (
APIENTRYP
 
	tPFNGLCREATEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

2715 (
APIENTRYP
 
	tPFNGLCREATEQUERIESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

2716 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2717 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2718 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2719 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2720 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERBYREGIONPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2721 (
APIENTRYP
 
	tPFNGLGETTEXTURESUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	tpixñs
);

2722 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tbufSize
, *
	tpixñs
);

2723 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSPROC
) ();

2724 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2725 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2726 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

2727 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

2728 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

2729 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

2730 (
APIENTRYP
 
	tPFNGLREADNPIXELSPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

2731 (
APIENTRYP
 
	tPFNGLGETNMAPDVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

2732 (
APIENTRYP
 
	tPFNGLGETNMAPFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

2733 (
APIENTRYP
 
	tPFNGLGETNMAPIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

2734 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

2735 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

2736 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

2737 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

2738 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tèbÀ
);

2739 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timage
);

2740 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, *
	trow
, GLsizeò
	tcﬁumnBufSize
, *
	tcﬁumn
, *
	t•™
);

2741 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

2742 (
APIENTRYP
 
	tPFNGLGETNMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

2743 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERPROC
) ();

2744 #ifde‡
GL_GLEXT_PROTOTYPES


2745 
GLAPI
 
APIENTRY
 
glClùC⁄åﬁ
 (
GLíum
 
‹igö
, GLíum 
dïth
);

2746 
GLAPI
 
APIENTRY
 
glCª©eTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

2747 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackBuf„rBa£
 (
GLuöt
 
xfb
, GLuöà
ödex
, GLuöà
buf„r
);

2748 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackBuf„rR™ge
 (
GLuöt
 
xfb
, GLuöà
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2749 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackiv
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2750 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbacki_v
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, GLuöà
ödex
, 
GLöt
 *
∑øm
);

2751 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbacki64_v
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, GLuöà
ödex
, 
GLöt64
 *
∑øm
);

2752 
GLAPI
 
APIENTRY
 
glCª©eBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

2753 
GLAPI
 
APIENTRY
 
glNamedBuf„rSt‹age
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2754 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©a
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLíum
 
ußge
);

2755 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

2756 
GLAPI
 
APIENTRY
 
glC›yNamedBuf„rSubD©a
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

2757 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©a
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2758 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2759 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„r
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

2760 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rR™ge
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

2761 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„r
 (
GLuöt
 
buf„r
);

2762 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™ge
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2763 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîiv
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2764 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîi64v
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

2765 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrv
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, **
∑øms
);

2766 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

2767 
GLAPI
 
APIENTRY
 
glCª©eFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

2768 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

2769 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîi
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

2770 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

2771 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayî
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

2772 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rDøwBuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf
);

2773 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rDøwBuf„rs
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

2774 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRódBuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
§c
);

2775 
GLAPI
 
APIENTRY
 
glInvÆid©eNamedFømebuf„rD©a
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
numAâachmíts
, c⁄° 
GLíum
 *
©èchmíts
);

2776 
GLAPI
 
APIENTRY
 
glInvÆid©eNamedFømebuf„rSubD©a
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
numAâachmíts
, c⁄° 
GLíum
 *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2777 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„riv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

2778 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„ruiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLuöà*
vÆue
);

2779 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„rfv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

2780 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„rfi
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

2781 
GLAPI
 
APIENTRY
 
glBlôNamedFømebuf„r
 (
GLuöt
 
ªadFømebuf„r
, GLuöà
døwFømebuf„r
, 
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

2782 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètus
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

2783 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2784 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2785 
GLAPI
 
APIENTRY
 
glCª©eRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

2786 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹age
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

2787 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂e
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2788 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîiv
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2789 
GLAPI
 
APIENTRY
 
glCª©eTextuªs
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

2790 
GLAPI
 
APIENTRY
 
glTextuªBuf„r
 (
GLuöt
 
ãxtuª
, 
GLíum
 
öã∫Æf‹m©
, GLuöà
buf„r
);

2791 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™ge
 (
GLuöt
 
ãxtuª
, 
GLíum
 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2792 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
);

2793 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2794 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2795 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂e
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2796 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂e
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2797 
GLAPI
 
APIENTRY
 
glTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2798 
GLAPI
 
APIENTRY
 
glTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2799 
GLAPI
 
APIENTRY
 
glTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2800 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2801 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2802 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2803 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

2804 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

2805 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

2806 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîf
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

2807 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

2808 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîi
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

2809 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

2810 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øms
);

2811 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

2812 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠
 (
GLuöt
 
ãxtuª
);

2813 
GLAPI
 
APIENTRY
 
glBödTextuªUnô
 (
GLuöt
 
unô
, GLuöà
ãxtuª
);

2814 
GLAPI
 
APIENTRY
 
glGëTextuªImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
pixñs
);

2815 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLsizei
 
bufSize
, *
pixñs
);

2816 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

2817 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

2818 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

2819 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2820 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

2821 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2822 
GLAPI
 
APIENTRY
 
glCª©eVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

2823 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayAârib
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

2824 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayAârib
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

2825 
GLAPI
 
APIENTRY
 
glVîãxAºayEÀmítBuf„r
 (
GLuöt
 
vaobj
, GLuöà
buf„r
);

2826 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBuf„r
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2827 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBuf„rs
 (
GLuöt
 
vaobj
, GLuöà
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2828 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribBödög
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

2829 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2830 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribIF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2831 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribLF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2832 
GLAPI
 
APIENTRY
 
glVîãxAºayBödögDivis‹
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

2833 
GLAPI
 
APIENTRY
 
glGëVîãxAºayiv
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2834 
GLAPI
 
APIENTRY
 
glGëVîãxAºayIndexediv
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2835 
GLAPI
 
APIENTRY
 
glGëVîãxAºayIndexed64iv
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øm
);

2836 
GLAPI
 
APIENTRY
 
glCª©eSam∂îs
 (
GLsizei
 
n
, 
GLuöt
 *
ßm∂îs
);

2837 
GLAPI
 
APIENTRY
 
glCª©eProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

2838 
GLAPI
 
APIENTRY
 
glCª©eQuîõs
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, 
GLuöt
 *
ids
);

2839 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘i64v
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2840 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘iv
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2841 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘ui64v
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2842 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘uiv
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2843 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrByRegi⁄
 (
GLbôfõld
 
b¨rõrs
);

2844 
GLAPI
 
APIENTRY
 
glGëTextuªSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
pixñs
);

2845 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
bufSize
, *
pixñs
);

2846 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètus
 ();

2847 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
pixñs
);

2848 
GLAPI
 
APIENTRY
 
glGënTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
pixñs
);

2849 
GLAPI
 
APIENTRY
 
glGënUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

2850 
GLAPI
 
APIENTRY
 
glGënUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

2851 
GLAPI
 
APIENTRY
 
glGënUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

2852 
GLAPI
 
APIENTRY
 
glGënUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

2853 
GLAPI
 
APIENTRY
 
glRódnPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

2854 
GLAPI
 
APIENTRY
 
glGënM≠dv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

2855 
GLAPI
 
APIENTRY
 
glGënM≠fv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

2856 
GLAPI
 
APIENTRY
 
glGënM≠iv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

2857 
GLAPI
 
APIENTRY
 
glGënPixñM≠fv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

2858 
GLAPI
 
APIENTRY
 
glGënPixñM≠uiv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

2859 
GLAPI
 
APIENTRY
 
glGënPixñM≠usv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

2860 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂e
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

2861 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
èbÀ
);

2862 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
image
);

2863 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, *
row
, GLsizeò
cﬁumnBufSize
, *
cﬁumn
, *
•™
);

2864 
GLAPI
 
APIENTRY
 
glGënHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

2865 
GLAPI
 
APIENTRY
 
glGënMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

2866 
GLAPI
 
APIENTRY
 
glTextuªB¨rõr
 ();

2870 #i‚de‡
GL_ARB_ES2_com∑tibûôy


2871 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

2874 #i‚de‡
GL_ARB_ES3_1_com∑tibûôy


2875 
	#GL_ARB_ES3_1_com∑tibûôy
 1

	)

2878 #i‚de‡
GL_ARB_ES3_2_com∑tibûôy


2879 
	#GL_ARB_ES3_2_com∑tibûôy
 1

	)

2880 
	#GL_PRIMITIVE_BOUNDING_BOX_ARB
 0x92BE

	)

2881 
	#GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB
 0x9381

	)

2882 
	#GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB
 0x9382

	)

2883 (
APIENTRYP
 
	tPFNGLPRIMITIVEBOUNDINGBOXARBPROC
Ë(
	tGLÊﬂt
 
	tmöX
, GLÊﬂà
	tmöY
, GLÊﬂà
	tmöZ
, GLÊﬂà
	tmöW
, GLÊﬂà
	tmaxX
, GLÊﬂà
	tmaxY
, GLÊﬂà
	tmaxZ
, GLÊﬂà
	tmaxW
);

2884 #ifde‡
GL_GLEXT_PROTOTYPES


2885 
GLAPI
 
APIENTRY
 
glPrimôiveBoundögBoxARB
 (
GLÊﬂt
 
möX
, GLÊﬂà
möY
, GLÊﬂà
möZ
, GLÊﬂà
möW
, GLÊﬂà
maxX
, GLÊﬂà
maxY
, GLÊﬂà
maxZ
, GLÊﬂà
maxW
);

2889 #i‚de‡
GL_ARB_ES3_com∑tibûôy


2890 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

2893 #i‚de‡
GL_ARB_¨øys_of_¨øys


2894 
	#GL_ARB_¨øys_of_¨øys
 1

	)

2897 #i‚de‡
GL_ARB_ba£_ö°™˚


2898 
	#GL_ARB_ba£_ö°™˚
 1

	)

2901 #i‚de‡
GL_ARB_bödÀss_ãxtuª


2902 
	#GL_ARB_bödÀss_ãxtuª
 1

	)

2903 
uöt64_t
 
	tGLuöt64EXT
;

2904 
	#GL_UNSIGNED_INT64_ARB
 0x140F

	)

2905 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2906 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

2907 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2908 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2909 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

2910 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

2911 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2912 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2913 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

2914 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2915 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

2916 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2917 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2918 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64ARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

2919 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

2920 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

2921 #ifde‡
GL_GLEXT_PROTOTYPES


2922 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀARB
 (
GLuöt
 
ãxtuª
);

2923 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀARB
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

2924 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2925 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2926 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀARB
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

2927 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

2928 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2929 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2930 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

2931 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2932 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

2933 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2934 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2935 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64ARB
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

2936 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vARB
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

2937 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

2941 #i‚de‡
GL_ARB_bÀnd_func_exãnded


2942 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

2945 #i‚de‡
GL_ARB_buf„r_°‹age


2946 
	#GL_ARB_buf„r_°‹age
 1

	)

2949 #i‚de‡
GL_ARB_˛_evít


2950 
	#GL_ARB_˛_evít
 1

	)

2951 
_˛_c⁄ãxt
;

2952 
_˛_evít
;

2953 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

2954 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

2955 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t_˛_c⁄ãxt
 *
	tc⁄ãxt
, 
	t_˛_evít
 *
	tevít
, 
	tGLbôfõld
 
	tÊags
);

2956 #ifde‡
GL_GLEXT_PROTOTYPES


2957 
GLAPI
 
GLsync
 
APIENTRY
 
glCª©eSyncFromCLevítARB
 (
_˛_c⁄ãxt
 *
c⁄ãxt
, 
_˛_evít
 *
evít
, 
GLbôfõld
 
Êags
);

2961 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


2962 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

2965 #i‚de‡
GL_ARB_˛ór_ãxtuª


2966 
	#GL_ARB_˛ór_ãxtuª
 1

	)

2969 #i‚de‡
GL_ARB_˛ù_c⁄åﬁ


2970 
	#GL_ARB_˛ù_c⁄åﬁ
 1

	)

2973 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


2974 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

2975 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

2976 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

2977 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

2978 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

2979 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

2980 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

2981 #ifde‡
GL_GLEXT_PROTOTYPES


2982 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

2986 #i‚de‡
GL_ARB_com∑tibûôy


2987 
	#GL_ARB_com∑tibûôy
 1

	)

2990 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


2991 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

2994 #i‚de‡
GL_ARB_compuã_shadî


2995 
	#GL_ARB_compuã_shadî
 1

	)

2998 #i‚de‡
GL_ARB_compuã_v¨übÀ_group_size


2999 
	#GL_ARB_compuã_v¨übÀ_group_size
 1

	)

3000 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
 0x9344

	)

3001 
	#GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
 0x90EB

	)

3002 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
 0x9345

	)

3003 
	#GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
 0x91BF

	)

3004 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
, GLuöà
	tgroup_size_x
, GLuöà
	tgroup_size_y
, GLuöà
	tgroup_size_z
);

3005 #ifde‡
GL_GLEXT_PROTOTYPES


3006 
GLAPI
 
APIENTRY
 
glDi•©chCompuãGroupSizeARB
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
, GLuöà
group_size_x
, GLuöà
group_size_y
, GLuöà
group_size_z
);

3010 #i‚de‡
GL_ARB_c⁄dôi⁄Æ_ªndî_övîãd


3011 
	#GL_ARB_c⁄dôi⁄Æ_ªndî_övîãd
 1

	)

3014 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


3015 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

3018 #i‚de‡
GL_ARB_c›y_buf„r


3019 
	#GL_ARB_c›y_buf„r
 1

	)

3022 #i‚de‡
GL_ARB_c›y_image


3023 
	#GL_ARB_c›y_image
 1

	)

3026 #i‚de‡
GL_ARB_cuŒ_di°™˚


3027 
	#GL_ARB_cuŒ_di°™˚
 1

	)

3030 #i‚de‡
GL_ARB_debug_ouçut


3031 
	#GL_ARB_debug_ouçut
 1

	)

3032 (
APIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

3033 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

3034 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

3035 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

3036 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

3037 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

3038 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

3039 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

3040 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

3041 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

3042 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

3043 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

3044 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

3045 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

3046 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

3047 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

3048 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

3049 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

3050 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

3051 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

3052 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

3053 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

3054 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

3055 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

3056 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

3057 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

3058 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

3059 #ifde‡
GL_GLEXT_PROTOTYPES


3060 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

3061 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

3062 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackARB
 (
GLDEBUGPROCARB
 
ˇŒback
, c⁄° *
u£rP¨am
);

3063 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogARB
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

3067 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


3068 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

3071 #i‚de‡
GL_ARB_dïth_˛amp


3072 
	#GL_ARB_dïth_˛amp
 1

	)

3075 #i‚de‡
GL_ARB_dïth_ãxtuª


3076 
	#GL_ARB_dïth_ãxtuª
 1

	)

3077 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

3078 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

3079 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

3080 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

3081 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

3084 #i‚de‡
GL_ARB_dîiv©ive_c⁄åﬁ


3085 
	#GL_ARB_dîiv©ive_c⁄åﬁ
 1

	)

3088 #i‚de‡
GL_ARB_dúe˘_°©e_ac˚ss


3089 
	#GL_ARB_dúe˘_°©e_ac˚ss
 1

	)

3092 #i‚de‡
GL_ARB_døw_buf„rs


3093 
	#GL_ARB_døw_buf„rs
 1

	)

3094 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

3095 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

3096 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

3097 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

3098 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

3099 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

3100 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

3101 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

3102 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

3103 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

3104 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

3105 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

3106 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

3107 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

3108 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

3109 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

3110 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

3111 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

3112 #ifde‡
GL_GLEXT_PROTOTYPES


3113 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

3117 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


3118 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

3119 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

3120 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

3121 (
APIENTRYP
 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

3122 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

3123 #ifde‡
GL_GLEXT_PROTOTYPES


3124 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄iARB
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

3125 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

3126 
GLAPI
 
APIENTRY
 
glBÀndFunciARB
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

3127 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

3131 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


3132 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

3135 #i‚de‡
GL_ARB_døw_ödúe˘


3136 
	#GL_ARB_døw_ödúe˘
 1

	)

3139 #i‚de‡
GL_ARB_døw_ö°™˚d


3140 
	#GL_ARB_døw_ö°™˚d
 1

	)

3141 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

3142 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

3143 #ifde‡
GL_GLEXT_PROTOTYPES


3144 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dARB
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

3145 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dARB
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

3149 #i‚de‡
GL_ARB_íh™˚d_œyouts


3150 
	#GL_ARB_íh™˚d_œyouts
 1

	)

3153 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


3154 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

3157 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


3158 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

3161 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


3162 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

3165 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


3166 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

3169 #i‚de‡
GL_ARB_‰agmít_¥ogøm


3170 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

3171 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

3172 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

3173 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

3174 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

3175 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

3176 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

3177 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

3178 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

3179 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

3180 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

3181 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

3182 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

3183 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

3184 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

3185 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

3186 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

3187 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

3188 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

3189 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

3190 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

3191 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

3192 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

3193 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

3194 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

3195 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

3196 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

3197 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

3198 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

3199 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

3200 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

3201 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

3202 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

3203 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

3204 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

3205 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

3206 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

3207 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

3208 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

3209 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

3210 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

3211 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

3212 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

3213 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

3214 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

3215 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

3216 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

3217 
	#GL_MATRIX0_ARB
 0x88C0

	)

3218 
	#GL_MATRIX1_ARB
 0x88C1

	)

3219 
	#GL_MATRIX2_ARB
 0x88C2

	)

3220 
	#GL_MATRIX3_ARB
 0x88C3

	)

3221 
	#GL_MATRIX4_ARB
 0x88C4

	)

3222 
	#GL_MATRIX5_ARB
 0x88C5

	)

3223 
	#GL_MATRIX6_ARB
 0x88C6

	)

3224 
	#GL_MATRIX7_ARB
 0x88C7

	)

3225 
	#GL_MATRIX8_ARB
 0x88C8

	)

3226 
	#GL_MATRIX9_ARB
 0x88C9

	)

3227 
	#GL_MATRIX10_ARB
 0x88CA

	)

3228 
	#GL_MATRIX11_ARB
 0x88CB

	)

3229 
	#GL_MATRIX12_ARB
 0x88CC

	)

3230 
	#GL_MATRIX13_ARB
 0x88CD

	)

3231 
	#GL_MATRIX14_ARB
 0x88CE

	)

3232 
	#GL_MATRIX15_ARB
 0x88CF

	)

3233 
	#GL_MATRIX16_ARB
 0x88D0

	)

3234 
	#GL_MATRIX17_ARB
 0x88D1

	)

3235 
	#GL_MATRIX18_ARB
 0x88D2

	)

3236 
	#GL_MATRIX19_ARB
 0x88D3

	)

3237 
	#GL_MATRIX20_ARB
 0x88D4

	)

3238 
	#GL_MATRIX21_ARB
 0x88D5

	)

3239 
	#GL_MATRIX22_ARB
 0x88D6

	)

3240 
	#GL_MATRIX23_ARB
 0x88D7

	)

3241 
	#GL_MATRIX24_ARB
 0x88D8

	)

3242 
	#GL_MATRIX25_ARB
 0x88D9

	)

3243 
	#GL_MATRIX26_ARB
 0x88DA

	)

3244 
	#GL_MATRIX27_ARB
 0x88DB

	)

3245 
	#GL_MATRIX28_ARB
 0x88DC

	)

3246 
	#GL_MATRIX29_ARB
 0x88DD

	)

3247 
	#GL_MATRIX30_ARB
 0x88DE

	)

3248 
	#GL_MATRIX31_ARB
 0x88DF

	)

3249 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

3250 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

3251 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

3252 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

3253 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3254 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

3255 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

3256 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3257 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3258 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

3259 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

3260 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3261 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

3262 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

3263 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

3264 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

3265 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3266 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

3267 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3268 #ifde‡
GL_GLEXT_PROTOTYPES


3269 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

3270 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
 
èrgë
, 
GLuöt
 
¥ogøm
);

3271 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

3272 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

3273 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

3274 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

3275 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

3276 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

3277 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

3278 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

3279 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

3280 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

3281 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

3282 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

3283 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

3284 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

3285 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3286 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

3287 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
 
¥ogøm
);

3291 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


3292 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

3295 #i‚de‡
GL_ARB_‰agmít_shadî


3296 
	#GL_ARB_‰agmít_shadî
 1

	)

3297 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

3298 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

3299 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

3302 #i‚de‡
GL_ARB_‰agmít_shadî_öãæock


3303 
	#GL_ARB_‰agmít_shadî_öãæock
 1

	)

3306 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


3307 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

3310 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


3311 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

3314 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


3315 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

3318 #i‚de‡
GL_ARB_geomëry_shadî4


3319 
	#GL_ARB_geomëry_shadî4
 1

	)

3320 
	#GL_LINES_ADJACENCY_ARB
 0x000A

	)

3321 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0x000B

	)

3322 
	#GL_TRIANGLES_ADJACENCY_ARB
 0x000C

	)

3323 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0x000D

	)

3324 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

3325 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

3326 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

3327 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

3328 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

3329 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

3330 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

3331 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

3332 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

3333 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

3334 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

3335 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

3336 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

3337 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

3338 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

3339 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

3340 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

3341 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

3342 #ifde‡
GL_GLEXT_PROTOTYPES


3343 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiARB
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

3344 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

3345 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

3346 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚ARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

3350 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


3351 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

3354 #i‚de‡
GL_ARB_gë_ãxtuª_sub_image


3355 
	#GL_ARB_gë_ãxtuª_sub_image
 1

	)

3358 #i‚de‡
GL_ARB_gpu_shadî5


3359 
	#GL_ARB_gpu_shadî5
 1

	)

3362 #i‚de‡
GL_ARB_gpu_shadî_Â64


3363 
	#GL_ARB_gpu_shadî_Â64
 1

	)

3366 #i‚de‡
GL_ARB_gpu_shadî_öt64


3367 
	#GL_ARB_gpu_shadî_öt64
 1

	)

3368 
	#GL_INT64_ARB
 0x140E

	)

3369 
	#GL_INT64_VEC2_ARB
 0x8FE9

	)

3370 
	#GL_INT64_VEC3_ARB
 0x8FEA

	)

3371 
	#GL_INT64_VEC4_ARB
 0x8FEB

	)

3372 
	#GL_UNSIGNED_INT64_VEC2_ARB
 0x8FF5

	)

3373 
	#GL_UNSIGNED_INT64_VEC3_ARB
 0x8FF6

	)

3374 
	#GL_UNSIGNED_INT64_VEC4_ARB
 0x8FF7

	)

3375 (
APIENTRYP
 
	tPFNGLUNIFORM1I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
);

3376 (
APIENTRYP
 
	tPFNGLUNIFORM2I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
);

3377 (
APIENTRYP
 
	tPFNGLUNIFORM3I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
);

3378 (
APIENTRYP
 
	tPFNGLUNIFORM4I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
, GLöt64 
	tw
);

3379 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3380 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3381 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3382 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3383 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
);

3384 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
);

3385 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
);

3386 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
, GLuöt64 
	tw
);

3387 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3388 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3389 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3390 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3391 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 *
	t∑øms
);

3392 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 *
	t∑øms
);

3393 (
APIENTRYP
 
	tPFNGLGETNUNIFORMI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

3394 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt64
 *
	t∑øms
);

3395 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
);

3396 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
);

3397 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
);

3398 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
, GLöt64 
	tw
);

3399 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3400 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3401 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3402 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3403 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
);

3404 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
);

3405 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
);

3406 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
, GLuöt64 
	tw
);

3407 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3408 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3409 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3410 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3411 #ifde‡
GL_GLEXT_PROTOTYPES


3412 
GLAPI
 
APIENTRY
 
glUnif‹m1i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
);

3413 
GLAPI
 
APIENTRY
 
glUnif‹m2i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
);

3414 
GLAPI
 
APIENTRY
 
glUnif‹m3i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
);

3415 
GLAPI
 
APIENTRY
 
glUnif‹m4i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
, GLöt64 
w
);

3416 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3417 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3418 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3419 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3420 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
);

3421 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
);

3422 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
);

3423 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
, GLuöt64 
w
);

3424 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3425 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3426 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3427 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3428 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 *
∑øms
);

3429 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 *
∑øms
);

3430 
GLAPI
 
APIENTRY
 
glGënUnif‹mi64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

3431 
GLAPI
 
APIENTRY
 
glGënUnif‹mui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLuöt64
 *
∑øms
);

3432 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
);

3433 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
);

3434 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
);

3435 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
, GLöt64 
w
);

3436 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3437 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3438 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3439 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3440 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
);

3441 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
);

3442 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
);

3443 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
, GLuöt64 
w
);

3444 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3445 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3446 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3447 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3451 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


3452 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

3453 
	tGLhÆfARB
;

3454 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

3457 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


3458 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

3461 #i‚de‡
GL_ARB_imagög


3462 
	#GL_ARB_imagög
 1

	)

3463 
	#GL_BLEND_COLOR
 0x8005

	)

3464 
	#GL_BLEND_EQUATION
 0x8009

	)

3465 
	#GL_CONVOLUTION_1D
 0x8010

	)

3466 
	#GL_CONVOLUTION_2D
 0x8011

	)

3467 
	#GL_SEPARABLE_2D
 0x8012

	)

3468 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

3469 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

3470 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

3471 
	#GL_REDUCE
 0x8016

	)

3472 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

3473 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

3474 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

3475 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

3476 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

3477 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

3478 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

3479 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

3480 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

3481 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

3482 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

3483 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

3484 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

3485 
	#GL_HISTOGRAM
 0x8024

	)

3486 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

3487 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

3488 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

3489 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

3490 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

3491 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

3492 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

3493 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

3494 
	#GL_HISTOGRAM_SINK
 0x802D

	)

3495 
	#GL_MINMAX
 0x802E

	)

3496 
	#GL_MINMAX_FORMAT
 0x802F

	)

3497 
	#GL_MINMAX_SINK
 0x8030

	)

3498 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

3499 
	#GL_COLOR_MATRIX
 0x80B1

	)

3500 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

3501 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

3502 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

3503 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

3504 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

3505 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

3506 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

3507 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

3508 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

3509 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

3510 
	#GL_COLOR_TABLE
 0x80D0

	)

3511 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

3512 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

3513 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

3514 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

3515 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

3516 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

3517 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

3518 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

3519 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

3520 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

3521 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

3522 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

3523 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

3524 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

3525 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

3526 
	#GL_CONSTANT_BORDER
 0x8151

	)

3527 
	#GL_REPLICATE_BORDER
 0x8153

	)

3528 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

3529 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

3530 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3531 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3532 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3533 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

3534 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3535 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3536 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

3537 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

3538 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3539 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3540 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

3541 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3542 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

3543 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3544 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3545 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3546 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

3547 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3548 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3549 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

3550 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

3551 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3552 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3553 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3554 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3555 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3556 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3557 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3558 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3559 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

3560 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

3561 #ifde‡
GL_GLEXT_PROTOTYPES


3562 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

3563 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3564 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3565 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3566 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

3567 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3568 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3569 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

3570 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

3571 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3572 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3573 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

3574 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3575 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

3576 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3577 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3578 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

3579 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

3580 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3581 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3582 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

3583 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

3584 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3585 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3586 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3587 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3588 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3589 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3590 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3591 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3592 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
 
èrgë
);

3593 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
 
èrgë
);

3597 #i‚de‡
GL_ARB_ödúe˘_∑ømëîs


3598 
	#GL_ARB_ödúe˘_∑ømëîs
 1

	)

3599 
	#GL_PARAMETER_BUFFER_ARB
 0x80EE

	)

3600 
	#GL_PARAMETER_BUFFER_BINDING_ARB
 0x80EF

	)

3601 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3602 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3603 #ifde‡
GL_GLEXT_PROTOTYPES


3604 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘Cou¡ARB
 (
GLíum
 
mode
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3605 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘Cou¡ARB
 (
GLíum
 
mode
, GLíum 
ty≥
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3609 #i‚de‡
GL_ARB_ö°™˚d_¨øys


3610 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

3611 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

3612 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

3613 #ifde‡
GL_GLEXT_PROTOTYPES


3614 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹ARB
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

3618 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


3619 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

3622 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


3623 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

3624 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

3627 #i‚de‡
GL_ARB_övÆid©e_subd©a


3628 
	#GL_ARB_övÆid©e_subd©a
 1

	)

3631 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


3632 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

3635 #i‚de‡
GL_ARB_m≠_buf„r_ønge


3636 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

3639 #i‚de‡
GL_ARB_m©rix_∑Àâe


3640 
	#GL_ARB_m©rix_∑Àâe
 1

	)

3641 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

3642 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

3643 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

3644 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

3645 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

3646 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

3647 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

3648 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

3649 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

3650 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

3651 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

3652 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

3653 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

3654 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

3655 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

3656 #ifde‡
GL_GLEXT_PROTOTYPES


3657 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
 
ödex
);

3658 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
ödi˚s
);

3659 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
ödi˚s
);

3660 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
ödi˚s
);

3661 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

3665 #i‚de‡
GL_ARB_mu…i_böd


3666 
	#GL_ARB_mu…i_böd
 1

	)

3669 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


3670 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

3673 #i‚de‡
GL_ARB_mu…ißm∂e


3674 
	#GL_ARB_mu…ißm∂e
 1

	)

3675 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

3676 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

3677 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

3678 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

3679 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

3680 
	#GL_SAMPLES_ARB
 0x80A9

	)

3681 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

3682 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

3683 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

3684 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3685 #ifde‡
GL_GLEXT_PROTOTYPES


3686 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

3690 #i‚de‡
GL_ARB_mu…ôextuª


3691 
	#GL_ARB_mu…ôextuª
 1

	)

3692 
	#GL_TEXTURE0_ARB
 0x84C0

	)

3693 
	#GL_TEXTURE1_ARB
 0x84C1

	)

3694 
	#GL_TEXTURE2_ARB
 0x84C2

	)

3695 
	#GL_TEXTURE3_ARB
 0x84C3

	)

3696 
	#GL_TEXTURE4_ARB
 0x84C4

	)

3697 
	#GL_TEXTURE5_ARB
 0x84C5

	)

3698 
	#GL_TEXTURE6_ARB
 0x84C6

	)

3699 
	#GL_TEXTURE7_ARB
 0x84C7

	)

3700 
	#GL_TEXTURE8_ARB
 0x84C8

	)

3701 
	#GL_TEXTURE9_ARB
 0x84C9

	)

3702 
	#GL_TEXTURE10_ARB
 0x84CA

	)

3703 
	#GL_TEXTURE11_ARB
 0x84CB

	)

3704 
	#GL_TEXTURE12_ARB
 0x84CC

	)

3705 
	#GL_TEXTURE13_ARB
 0x84CD

	)

3706 
	#GL_TEXTURE14_ARB
 0x84CE

	)

3707 
	#GL_TEXTURE15_ARB
 0x84CF

	)

3708 
	#GL_TEXTURE16_ARB
 0x84D0

	)

3709 
	#GL_TEXTURE17_ARB
 0x84D1

	)

3710 
	#GL_TEXTURE18_ARB
 0x84D2

	)

3711 
	#GL_TEXTURE19_ARB
 0x84D3

	)

3712 
	#GL_TEXTURE20_ARB
 0x84D4

	)

3713 
	#GL_TEXTURE21_ARB
 0x84D5

	)

3714 
	#GL_TEXTURE22_ARB
 0x84D6

	)

3715 
	#GL_TEXTURE23_ARB
 0x84D7

	)

3716 
	#GL_TEXTURE24_ARB
 0x84D8

	)

3717 
	#GL_TEXTURE25_ARB
 0x84D9

	)

3718 
	#GL_TEXTURE26_ARB
 0x84DA

	)

3719 
	#GL_TEXTURE27_ARB
 0x84DB

	)

3720 
	#GL_TEXTURE28_ARB
 0x84DC

	)

3721 
	#GL_TEXTURE29_ARB
 0x84DD

	)

3722 
	#GL_TEXTURE30_ARB
 0x84DE

	)

3723 
	#GL_TEXTURE31_ARB
 0x84DF

	)

3724 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

3725 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

3726 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

3727 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3728 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3729 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3730 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3731 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3732 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3733 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3734 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3735 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3736 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3737 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3738 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3739 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3740 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3741 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3742 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3743 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3744 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3745 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3746 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3747 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3748 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3749 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3750 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3751 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3752 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3753 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3754 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3755 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3756 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3757 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3758 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3759 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3760 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3761 #ifde‡
GL_GLEXT_PROTOTYPES


3762 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3763 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3764 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

3765 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3766 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

3767 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3768 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

3769 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3770 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

3771 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3772 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

3773 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3774 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

3775 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3776 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

3777 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3778 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

3779 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3780 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

3781 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3782 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

3783 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3784 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

3785 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3786 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

3787 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3788 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

3789 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3790 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

3791 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3792 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

3793 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3794 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

3795 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3799 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


3800 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

3801 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

3802 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

3803 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

3804 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

3805 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

3806 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

3807 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

3808 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

3809 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

3810 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

3811 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3812 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3813 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

3814 #ifde‡
GL_GLEXT_PROTOTYPES


3815 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

3816 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

3817 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
 
id
);

3818 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

3819 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
 
èrgë
);

3820 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3821 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

3822 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

3826 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


3827 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

3830 #i‚de‡
GL_ARB_∑øŒñ_shadî_compûe


3831 
	#GL_ARB_∑øŒñ_shadî_compûe
 1

	)

3832 
	#GL_MAX_SHADER_COMPILER_THREADS_ARB
 0x91B0

	)

3833 
	#GL_COMPLETION_STATUS_ARB
 0x91B1

	)

3834 (
APIENTRYP
 
	tPFNGLMAXSHADERCOMPILERTHREADSARBPROC
Ë(
	tGLuöt
 
	tcou¡
);

3835 #ifde‡
GL_GLEXT_PROTOTYPES


3836 
GLAPI
 
APIENTRY
 
glMaxShadîCompûîThªadsARB
 (
GLuöt
 
cou¡
);

3840 #i‚de‡
GL_ARB_pùñöe_°©i°ics_quîy


3841 
	#GL_ARB_pùñöe_°©i°ics_quîy
 1

	)

3842 
	#GL_VERTICES_SUBMITTED_ARB
 0x82EE

	)

3843 
	#GL_PRIMITIVES_SUBMITTED_ARB
 0x82EF

	)

3844 
	#GL_VERTEX_SHADER_INVOCATIONS_ARB
 0x82F0

	)

3845 
	#GL_TESS_CONTROL_SHADER_PATCHES_ARB
 0x82F1

	)

3846 
	#GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
 0x82F2

	)

3847 
	#GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
 0x82F3

	)

3848 
	#GL_FRAGMENT_SHADER_INVOCATIONS_ARB
 0x82F4

	)

3849 
	#GL_COMPUTE_SHADER_INVOCATIONS_ARB
 0x82F5

	)

3850 
	#GL_CLIPPING_INPUT_PRIMITIVES_ARB
 0x82F6

	)

3851 
	#GL_CLIPPING_OUTPUT_PRIMITIVES_ARB
 0x82F7

	)

3854 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


3855 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

3856 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

3857 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

3858 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

3859 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

3862 #i‚de‡
GL_ARB_poöt_∑ømëîs


3863 
	#GL_ARB_poöt_∑ømëîs
 1

	)

3864 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

3865 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

3866 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

3867 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

3868 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3869 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3870 #ifde‡
GL_GLEXT_PROTOTYPES


3871 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

3872 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3876 #i‚de‡
GL_ARB_poöt_•rôe


3877 
	#GL_ARB_poöt_•rôe
 1

	)

3878 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

3879 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

3882 #i‚de‡
GL_ARB_po°_dïth_covîage


3883 
	#GL_ARB_po°_dïth_covîage
 1

	)

3886 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


3887 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

3890 #i‚de‡
GL_ARB_¥ovokög_vîãx


3891 
	#GL_ARB_¥ovokög_vîãx
 1

	)

3894 #i‚de‡
GL_ARB_quîy_buf„r_obje˘


3895 
	#GL_ARB_quîy_buf„r_obje˘
 1

	)

3898 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


3899 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

3902 #i‚de‡
GL_ARB_robu°√ss


3903 
	#GL_ARB_robu°√ss
 1

	)

3904 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

3905 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

3906 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

3907 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

3908 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

3909 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

3910 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

3911 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

3912 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3913 (
APIENTRYP
 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

3914 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3915 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

3916 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

3917 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

3918 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

3919 (
APIENTRYP
 
	tPFNGLGETNMAPDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

3920 (
APIENTRYP
 
	tPFNGLGETNMAPFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

3921 (
APIENTRYP
 
	tPFNGLGETNMAPIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

3922 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

3923 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

3924 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

3925 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEARBPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

3926 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tèbÀ
);

3927 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timage
);

3928 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, *
	trow
, GLsizeò
	tcﬁumnBufSize
, *
	tcﬁumn
, *
	t•™
);

3929 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3930 (
APIENTRYP
 
	tPFNGLGETNMINMAXARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3931 #ifde‡
GL_GLEXT_PROTOTYPES


3932 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètusARB
 ();

3933 
GLAPI
 
APIENTRY
 
glGënTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
img
);

3934 
GLAPI
 
APIENTRY
 
glRódnPixñsARB
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

3935 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
img
);

3936 
GLAPI
 
APIENTRY
 
glGënUnif‹mfvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

3937 
GLAPI
 
APIENTRY
 
glGënUnif‹mivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

3938 
GLAPI
 
APIENTRY
 
glGënUnif‹muivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

3939 
GLAPI
 
APIENTRY
 
glGënUnif‹mdvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

3940 
GLAPI
 
APIENTRY
 
glGënM≠dvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

3941 
GLAPI
 
APIENTRY
 
glGënM≠fvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

3942 
GLAPI
 
APIENTRY
 
glGënM≠ivARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

3943 
GLAPI
 
APIENTRY
 
glGënPixñM≠fvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

3944 
GLAPI
 
APIENTRY
 
glGënPixñM≠uivARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

3945 
GLAPI
 
APIENTRY
 
glGënPixñM≠usvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

3946 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂eARB
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

3947 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
èbÀ
);

3948 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄FûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
image
);

3949 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, *
row
, GLsizeò
cﬁumnBufSize
, *
cﬁumn
, *
•™
);

3950 
GLAPI
 
APIENTRY
 
glGënHi°ogømARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3951 
GLAPI
 
APIENTRY
 
glGënMömaxARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3955 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


3956 
	#GL_ARB_robu°√ss_isﬁ©i⁄
 1

	)

3959 #i‚de‡
GL_ARB_ßm∂e_loˇti⁄s


3960 
	#GL_ARB_ßm∂e_loˇti⁄s
 1

	)

3961 
	#GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB
 0x933D

	)

3962 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB
 0x933E

	)

3963 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB
 0x933F

	)

3964 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB
 0x9340

	)

3965 
	#GL_SAMPLE_LOCATION_ARB
 0x8E50

	)

3966 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB
 0x9341

	)

3967 
	#GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB
 0x9342

	)

3968 
	#GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB
 0x9343

	)

3969 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3970 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, GLuöà
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3971 (
APIENTRYP
 
	tPFNGLEVALUATEDEPTHVALUESARBPROC
) ();

3972 #ifde‡
GL_GLEXT_PROTOTYPES


3973 
GLAPI
 
APIENTRY
 
glFømebuf„rSam∂eLoˇti⁄sfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

3974 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rSam∂eLoˇti⁄sfvARB
 (
GLuöt
 
‰amebuf„r
, GLuöà
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

3975 
GLAPI
 
APIENTRY
 
glEvÆu©eDïthVÆuesARB
 ();

3979 #i‚de‡
GL_ARB_ßm∂e_shadög


3980 
	#GL_ARB_ßm∂e_shadög
 1

	)

3981 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

3982 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

3983 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

3984 #ifde‡
GL_GLEXT_PROTOTYPES


3985 
GLAPI
 
APIENTRY
 
glMöSam∂eShadögARB
 (
GLÊﬂt
 
vÆue
);

3989 #i‚de‡
GL_ARB_ßm∂î_obje˘s


3990 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

3993 #i‚de‡
GL_ARB_£amÀss_cube_m≠


3994 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

3997 #i‚de‡
GL_ARB_£amÀss_cubem≠_≥r_ãxtuª


3998 
	#GL_ARB_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

4001 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


4002 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

4005 #i‚de‡
GL_ARB_shadî_©omic_cou¡î_›s


4006 
	#GL_ARB_shadî_©omic_cou¡î_›s
 1

	)

4009 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


4010 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

4013 #i‚de‡
GL_ARB_shadî_bÆlŸ


4014 
	#GL_ARB_shadî_bÆlŸ
 1

	)

4017 #i‚de‡
GL_ARB_shadî_bô_ícodög


4018 
	#GL_ARB_shadî_bô_ícodög
 1

	)

4021 #i‚de‡
GL_ARB_shadî_˛ock


4022 
	#GL_ARB_shadî_˛ock
 1

	)

4025 #i‚de‡
GL_ARB_shadî_døw_∑ømëîs


4026 
	#GL_ARB_shadî_døw_∑ømëîs
 1

	)

4029 #i‚de‡
GL_ARB_shadî_group_vŸe


4030 
	#GL_ARB_shadî_group_vŸe
 1

	)

4033 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


4034 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

4037 #i‚de‡
GL_ARB_shadî_image_size


4038 
	#GL_ARB_shadî_image_size
 1

	)

4041 #i‚de‡
GL_ARB_shadî_obje˘s


4042 
	#GL_ARB_shadî_obje˘s
 1

	)

4043 #ifde‡
__APPLE__


4044 #ifde‡
BUILDING_MESA


4046 
	tGLh™dÀARB
;

4048 *
	tGLh™dÀARB
;

4051 
	tGLh™dÀARB
;

4053 
	tGLch¨ARB
;

4054 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

4055 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

4056 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

4057 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

4058 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

4059 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

4060 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

4061 
	#GL_INT_VEC2_ARB
 0x8B53

	)

4062 
	#GL_INT_VEC3_ARB
 0x8B54

	)

4063 
	#GL_INT_VEC4_ARB
 0x8B55

	)

4064 
	#GL_BOOL_ARB
 0x8B56

	)

4065 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

4066 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

4067 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

4068 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

4069 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

4070 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

4071 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

4072 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

4073 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

4074 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

4075 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

4076 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

4077 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

4078 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

4079 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

4080 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

4081 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

4082 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

4083 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

4084 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

4085 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

4086 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

4087 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

4088 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

4089 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

4090 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

4091 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

4092 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
 **
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

4093 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

4094 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

4095 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

4096 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4097 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4098 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4099 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

4100 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

4101 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

4102 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

4103 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

4104 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

4105 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

4106 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

4107 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4108 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4109 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4110 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4111 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4112 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4113 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4114 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4115 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4116 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4117 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4118 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4119 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4120 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

4121 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

4122 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4123 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4124 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

4125 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

4126 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

4127 #ifde‡
GL_GLEXT_PROTOTYPES


4128 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
 
obj
);

4129 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
 
≤ame
);

4130 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
©èchedObj
);

4131 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
 
shadîTy≥
);

4132 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
 
shadîObj
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨ARB
 **
°rög
, c⁄° 
GLöt
 *
Àngth
);

4133 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
 
shadîObj
);

4134 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

4135 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
obj
);

4136 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

4137 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
 
¥ogømObj
);

4138 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

4139 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

4140 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

4141 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

4142 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

4143 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

4144 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

4145 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

4146 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

4147 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4148 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4149 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4150 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4151 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4152 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4153 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4154 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4155 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4156 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4157 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4158 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

4159 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

4160 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
öfoLog
);

4161 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
 
c⁄èöîObj
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLh™dÀARB *
obj
);

4162 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

4163 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

4164 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

4165 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

4166 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
sour˚
);

4170 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


4171 
	#GL_ARB_shadî_¥ecisi⁄
 1

	)

4174 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


4175 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

4178 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


4179 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

4182 #i‚de‡
GL_ARB_shadî_subroutöe


4183 
	#GL_ARB_shadî_subroutöe
 1

	)

4186 #i‚de‡
GL_ARB_shadî_ãxtuª_image_ßm∂es


4187 
	#GL_ARB_shadî_ãxtuª_image_ßm∂es
 1

	)

4190 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


4191 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

4194 #i‚de‡
GL_ARB_shadî_võwp‹t_œyî_¨øy


4195 
	#GL_ARB_shadî_võwp‹t_œyî_¨øy
 1

	)

4198 #i‚de‡
GL_ARB_shadög_œnguage_100


4199 
	#GL_ARB_shadög_œnguage_100
 1

	)

4200 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

4203 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


4204 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

4207 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


4208 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

4209 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

4210 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

4211 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

4212 (
APIENTRYP
 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

4213 (
APIENTRYP
 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

4214 (
APIENTRYP
 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

4215 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

4216 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

4217 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

4218 #ifde‡
GL_GLEXT_PROTOTYPES


4219 
GLAPI
 
APIENTRY
 
glNamedSåögARB
 (
GLíum
 
ty≥
, 
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, GLöà
°rögÀn
, c⁄° GLch¨ *
°rög
);

4220 
GLAPI
 
APIENTRY
 
glDñëeNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

4221 
GLAPI
 
APIENTRY
 
glCompûeShadîIn˛udeARB
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
∑th
, c⁄° 
GLöt
 *
Àngth
);

4222 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

4223 
GLAPI
 
APIENTRY
 
glGëNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLsizei
 
bufSize
, GLöà*
°rögÀn
, GLch¨ *
°rög
);

4224 
GLAPI
 
APIENTRY
 
glGëNamedSåögivARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

4228 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


4229 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

4232 #i‚de‡
GL_ARB_shadow


4233 
	#GL_ARB_shadow
 1

	)

4234 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

4235 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

4236 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

4239 #i‚de‡
GL_ARB_shadow_ambõ¡


4240 
	#GL_ARB_shadow_ambõ¡
 1

	)

4241 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

4244 #i‚de‡
GL_ARB_•¨£_buf„r


4245 
	#GL_ARB_•¨£_buf„r
 1

	)

4246 
	#GL_SPARSE_STORAGE_BIT_ARB
 0x0400

	)

4247 
	#GL_SPARSE_BUFFER_PAGE_SIZE_ARB
 0x82F8

	)

4248 (
APIENTRYP
 
	tPFNGLBUFFERPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4249 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4250 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4251 #ifde‡
GL_GLEXT_PROTOTYPES


4252 
GLAPI
 
APIENTRY
 
glBuf„rPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4253 
GLAPI
 
APIENTRY
 
glNamedBuf„rPageCommômítEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4254 
GLAPI
 
APIENTRY
 
glNamedBuf„rPageCommômítARB
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4258 #i‚de‡
GL_ARB_•¨£_ãxtuª


4259 
	#GL_ARB_•¨£_ãxtuª
 1

	)

4260 
	#GL_TEXTURE_SPARSE_ARB
 0x91A6

	)

4261 
	#GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
 0x91A7

	)

4262 
	#GL_NUM_SPARSE_LEVELS_ARB
 0x91AA

	)

4263 
	#GL_NUM_VIRTUAL_PAGE_SIZES_ARB
 0x91A8

	)

4264 
	#GL_VIRTUAL_PAGE_SIZE_X_ARB
 0x9195

	)

4265 
	#GL_VIRTUAL_PAGE_SIZE_Y_ARB
 0x9196

	)

4266 
	#GL_VIRTUAL_PAGE_SIZE_Z_ARB
 0x9197

	)

4267 
	#GL_MAX_SPARSE_TEXTURE_SIZE_ARB
 0x9198

	)

4268 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
 0x9199

	)

4269 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
 0x919A

	)

4270 
	#GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
 0x91A9

	)

4271 (
APIENTRYP
 
	tPFNGLTEXPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tcommô
);

4272 #ifde‡
GL_GLEXT_PROTOTYPES


4273 
GLAPI
 
APIENTRY
 
glTexPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
commô
);

4277 #i‚de‡
GL_ARB_•¨£_ãxtuª2


4278 
	#GL_ARB_•¨£_ãxtuª2
 1

	)

4281 #i‚de‡
GL_ARB_•¨£_ãxtuª_˛amp


4282 
	#GL_ARB_•¨£_ãxtuª_˛amp
 1

	)

4285 #i‚de‡
GL_ARB_°ícû_ãxturög


4286 
	#GL_ARB_°ícû_ãxturög
 1

	)

4289 #i‚de‡
GL_ARB_sync


4290 
	#GL_ARB_sync
 1

	)

4293 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


4294 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

4297 #i‚de‡
GL_ARB_ãxtuª_b¨rõr


4298 
	#GL_ARB_ãxtuª_b¨rõr
 1

	)

4301 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


4302 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

4303 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

4306 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


4307 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

4308 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

4309 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

4310 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

4311 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

4312 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

4313 (
APIENTRYP
 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

4314 #ifde‡
GL_GLEXT_PROTOTYPES


4315 
GLAPI
 
APIENTRY
 
glTexBuf„rARB
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

4319 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


4320 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

4323 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


4324 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

4327 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


4328 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

4329 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

4330 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

4331 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

4332 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

4333 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

4334 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

4335 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

4336 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

4337 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

4338 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

4339 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

4340 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4341 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4342 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4343 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4344 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4345 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4346 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

4347 #ifde‡
GL_GLEXT_PROTOTYPES


4348 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4349 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4350 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4351 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4352 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4353 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4354 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

4358 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


4359 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

4360 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

4361 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

4362 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

4363 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

4366 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


4367 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

4370 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


4371 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

4372 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

4373 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

4374 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

4375 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

4376 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

4377 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

4378 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

4379 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

4380 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

4381 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

4382 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

4383 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

4386 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


4387 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

4388 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

4389 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

4390 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

4391 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

4392 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

4393 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

4394 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

4397 #i‚de‡
GL_ARB_ãxtuª_ív_add


4398 
	#GL_ARB_ãxtuª_ív_add
 1

	)

4401 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


4402 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

4403 
	#GL_COMBINE_ARB
 0x8570

	)

4404 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

4405 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

4406 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

4407 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

4408 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

4409 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

4410 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

4411 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

4412 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

4413 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

4414 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

4415 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

4416 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

4417 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

4418 
	#GL_RGB_SCALE_ARB
 0x8573

	)

4419 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

4420 
	#GL_INTERPOLATE_ARB
 0x8575

	)

4421 
	#GL_SUBTRACT_ARB
 0x84E7

	)

4422 
	#GL_CONSTANT_ARB
 0x8576

	)

4423 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

4424 
	#GL_PREVIOUS_ARB
 0x8578

	)

4427 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


4428 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

4431 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


4432 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

4433 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

4434 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

4437 #i‚de‡
GL_ARB_ãxtuª_fûãr_mömax


4438 
	#GL_ARB_ãxtuª_fûãr_mömax
 1

	)

4439 
	#GL_TEXTURE_REDUCTION_MODE_ARB
 0x9366

	)

4440 
	#GL_WEIGHTED_AVERAGE_ARB
 0x9367

	)

4443 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


4444 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

4445 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

4446 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

4447 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

4448 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

4449 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

4450 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

4451 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

4452 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

4453 
	#GL_RGBA32F_ARB
 0x8814

	)

4454 
	#GL_RGB32F_ARB
 0x8815

	)

4455 
	#GL_ALPHA32F_ARB
 0x8816

	)

4456 
	#GL_INTENSITY32F_ARB
 0x8817

	)

4457 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

4458 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

4459 
	#GL_RGBA16F_ARB
 0x881A

	)

4460 
	#GL_RGB16F_ARB
 0x881B

	)

4461 
	#GL_ALPHA16F_ARB
 0x881C

	)

4462 
	#GL_INTENSITY16F_ARB
 0x881D

	)

4463 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

4464 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

4467 #i‚de‡
GL_ARB_ãxtuª_g©hî


4468 
	#GL_ARB_ãxtuª_g©hî
 1

	)

4469 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

4470 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

4471 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
 0x8F9F

	)

4474 #i‚de‡
GL_ARB_ãxtuª_múr‹_˛amp_to_edge


4475 
	#GL_ARB_ãxtuª_múr‹_˛amp_to_edge
 1

	)

4478 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


4479 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

4480 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

4483 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


4484 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

4487 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


4488 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

4491 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


4492 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

4495 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


4496 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

4499 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


4500 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

4501 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

4502 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

4503 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

4504 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

4507 #i‚de‡
GL_ARB_ãxtuª_rg


4508 
	#GL_ARB_ãxtuª_rg
 1

	)

4511 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


4512 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

4515 #i‚de‡
GL_ARB_ãxtuª_°ícû8


4516 
	#GL_ARB_ãxtuª_°ícû8
 1

	)

4519 #i‚de‡
GL_ARB_ãxtuª_°‹age


4520 
	#GL_ARB_ãxtuª_°‹age
 1

	)

4523 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


4524 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

4527 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


4528 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

4531 #i‚de‡
GL_ARB_ãxtuª_võw


4532 
	#GL_ARB_ãxtuª_võw
 1

	)

4535 #i‚de‡
GL_ARB_timî_quîy


4536 
	#GL_ARB_timî_quîy
 1

	)

4539 #i‚de‡
GL_ARB_å™sf‹m_„edback2


4540 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

4543 #i‚de‡
GL_ARB_å™sf‹m_„edback3


4544 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

4547 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


4548 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

4551 #i‚de‡
GL_ARB_å™sf‹m_„edback_ovîÊow_quîy


4552 
	#GL_ARB_å™sf‹m_„edback_ovîÊow_quîy
 1

	)

4553 
	#GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB
 0x82EC

	)

4554 
	#GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
 0x82ED

	)

4557 #i‚de‡
GL_ARB_å™•o£_m©rix


4558 
	#GL_ARB_å™•o£_m©rix
 1

	)

4559 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

4560 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

4561 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

4562 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

4563 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4564 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4565 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4566 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4567 #ifde‡
GL_GLEXT_PROTOTYPES


4568 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4569 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4570 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4571 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4575 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


4576 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

4579 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


4580 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

4583 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


4584 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

4587 #i‚de‡
GL_ARB_vîãx_©åib_64bô


4588 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

4591 #i‚de‡
GL_ARB_vîãx_©åib_bödög


4592 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

4595 #i‚de‡
GL_ARB_vîãx_bÀnd


4596 
	#GL_ARB_vîãx_bÀnd
 1

	)

4597 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

4598 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

4599 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

4600 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

4601 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

4602 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

4603 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

4604 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

4605 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

4606 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

4607 
	#GL_MODELVIEW0_ARB
 0x1700

	)

4608 
	#GL_MODELVIEW1_ARB
 0x850A

	)

4609 
	#GL_MODELVIEW2_ARB
 0x8722

	)

4610 
	#GL_MODELVIEW3_ARB
 0x8723

	)

4611 
	#GL_MODELVIEW4_ARB
 0x8724

	)

4612 
	#GL_MODELVIEW5_ARB
 0x8725

	)

4613 
	#GL_MODELVIEW6_ARB
 0x8726

	)

4614 
	#GL_MODELVIEW7_ARB
 0x8727

	)

4615 
	#GL_MODELVIEW8_ARB
 0x8728

	)

4616 
	#GL_MODELVIEW9_ARB
 0x8729

	)

4617 
	#GL_MODELVIEW10_ARB
 0x872A

	)

4618 
	#GL_MODELVIEW11_ARB
 0x872B

	)

4619 
	#GL_MODELVIEW12_ARB
 0x872C

	)

4620 
	#GL_MODELVIEW13_ARB
 0x872D

	)

4621 
	#GL_MODELVIEW14_ARB
 0x872E

	)

4622 
	#GL_MODELVIEW15_ARB
 0x872F

	)

4623 
	#GL_MODELVIEW16_ARB
 0x8730

	)

4624 
	#GL_MODELVIEW17_ARB
 0x8731

	)

4625 
	#GL_MODELVIEW18_ARB
 0x8732

	)

4626 
	#GL_MODELVIEW19_ARB
 0x8733

	)

4627 
	#GL_MODELVIEW20_ARB
 0x8734

	)

4628 
	#GL_MODELVIEW21_ARB
 0x8735

	)

4629 
	#GL_MODELVIEW22_ARB
 0x8736

	)

4630 
	#GL_MODELVIEW23_ARB
 0x8737

	)

4631 
	#GL_MODELVIEW24_ARB
 0x8738

	)

4632 
	#GL_MODELVIEW25_ARB
 0x8739

	)

4633 
	#GL_MODELVIEW26_ARB
 0x873A

	)

4634 
	#GL_MODELVIEW27_ARB
 0x873B

	)

4635 
	#GL_MODELVIEW28_ARB
 0x873C

	)

4636 
	#GL_MODELVIEW29_ARB
 0x873D

	)

4637 
	#GL_MODELVIEW30_ARB
 0x873E

	)

4638 
	#GL_MODELVIEW31_ARB
 0x873F

	)

4639 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

4640 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

4641 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

4642 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

4643 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

4644 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

4645 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

4646 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

4647 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4648 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

4649 #ifde‡
GL_GLEXT_PROTOTYPES


4650 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
 
size
, c⁄° 
GLbyã
 *
weights
);

4651 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
 
size
, c⁄° 
GLsh‹t
 *
weights
);

4652 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
 
size
, c⁄° GLöà*
weights
);

4653 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
 
size
, c⁄° 
GLÊﬂt
 *
weights
);

4654 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
 
size
, c⁄° 
GLdoubÀ
 *
weights
);

4655 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
weights
);

4656 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
weights
);

4657 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
weights
);

4658 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4659 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
 
cou¡
);

4663 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


4664 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

4665 
±rdiff_t
 
	tGLsizeùåARB
;

4666 
±rdiff_t
 
	tGLöçåARB
;

4667 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

4668 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

4669 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

4670 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

4671 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

4672 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

4673 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

4674 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

4675 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

4676 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

4677 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

4678 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

4679 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

4680 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

4681 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

4682 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

4683 
	#GL_READ_ONLY_ARB
 0x88B8

	)

4684 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

4685 
	#GL_READ_WRITE_ARB
 0x88BA

	)

4686 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

4687 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

4688 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

4689 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

4690 
	#GL_STREAM_READ_ARB
 0x88E1

	)

4691 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

4692 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

4693 
	#GL_STATIC_READ_ARB
 0x88E5

	)

4694 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

4695 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

4696 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

4697 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

4698 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4699 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4700 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4701 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4702 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

4703 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
);

4704 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, *
	td©a
);

4705 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4706 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4707 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4708 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

4709 #ifde‡
GL_GLEXT_PROTOTYPES


4710 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

4711 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

4712 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

4713 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
 
buf„r
);

4714 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
 
èrgë
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

4715 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
);

4716 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, *
d©a
);

4717 
GLAPI
 *
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

4718 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
 
èrgë
);

4719 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

4720 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

4724 #i‚de‡
GL_ARB_vîãx_¥ogøm


4725 
	#GL_ARB_vîãx_¥ogøm
 1

	)

4726 
	#GL_COLOR_SUM_ARB
 0x8458

	)

4727 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

4728 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

4729 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

4730 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

4731 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

4732 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

4733 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

4734 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

4735 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

4736 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

4737 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

4738 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

4739 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

4740 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

4741 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

4742 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

4743 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4744 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

4745 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4746 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

4747 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4748 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4749 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4750 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4751 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4752 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4753 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4754 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4755 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4756 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4757 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4758 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4759 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4760 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4761 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4762 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4763 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

4764 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4765 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4766 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4767 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4768 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4769 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4770 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4771 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4772 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4773 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

4774 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4775 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4776 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4777 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4778 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4779 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4780 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4781 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4782 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4783 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4784 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

4785 #ifde‡
GL_GLEXT_PROTOTYPES


4786 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

4787 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4788 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

4789 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4790 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

4791 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4792 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4793 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4794 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

4795 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4796 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

4797 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4798 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4799 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4800 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4801 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4802 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4803 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4804 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4805 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4806 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4807 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

4808 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4809 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4810 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4811 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4812 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

4813 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4814 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

4815 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4816 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4817 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

4818 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4819 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4820 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4821 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4822 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4823 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4824 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4825 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

4826 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

4827 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

4828 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

4832 #i‚de‡
GL_ARB_vîãx_shadî


4833 
	#GL_ARB_vîãx_shadî
 1

	)

4834 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

4835 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

4836 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

4837 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

4838 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

4839 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

4840 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

4841 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4842 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4843 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4844 #ifde‡
GL_GLEXT_PROTOTYPES


4845 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, c⁄° 
GLch¨ARB
 *
«me
);

4846 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

4847 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

4851 #i‚de‡
GL_ARB_vîãx_ty≥_10f_11f_11f_ªv


4852 
	#GL_ARB_vîãx_ty≥_10f_11f_11f_ªv
 1

	)

4855 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


4856 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

4859 #i‚de‡
GL_ARB_võwp‹t_¨øy


4860 
	#GL_ARB_võwp‹t_¨øy
 1

	)

4863 #i‚de‡
GL_ARB_wödow_pos


4864 
	#GL_ARB_wödow_pos
 1

	)

4865 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4866 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4867 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4868 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4869 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

4870 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4871 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4872 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4873 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4874 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4875 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4876 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4877 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

4878 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4879 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4880 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4881 #ifde‡
GL_GLEXT_PROTOTYPES


4882 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4883 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4884 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

4885 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4886 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
 
x
, GLöà
y
);

4887 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *
v
);

4888 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
);

4889 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *
v
);

4890 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4891 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4892 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4893 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4894 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

4895 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *
v
);

4896 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4897 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *
v
);

4901 #i‚de‡
GL_KHR_bÀnd_equ©i⁄_adv™˚d


4902 
	#GL_KHR_bÀnd_equ©i⁄_adv™˚d
 1

	)

4903 
	#GL_MULTIPLY_KHR
 0x9294

	)

4904 
	#GL_SCREEN_KHR
 0x9295

	)

4905 
	#GL_OVERLAY_KHR
 0x9296

	)

4906 
	#GL_DARKEN_KHR
 0x9297

	)

4907 
	#GL_LIGHTEN_KHR
 0x9298

	)

4908 
	#GL_COLORDODGE_KHR
 0x9299

	)

4909 
	#GL_COLORBURN_KHR
 0x929A

	)

4910 
	#GL_HARDLIGHT_KHR
 0x929B

	)

4911 
	#GL_SOFTLIGHT_KHR
 0x929C

	)

4912 
	#GL_DIFFERENCE_KHR
 0x929E

	)

4913 
	#GL_EXCLUSION_KHR
 0x92A0

	)

4914 
	#GL_HSL_HUE_KHR
 0x92AD

	)

4915 
	#GL_HSL_SATURATION_KHR
 0x92AE

	)

4916 
	#GL_HSL_COLOR_KHR
 0x92AF

	)

4917 
	#GL_HSL_LUMINOSITY_KHR
 0x92B0

	)

4918 (
APIENTRYP
 
	tPFNGLBLENDBARRIERKHRPROC
) ();

4919 #ifde‡
GL_GLEXT_PROTOTYPES


4920 
GLAPI
 
APIENTRY
 
glBÀndB¨rõrKHR
 ();

4924 #i‚de‡
GL_KHR_bÀnd_equ©i⁄_adv™˚d_cohîít


4925 
	#GL_KHR_bÀnd_equ©i⁄_adv™˚d_cohîít
 1

	)

4926 
	#GL_BLEND_ADVANCED_COHERENT_KHR
 0x9285

	)

4929 #i‚de‡
GL_KHR_c⁄ãxt_Êush_c⁄åﬁ


4930 
	#GL_KHR_c⁄ãxt_Êush_c⁄åﬁ
 1

	)

4933 #i‚de‡
GL_KHR_debug


4934 
	#GL_KHR_debug
 1

	)

4937 #i‚de‡
GL_KHR_no_îr‹


4938 
	#GL_KHR_no_îr‹
 1

	)

4939 
	#GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
 0x00000008

	)

4942 #i‚de‡
GL_KHR_robu°_buf„r_ac˚ss_behavi‹


4943 
	#GL_KHR_robu°_buf„r_ac˚ss_behavi‹
 1

	)

4946 #i‚de‡
GL_KHR_robu°√ss


4947 
	#GL_KHR_robu°√ss
 1

	)

4948 
	#GL_CONTEXT_ROBUST_ACCESS
 0x90F3

	)

4951 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr


4952 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr
 1

	)

4953 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

4954 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

4955 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

4956 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

4957 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

4958 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

4959 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

4960 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

4961 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

4962 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

4963 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

4964 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

4965 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

4966 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

4967 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

4968 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

4969 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

4970 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

4971 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

4972 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

4973 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

4974 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

4975 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

4976 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

4977 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

4978 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

4979 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

4980 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

4983 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


4984 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

4987 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_¶i˚d_3d


4988 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_¶i˚d_3d
 1

	)

4991 #i‚de‡
GL_OES_byã_co‹dö©es


4992 
	#GL_OES_byã_co‹dö©es
 1

	)

4993 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
);

4994 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4995 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
);

4996 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4997 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

4998 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4999 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

5000 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

5001 (
APIENTRYP
 
	tPFNGLTEXCOORD1BOESPROC
Ë(
	tGLbyã
 
	ts
);

5002 (
APIENTRYP
 
	tPFNGLTEXCOORD1BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5003 (
APIENTRYP
 
	tPFNGLTEXCOORD2BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
);

5004 (
APIENTRYP
 
	tPFNGLTEXCOORD2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5005 (
APIENTRYP
 
	tPFNGLTEXCOORD3BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

5006 (
APIENTRYP
 
	tPFNGLTEXCOORD3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5007 (
APIENTRYP
 
	tPFNGLTEXCOORD4BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

5008 (
APIENTRYP
 
	tPFNGLTEXCOORD4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5009 (
APIENTRYP
 
	tPFNGLVERTEX2BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
);

5010 (
APIENTRYP
 
	tPFNGLVERTEX2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5011 (
APIENTRYP
 
	tPFNGLVERTEX3BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
);

5012 (
APIENTRYP
 
	tPFNGLVERTEX3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5013 (
APIENTRYP
 
	tPFNGLVERTEX4BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
, GLbyã 
	tw
);

5014 (
APIENTRYP
 
	tPFNGLVERTEX4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5015 #ifde‡
GL_GLEXT_PROTOTYPES


5016 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
);

5017 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5018 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
);

5019 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5020 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

5021 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5022 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

5023 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5024 
GLAPI
 
APIENTRY
 
glTexCo‹d1bOES
 (
GLbyã
 
s
);

5025 
GLAPI
 
APIENTRY
 
glTexCo‹d1bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5026 
GLAPI
 
APIENTRY
 
glTexCo‹d2bOES
 (
GLbyã
 
s
, GLbyã 
t
);

5027 
GLAPI
 
APIENTRY
 
glTexCo‹d2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5028 
GLAPI
 
APIENTRY
 
glTexCo‹d3bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

5029 
GLAPI
 
APIENTRY
 
glTexCo‹d3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5030 
GLAPI
 
APIENTRY
 
glTexCo‹d4bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

5031 
GLAPI
 
APIENTRY
 
glTexCo‹d4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5032 
GLAPI
 
APIENTRY
 
glVîãx2bOES
 (
GLbyã
 
x
, GLbyã 
y
);

5033 
GLAPI
 
APIENTRY
 
glVîãx2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5034 
GLAPI
 
APIENTRY
 
glVîãx3bOES
 (
GLbyã
 
x
, GLbyã 
y
, GLbyã 
z
);

5035 
GLAPI
 
APIENTRY
 
glVîãx3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5036 
GLAPI
 
APIENTRY
 
glVîãx4bOES
 (
GLbyã
 
x
, GLbyã 
y
, GLbyã 
z
, GLbyã 
w
);

5037 
GLAPI
 
APIENTRY
 
glVîãx4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5041 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


5042 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

5043 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

5044 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

5045 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

5046 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

5047 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

5048 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

5049 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

5050 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

5051 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

5052 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

5055 #i‚de‡
GL_OES_fixed_poöt


5056 
	#GL_OES_fixed_poöt
 1

	)

5057 
GLöt
 
	tGLfixed
;

5058 
	#GL_FIXED_OES
 0x140C

	)

5059 (
APIENTRYP
 
	tPFNGLALPHAFUNCXOESPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLfixed
 
	tªf
);

5060 (
APIENTRYP
 
	tPFNGLCLEARCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5061 (
APIENTRYP
 
	tPFNGLCLEARDEPTHXOESPROC
Ë(
	tGLfixed
 
	tdïth
);

5062 (
APIENTRYP
 
	tPFNGLCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLfixed
 *
	tequ©i⁄
);

5063 (
APIENTRYP
 
	tPFNGLCOLOR4XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5064 (
APIENTRYP
 
	tPFNGLDEPTHRANGEXOESPROC
Ë(
	tGLfixed
 
	tn
, GLfixed 
	tf
);

5065 (
APIENTRYP
 
	tPFNGLFOGXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5066 (
APIENTRYP
 
	tPFNGLFOGXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5067 (
APIENTRYP
 
	tPFNGLFRUSTUMXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

5068 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLfixed
 *
	tequ©i⁄
);

5069 (
APIENTRYP
 
	tPFNGLGETFIXEDVOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5070 (
APIENTRYP
 
	tPFNGLGETTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5071 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5072 (
APIENTRYP
 
	tPFNGLLIGHTMODELXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5073 (
APIENTRYP
 
	tPFNGLLIGHTMODELXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5074 (
APIENTRYP
 
	tPFNGLLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5075 (
APIENTRYP
 
	tPFNGLLIGHTXVOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5076 (
APIENTRYP
 
	tPFNGLLINEWIDTHXOESPROC
Ë(
	tGLfixed
 
	twidth
);

5077 (
APIENTRYP
 
	tPFNGLLOADMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5078 (
APIENTRYP
 
	tPFNGLMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5079 (
APIENTRYP
 
	tPFNGLMATERIALXVOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5080 (
APIENTRYP
 
	tPFNGLMULTMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5081 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

5082 (
APIENTRYP
 
	tPFNGLNORMAL3XOESPROC
Ë(
	tGLfixed
 
	tnx
, GLfixed 
	tny
, GLfixed 
	tnz
);

5083 (
APIENTRYP
 
	tPFNGLORTHOXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

5084 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5085 (
APIENTRYP
 
	tPFNGLPOINTSIZEXOESPROC
Ë(
	tGLfixed
 
	tsize
);

5086 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETXOESPROC
Ë(
	tGLfixed
 
	tÁ˘‹
, GLfixed 
	tunôs
);

5087 (
APIENTRYP
 
	tPFNGLROTATEXOESPROC
Ë(
	tGLfixed
 
	t™gÀ
, GLfixed 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5088 (
APIENTRYP
 
	tPFNGLSCALEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5089 (
APIENTRYP
 
	tPFNGLTEXENVXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5090 (
APIENTRYP
 
	tPFNGLTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5091 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5092 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5093 (
APIENTRYP
 
	tPFNGLTRANSLATEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5094 (
APIENTRYP
 
	tPFNGLACCUMXOESPROC
Ë(
	tGLíum
 
	t›
, 
	tGLfixed
 
	tvÆue
);

5095 (
APIENTRYP
 
	tPFNGLBITMAPXOESPROC
Ë(
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLfixed
 
	tx‹ig
, GLfixed 
	ty‹ig
, GLfixed 
	txmove
, GLfixed 
	tymove
, c⁄° 
	tGLubyã
 *
	tbôm≠
);

5096 (
APIENTRYP
 
	tPFNGLBLENDCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5097 (
APIENTRYP
 
	tPFNGLCLEARACCUMXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5098 (
APIENTRYP
 
	tPFNGLCOLOR3XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
);

5099 (
APIENTRYP
 
	tPFNGLCOLOR3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

5100 (
APIENTRYP
 
	tPFNGLCOLOR4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

5101 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5102 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5103 (
APIENTRYP
 
	tPFNGLEVALCOORD1XOESPROC
Ë(
	tGLfixed
 
	tu
);

5104 (
APIENTRYP
 
	tPFNGLEVALCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5105 (
APIENTRYP
 
	tPFNGLEVALCOORD2XOESPROC
Ë(
	tGLfixed
 
	tu
, GLfixed 
	tv
);

5106 (
APIENTRYP
 
	tPFNGLEVALCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5107 (
APIENTRYP
 
	tPFNGLFEEDBACKBUFFERXOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLfixed
 *
	tbuf„r
);

5108 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5109 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5110 (
APIENTRYP
 
	tPFNGLGETLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5111 (
APIENTRYP
 
	tPFNGLGETMAPXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLfixed
 *
	tv
);

5112 (
APIENTRYP
 
	tPFNGLGETMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5113 (
APIENTRYP
 
	tPFNGLGETPIXELMAPXVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, 
	tGLfixed
 *
	tvÆues
);

5114 (
APIENTRYP
 
	tPFNGLGETTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5115 (
APIENTRYP
 
	tPFNGLGETTEXLEVELPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5116 (
APIENTRYP
 
	tPFNGLINDEXXOESPROC
Ë(
	tGLfixed
 
	tcomp⁄ít
);

5117 (
APIENTRYP
 
	tPFNGLINDEXXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄ít
);

5118 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5119 (
APIENTRYP
 
	tPFNGLMAP1XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, GLfixed 
	tpoöts
);

5120 (
APIENTRYP
 
	tPFNGLMAP2XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLfixed 
	tv1
, GLfixed 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLfixed 
	tpoöts
);

5121 (
APIENTRYP
 
	tPFNGLMAPGRID1XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
);

5122 (
APIENTRYP
 
	tPFNGLMAPGRID2XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, GLfixed 
	tv1
, GLfixed 
	tv2
);

5123 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5124 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
);

5125 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5126 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
);

5127 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5128 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

5129 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5130 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5131 (
APIENTRYP
 
	tPFNGLNORMAL3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5132 (
APIENTRYP
 
	tPFNGLPASSTHROUGHXOESPROC
Ë(
	tGLfixed
 
	ttokí
);

5133 (
APIENTRYP
 
	tPFNGLPIXELMAPXPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, c⁄° 
	tGLfixed
 *
	tvÆues
);

5134 (
APIENTRYP
 
	tPFNGLPIXELSTOREXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5135 (
APIENTRYP
 
	tPFNGLPIXELTRANSFERXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5136 (
APIENTRYP
 
	tPFNGLPIXELZOOMXOESPROC
Ë(
	tGLfixed
 
	txÁ˘‹
, GLfixed 
	tyÁ˘‹
);

5137 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESXOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGLfixed
 *
	t¥i‹ôõs
);

5138 (
APIENTRYP
 
	tPFNGLRASTERPOS2XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

5139 (
APIENTRYP
 
	tPFNGLRASTERPOS2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5140 (
APIENTRYP
 
	tPFNGLRASTERPOS3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5141 (
APIENTRYP
 
	tPFNGLRASTERPOS3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5142 (
APIENTRYP
 
	tPFNGLRASTERPOS4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
, GLfixed 
	tw
);

5143 (
APIENTRYP
 
	tPFNGLRASTERPOS4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5144 (
APIENTRYP
 
	tPFNGLRECTXOESPROC
Ë(
	tGLfixed
 
	tx1
, GLfixed 
	ty1
, GLfixed 
	tx2
, GLfixed 
	ty2
);

5145 (
APIENTRYP
 
	tPFNGLRECTXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tv1
, c⁄° GLfixed *
	tv2
);

5146 (
APIENTRYP
 
	tPFNGLTEXCOORD1XOESPROC
Ë(
	tGLfixed
 
	ts
);

5147 (
APIENTRYP
 
	tPFNGLTEXCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5148 (
APIENTRYP
 
	tPFNGLTEXCOORD2XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
);

5149 (
APIENTRYP
 
	tPFNGLTEXCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5150 (
APIENTRYP
 
	tPFNGLTEXCOORD3XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

5151 (
APIENTRYP
 
	tPFNGLTEXCOORD3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5152 (
APIENTRYP
 
	tPFNGLTEXCOORD4XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

5153 (
APIENTRYP
 
	tPFNGLTEXCOORD4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5154 (
APIENTRYP
 
	tPFNGLTEXGENXOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5155 (
APIENTRYP
 
	tPFNGLTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5156 (
APIENTRYP
 
	tPFNGLVERTEX2XOESPROC
Ë(
	tGLfixed
 
	tx
);

5157 (
APIENTRYP
 
	tPFNGLVERTEX2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5158 (
APIENTRYP
 
	tPFNGLVERTEX3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

5159 (
APIENTRYP
 
	tPFNGLVERTEX3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5160 (
APIENTRYP
 
	tPFNGLVERTEX4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5161 (
APIENTRYP
 
	tPFNGLVERTEX4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5162 #ifde‡
GL_GLEXT_PROTOTYPES


5163 
GLAPI
 
APIENTRY
 
glAÕhaFuncxOES
 (
GLíum
 
func
, 
GLfixed
 
ªf
);

5164 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5165 
GLAPI
 
APIENTRY
 
glCÀ¨DïthxOES
 (
GLfixed
 
dïth
);

5166 
GLAPI
 
APIENTRY
 
glClùPœ√xOES
 (
GLíum
 
∂™e
, c⁄° 
GLfixed
 *
equ©i⁄
);

5167 
GLAPI
 
APIENTRY
 
glCﬁ‹4xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5168 
GLAPI
 
APIENTRY
 
glDïthR™gexOES
 (
GLfixed
 
n
, GLfixed 
f
);

5169 
GLAPI
 
APIENTRY
 
glFogxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5170 
GLAPI
 
APIENTRY
 
glFogxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5171 
GLAPI
 
APIENTRY
 
glFru°umxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

5172 
GLAPI
 
APIENTRY
 
glGëClùPœ√xOES
 (
GLíum
 
∂™e
, 
GLfixed
 *
equ©i⁄
);

5173 
GLAPI
 
APIENTRY
 
glGëFixedvOES
 (
GLíum
 
≤ame
, 
GLfixed
 *
∑øms
);

5174 
GLAPI
 
APIENTRY
 
glGëTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5175 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5176 
GLAPI
 
APIENTRY
 
glLightModñxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5177 
GLAPI
 
APIENTRY
 
glLightModñxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5178 
GLAPI
 
APIENTRY
 
glLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5179 
GLAPI
 
APIENTRY
 
glLightxvOES
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5180 
GLAPI
 
APIENTRY
 
glLöeWidthxOES
 (
GLfixed
 
width
);

5181 
GLAPI
 
APIENTRY
 
glLﬂdM©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5182 
GLAPI
 
APIENTRY
 
glM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5183 
GLAPI
 
APIENTRY
 
glM©îülxvOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5184 
GLAPI
 
APIENTRY
 
glMu…M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5185 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

5186 
GLAPI
 
APIENTRY
 
glN‹mÆ3xOES
 (
GLfixed
 
nx
, GLfixed 
ny
, GLfixed 
nz
);

5187 
GLAPI
 
APIENTRY
 
glOπhoxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

5188 
GLAPI
 
APIENTRY
 
glPoötP¨amëîxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5189 
GLAPI
 
APIENTRY
 
glPoötSizexOES
 (
GLfixed
 
size
);

5190 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£txOES
 (
GLfixed
 
Á˘‹
, GLfixed 
unôs
);

5191 
GLAPI
 
APIENTRY
 
glRŸ©exOES
 (
GLfixed
 
™gÀ
, GLfixed 
x
, GLfixed 
y
, GLfixed 
z
);

5192 
GLAPI
 
APIENTRY
 
glSˇÀxOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5193 
GLAPI
 
APIENTRY
 
glTexEnvxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5194 
GLAPI
 
APIENTRY
 
glTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5195 
GLAPI
 
APIENTRY
 
glTexP¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5196 
GLAPI
 
APIENTRY
 
glTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5197 
GLAPI
 
APIENTRY
 
glTøn¶©exOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5198 
GLAPI
 
APIENTRY
 
glAccumxOES
 (
GLíum
 
›
, 
GLfixed
 
vÆue
);

5199 
GLAPI
 
APIENTRY
 
glBôm≠xOES
 (
GLsizei
 
width
, GLsizeò
height
, 
GLfixed
 
x‹ig
, GLfixed 
y‹ig
, GLfixed 
xmove
, GLfixed 
ymove
, c⁄° 
GLubyã
 *
bôm≠
);

5200 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5201 
GLAPI
 
APIENTRY
 
glCÀ¨AccumxOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5202 
GLAPI
 
APIENTRY
 
glCﬁ‹3xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
);

5203 
GLAPI
 
APIENTRY
 
glCﬁ‹3xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

5204 
GLAPI
 
APIENTRY
 
glCﬁ‹4xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

5205 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5206 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5207 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xOES
 (
GLfixed
 
u
);

5208 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5209 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xOES
 (
GLfixed
 
u
, GLfixed 
v
);

5210 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5211 
GLAPI
 
APIENTRY
 
glFìdbackBuf„rxOES
 (
GLsizei
 
n
, 
GLíum
 
ty≥
, c⁄° 
GLfixed
 *
buf„r
);

5212 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5213 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5214 
GLAPI
 
APIENTRY
 
glGëLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5215 
GLAPI
 
APIENTRY
 
glGëM≠xvOES
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLfixed
 *
v
);

5216 
GLAPI
 
APIENTRY
 
glGëM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5217 
GLAPI
 
APIENTRY
 
glGëPixñM≠xv
 (
GLíum
 
m≠
, 
GLöt
 
size
, 
GLfixed
 *
vÆues
);

5218 
GLAPI
 
APIENTRY
 
glGëTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5219 
GLAPI
 
APIENTRY
 
glGëTexLevñP¨amëîxvOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5220 
GLAPI
 
APIENTRY
 
glIndexxOES
 (
GLfixed
 
comp⁄ít
);

5221 
GLAPI
 
APIENTRY
 
glIndexxvOES
 (c⁄° 
GLfixed
 *
comp⁄ít
);

5222 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5223 
GLAPI
 
APIENTRY
 
glM≠1xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, GLfixed 
poöts
);

5224 
GLAPI
 
APIENTRY
 
glM≠2xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLfixed 
v1
, GLfixed 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLfixed 
poöts
);

5225 
GLAPI
 
APIENTRY
 
glM≠Grid1xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
);

5226 
GLAPI
 
APIENTRY
 
glM≠Grid2xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
, GLfixed 
v1
, GLfixed 
v2
);

5227 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5228 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
);

5229 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5230 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
);

5231 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5232 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

5233 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5234 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5235 
GLAPI
 
APIENTRY
 
glN‹mÆ3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5236 
GLAPI
 
APIENTRY
 
glPassThroughxOES
 (
GLfixed
 
tokí
);

5237 
GLAPI
 
APIENTRY
 
glPixñM≠x
 (
GLíum
 
m≠
, 
GLöt
 
size
, c⁄° 
GLfixed
 *
vÆues
);

5238 
GLAPI
 
APIENTRY
 
glPixñSt‹ex
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5239 
GLAPI
 
APIENTRY
 
glPixñTøns„rxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5240 
GLAPI
 
APIENTRY
 
glPixñZoomxOES
 (
GLfixed
 
xÁ˘‹
, GLfixed 
yÁ˘‹
);

5241 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsxOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GLfixed
 *
¥i‹ôõs
);

5242 
GLAPI
 
APIENTRY
 
glRa°îPos2xOES
 (
GLfixed
 
x
, GLfixed 
y
);

5243 
GLAPI
 
APIENTRY
 
glRa°îPos2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5244 
GLAPI
 
APIENTRY
 
glRa°îPos3xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5245 
GLAPI
 
APIENTRY
 
glRa°îPos3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5246 
GLAPI
 
APIENTRY
 
glRa°îPos4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
, GLfixed 
w
);

5247 
GLAPI
 
APIENTRY
 
glRa°îPos4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5248 
GLAPI
 
APIENTRY
 
glRe˘xOES
 (
GLfixed
 
x1
, GLfixed 
y1
, GLfixed 
x2
, GLfixed 
y2
);

5249 
GLAPI
 
APIENTRY
 
glRe˘xvOES
 (c⁄° 
GLfixed
 *
v1
, c⁄° GLfixed *
v2
);

5250 
GLAPI
 
APIENTRY
 
glTexCo‹d1xOES
 (
GLfixed
 
s
);

5251 
GLAPI
 
APIENTRY
 
glTexCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5252 
GLAPI
 
APIENTRY
 
glTexCo‹d2xOES
 (
GLfixed
 
s
, GLfixed 
t
);

5253 
GLAPI
 
APIENTRY
 
glTexCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5254 
GLAPI
 
APIENTRY
 
glTexCo‹d3xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

5255 
GLAPI
 
APIENTRY
 
glTexCo‹d3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5256 
GLAPI
 
APIENTRY
 
glTexCo‹d4xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

5257 
GLAPI
 
APIENTRY
 
glTexCo‹d4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5258 
GLAPI
 
APIENTRY
 
glTexGíxOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5259 
GLAPI
 
APIENTRY
 
glTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5260 
GLAPI
 
APIENTRY
 
glVîãx2xOES
 (
GLfixed
 
x
);

5261 
GLAPI
 
APIENTRY
 
glVîãx2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5262 
GLAPI
 
APIENTRY
 
glVîãx3xOES
 (
GLfixed
 
x
, GLfixed 
y
);

5263 
GLAPI
 
APIENTRY
 
glVîãx3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5264 
GLAPI
 
APIENTRY
 
glVîãx4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5265 
GLAPI
 
APIENTRY
 
glVîãx4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5269 #i‚de‡
GL_OES_quîy_m©rix


5270 
	#GL_OES_quîy_m©rix
 1

	)

5271 
GLbôfõld
 (
	tAPIENTRYP
 
	tPFNGLQUERYMATRIXXOESPROC
Ë(
	tGLfixed
 *
	tm™tisß
, 
	tGLöt
 *
	texp⁄ít
);

5272 #ifde‡
GL_GLEXT_PROTOTYPES


5273 
GLAPI
 
GLbôfõld
 
APIENTRY
 
glQuîyM©rixxOES
 (
GLfixed
 *
m™tisß
, 
GLöt
 *
exp⁄ít
);

5277 #i‚de‡
GL_OES_ªad_f‹m©


5278 
	#GL_OES_ªad_f‹m©
 1

	)

5279 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

5280 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

5283 #i‚de‡
GL_OES_sögÀ_¥ecisi⁄


5284 
	#GL_OES_sögÀ_¥ecisi⁄
 1

	)

5285 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFOESPROC
Ë(
	tGL˛ampf
 
	tdïth
);

5286 (
APIENTRYP
 
	tPFNGLCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLÊﬂt
 *
	tequ©i⁄
);

5287 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFOESPROC
Ë(
	tGL˛ampf
 
	tn
, GL˛amp‡
	tf
);

5288 (
APIENTRYP
 
	tPFNGLFRUSTUMFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

5289 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLÊﬂt
 *
	tequ©i⁄
);

5290 (
APIENTRYP
 
	tPFNGLORTHOFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

5291 #ifde‡
GL_GLEXT_PROTOTYPES


5292 
GLAPI
 
APIENTRY
 
glCÀ¨DïthfOES
 (
GL˛ampf
 
dïth
);

5293 
GLAPI
 
APIENTRY
 
glClùPœ√fOES
 (
GLíum
 
∂™e
, c⁄° 
GLÊﬂt
 *
equ©i⁄
);

5294 
GLAPI
 
APIENTRY
 
glDïthR™gefOES
 (
GL˛ampf
 
n
, GL˛amp‡
f
);

5295 
GLAPI
 
APIENTRY
 
glFru°umfOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

5296 
GLAPI
 
APIENTRY
 
glGëClùPœ√fOES
 (
GLíum
 
∂™e
, 
GLÊﬂt
 *
equ©i⁄
);

5297 
GLAPI
 
APIENTRY
 
glOπhofOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

5301 #i‚de‡
GL_3DFX_mu…ißm∂e


5302 
	#GL_3DFX_mu…ißm∂e
 1

	)

5303 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

5304 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

5305 
	#GL_SAMPLES_3DFX
 0x86B4

	)

5306 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

5309 #i‚de‡
GL_3DFX_tbuf„r


5310 
	#GL_3DFX_tbuf„r
 1

	)

5311 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

5312 #ifde‡
GL_GLEXT_PROTOTYPES


5313 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
 
mask
);

5317 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


5318 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

5319 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

5320 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

5323 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


5324 
	#GL_AMD_bÀnd_mömax_Á˘‹
 1

	)

5325 
	#GL_FACTOR_MIN_AMD
 0x901C

	)

5326 
	#GL_FACTOR_MAX_AMD
 0x901D

	)

5329 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


5330 
	#GL_AMD_c⁄£rv©ive_dïth
 1

	)

5333 #i‚de‡
GL_AMD_debug_ouçut


5334 
	#GL_AMD_debug_ouçut
 1

	)

5335 (
APIENTRY
 *
	tGLDEBUGPROCAMD
)(
	tGLuöt
 
	tid
,
	tGLíum
 
	tˇãg‹y
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,*
	tu£rP¨am
);

5336 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
 0x9143

	)

5337 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
 0x9144

	)

5338 
	#GL_DEBUG_LOGGED_MESSAGES_AMD
 0x9145

	)

5339 
	#GL_DEBUG_SEVERITY_HIGH_AMD
 0x9146

	)

5340 
	#GL_DEBUG_SEVERITY_MEDIUM_AMD
 0x9147

	)

5341 
	#GL_DEBUG_SEVERITY_LOW_AMD
 0x9148

	)

5342 
	#GL_DEBUG_CATEGORY_API_ERROR_AMD
 0x9149

	)

5343 
	#GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
 0x914A

	)

5344 
	#GL_DEBUG_CATEGORY_DEPRECATION_AMD
 0x914B

	)

5345 
	#GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
 0x914C

	)

5346 
	#GL_DEBUG_CATEGORY_PERFORMANCE_AMD
 0x914D

	)

5347 
	#GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
 0x914E

	)

5348 
	#GL_DEBUG_CATEGORY_APPLICATION_AMD
 0x914F

	)

5349 
	#GL_DEBUG_CATEGORY_OTHER_AMD
 0x9150

	)

5350 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEENABLEAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

5351 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

5352 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKAMDPROC
Ë(
	tGLDEBUGPROCAMD
 
	tˇŒback
, *
	tu£rP¨am
);

5353 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGAMDPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tˇãg‹õs
, GLuöà*
	t£vîôõs
, GLuöà*
	tids
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßge
);

5354 #ifde‡
GL_GLEXT_PROTOTYPES


5355 
GLAPI
 
APIENTRY
 
glDebugMesßgeE«bÀAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

5356 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

5357 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackAMD
 (
GLDEBUGPROCAMD
 
ˇŒback
, *
u£rP¨am
);

5358 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogAMD
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
ˇãg‹õs
, GLuöà*
£vîôõs
, GLuöà*
ids
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßge
);

5362 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


5363 
	#GL_AMD_dïth_˛amp_£∑øã
 1

	)

5364 
	#GL_DEPTH_CLAMP_NEAR_AMD
 0x901E

	)

5365 
	#GL_DEPTH_CLAMP_FAR_AMD
 0x901F

	)

5368 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


5369 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

5370 (
APIENTRYP
 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

5371 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

5372 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

5373 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

5374 #ifde‡
GL_GLEXT_PROTOTYPES


5375 
GLAPI
 
APIENTRY
 
glBÀndFuncIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

5376 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

5377 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄IndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

5378 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

5382 #i‚de‡
GL_AMD_g˙_shadî


5383 
	#GL_AMD_g˙_shadî
 1

	)

5386 #i‚de‡
GL_AMD_gpu_shadî_öt64


5387 
	#GL_AMD_gpu_shadî_öt64
 1

	)

5388 
öt64_t
 
	tGLöt64EXT
;

5389 
	#GL_INT64_NV
 0x140E

	)

5390 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

5391 
	#GL_INT8_NV
 0x8FE0

	)

5392 
	#GL_INT8_VEC2_NV
 0x8FE1

	)

5393 
	#GL_INT8_VEC3_NV
 0x8FE2

	)

5394 
	#GL_INT8_VEC4_NV
 0x8FE3

	)

5395 
	#GL_INT16_NV
 0x8FE4

	)

5396 
	#GL_INT16_VEC2_NV
 0x8FE5

	)

5397 
	#GL_INT16_VEC3_NV
 0x8FE6

	)

5398 
	#GL_INT16_VEC4_NV
 0x8FE7

	)

5399 
	#GL_INT64_VEC2_NV
 0x8FE9

	)

5400 
	#GL_INT64_VEC3_NV
 0x8FEA

	)

5401 
	#GL_INT64_VEC4_NV
 0x8FEB

	)

5402 
	#GL_UNSIGNED_INT8_NV
 0x8FEC

	)

5403 
	#GL_UNSIGNED_INT8_VEC2_NV
 0x8FED

	)

5404 
	#GL_UNSIGNED_INT8_VEC3_NV
 0x8FEE

	)

5405 
	#GL_UNSIGNED_INT8_VEC4_NV
 0x8FEF

	)

5406 
	#GL_UNSIGNED_INT16_NV
 0x8FF0

	)

5407 
	#GL_UNSIGNED_INT16_VEC2_NV
 0x8FF1

	)

5408 
	#GL_UNSIGNED_INT16_VEC3_NV
 0x8FF2

	)

5409 
	#GL_UNSIGNED_INT16_VEC4_NV
 0x8FF3

	)

5410 
	#GL_UNSIGNED_INT64_VEC2_NV
 0x8FF5

	)

5411 
	#GL_UNSIGNED_INT64_VEC3_NV
 0x8FF6

	)

5412 
	#GL_UNSIGNED_INT64_VEC4_NV
 0x8FF7

	)

5413 
	#GL_FLOAT16_NV
 0x8FF8

	)

5414 
	#GL_FLOAT16_VEC2_NV
 0x8FF9

	)

5415 
	#GL_FLOAT16_VEC3_NV
 0x8FFA

	)

5416 
	#GL_FLOAT16_VEC4_NV
 0x8FFB

	)

5417 (
APIENTRYP
 
	tPFNGLUNIFORM1I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

5418 (
APIENTRYP
 
	tPFNGLUNIFORM2I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

5419 (
APIENTRYP
 
	tPFNGLUNIFORM3I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

5420 (
APIENTRYP
 
	tPFNGLUNIFORM4I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

5421 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5422 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5423 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5424 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5425 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

5426 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

5427 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

5428 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

5429 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5430 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5431 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5432 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5433 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 *
	t∑øms
);

5434 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 *
	t∑øms
);

5435 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

5436 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

5437 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

5438 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

5439 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5440 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5441 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5442 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5443 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

5444 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

5445 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

5446 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

5447 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5448 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5449 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5450 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5451 #ifde‡
GL_GLEXT_PROTOTYPES


5452 
GLAPI
 
APIENTRY
 
glUnif‹m1i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

5453 
GLAPI
 
APIENTRY
 
glUnif‹m2i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

5454 
GLAPI
 
APIENTRY
 
glUnif‹m3i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

5455 
GLAPI
 
APIENTRY
 
glUnif‹m4i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

5456 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5457 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5458 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5459 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5460 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

5461 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

5462 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

5463 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

5464 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5465 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5466 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5467 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5468 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 *
∑øms
);

5469 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 *
∑øms
);

5470 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

5471 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

5472 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

5473 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

5474 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5475 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5476 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5477 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5478 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

5479 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

5480 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

5481 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

5482 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5483 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5484 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5485 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5489 #i‚de‡
GL_AMD_öãæóved_ñemíts


5490 
	#GL_AMD_öãæóved_ñemíts
 1

	)

5491 
	#GL_VERTEX_ELEMENT_SWIZZLE_AMD
 0x91A4

	)

5492 
	#GL_VERTEX_ID_SWIZZLE_AMD
 0x91A5

	)

5493 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPARAMETERIAMDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5494 #ifde‡
GL_GLEXT_PROTOTYPES


5495 
GLAPI
 
APIENTRY
 
glVîãxAâribP¨amëîiAMD
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5499 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


5500 
	#GL_AMD_mu…i_døw_ödúe˘
 1

	)

5501 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

5502 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

5503 #ifde‡
GL_GLEXT_PROTOTYPES


5504 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘AMD
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

5505 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘AMD
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

5509 #i‚de‡
GL_AMD_«me_gí_dñëe


5510 
	#GL_AMD_«me_gí_dñëe
 1

	)

5511 
	#GL_DATA_BUFFER_AMD
 0x9151

	)

5512 
	#GL_PERFORMANCE_MONITOR_AMD
 0x9152

	)

5513 
	#GL_QUERY_OBJECT_AMD
 0x9153

	)

5514 
	#GL_VERTEX_ARRAY_OBJECT_AMD
 0x9154

	)

5515 
	#GL_SAMPLER_OBJECT_AMD
 0x9155

	)

5516 (
APIENTRYP
 
	tPFNGLGENNAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, GLuöà*
	t«mes
);

5517 (
APIENTRYP
 
	tPFNGLDELETENAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, c⁄° GLuöà*
	t«mes
);

5518 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
);

5519 #ifde‡
GL_GLEXT_PROTOTYPES


5520 
GLAPI
 
APIENTRY
 
glGíNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, GLuöà*
«mes
);

5521 
GLAPI
 
APIENTRY
 
glDñëeNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, c⁄° GLuöà*
«mes
);

5522 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNameAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
);

5526 #i‚de‡
GL_AMD_oc˛usi⁄_quîy_evít


5527 
	#GL_AMD_oc˛usi⁄_quîy_evít
 1

	)

5528 
	#GL_OCCLUSION_QUERY_EVENT_MASK_AMD
 0x874F

	)

5529 
	#GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
 0x00000001

	)

5530 
	#GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
 0x00000002

	)

5531 
	#GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
 0x00000004

	)

5532 
	#GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
 0x00000008

	)

5533 
	#GL_QUERY_ALL_EVENT_BITS_AMD
 0xFFFFFFFF

	)

5534 (
APIENTRYP
 
	tPFNGLQUERYOBJECTPARAMETERUIAMDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, GLíum 
	t≤ame
, GLuöà
	t∑øm
);

5535 #ifde‡
GL_GLEXT_PROTOTYPES


5536 
GLAPI
 
APIENTRY
 
glQuîyObje˘P¨amëîuiAMD
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, GLíum 
≤ame
, GLuöà
∑øm
);

5540 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


5541 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

5542 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

5543 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

5544 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

5545 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

5546 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

5547 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

5548 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

5549 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

5550 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

5551 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

5552 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

5553 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, *
	td©a
);

5554 (
APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

5555 (
APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

5556 (
APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îLi°
);

5557 (
APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

5558 (
APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

5559 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

5560 #ifde‡
GL_GLEXT_PROTOTYPES


5561 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

5562 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

5563 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

5564 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

5565 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, *
d©a
);

5566 
GLAPI
 
APIENTRY
 
glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

5567 
GLAPI
 
APIENTRY
 
glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

5568 
GLAPI
 
APIENTRY
 
glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îLi°
);

5569 
GLAPI
 
APIENTRY
 
glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

5570 
GLAPI
 
APIENTRY
 
glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

5571 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

5575 #i‚de‡
GL_AMD_pö√d_mem‹y


5576 
	#GL_AMD_pö√d_mem‹y
 1

	)

5577 
	#GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
 0x9160

	)

5580 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


5581 
	#GL_AMD_quîy_buf„r_obje˘
 1

	)

5582 
	#GL_QUERY_BUFFER_AMD
 0x9192

	)

5583 
	#GL_QUERY_BUFFER_BINDING_AMD
 0x9193

	)

5584 
	#GL_QUERY_RESULT_NO_WAIT_AMD
 0x9194

	)

5587 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


5588 
	#GL_AMD_ßm∂e_posôi⁄s
 1

	)

5589 
	#GL_SUBSAMPLE_DISTANCE_AMD
 0x883F

	)

5590 (
APIENTRYP
 
	tPFNGLSETMULTISAMPLEFVAMDPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tvÆ
);

5591 #ifde‡
GL_GLEXT_PROTOTYPES


5592 
GLAPI
 
APIENTRY
 
glSëMu…ißm∂efvAMD
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
vÆ
);

5596 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


5597 
	#GL_AMD_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

5600 #i‚de‡
GL_AMD_shadî_©omic_cou¡î_›s


5601 
	#GL_AMD_shadî_©omic_cou¡î_›s
 1

	)

5604 #i‚de‡
GL_AMD_shadî_ex∂icô_vîãx_∑ømëî


5605 
	#GL_AMD_shadî_ex∂icô_vîãx_∑ømëî
 1

	)

5608 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


5609 
	#GL_AMD_shadî_°ícû_exp‹t
 1

	)

5612 #i‚de‡
GL_AMD_shadî_åö¨y_mömax


5613 
	#GL_AMD_shadî_åö¨y_mömax
 1

	)

5616 #i‚de‡
GL_AMD_•¨£_ãxtuª


5617 
	#GL_AMD_•¨£_ãxtuª
 1

	)

5618 
	#GL_VIRTUAL_PAGE_SIZE_X_AMD
 0x9195

	)

5619 
	#GL_VIRTUAL_PAGE_SIZE_Y_AMD
 0x9196

	)

5620 
	#GL_VIRTUAL_PAGE_SIZE_Z_AMD
 0x9197

	)

5621 
	#GL_MAX_SPARSE_TEXTURE_SIZE_AMD
 0x9198

	)

5622 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
 0x9199

	)

5623 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
 0x919A

	)

5624 
	#GL_MIN_SPARSE_LEVEL_AMD
 0x919B

	)

5625 
	#GL_MIN_LOD_WARNING_AMD
 0x919C

	)

5626 
	#GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
 0x00000001

	)

5627 (
APIENTRYP
 
	tPFNGLTEXSTORAGESPARSEAMDPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

5628 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGESPARSEAMDPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

5629 #ifde‡
GL_GLEXT_PROTOTYPES


5630 
GLAPI
 
APIENTRY
 
glTexSt‹ageS∑r£AMD
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

5631 
GLAPI
 
APIENTRY
 
glTextuªSt‹ageS∑r£AMD
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

5635 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


5636 
	#GL_AMD_°ícû_›î©i⁄_exãnded
 1

	)

5637 
	#GL_SET_AMD
 0x874A

	)

5638 
	#GL_REPLACE_VALUE_AMD
 0x874B

	)

5639 
	#GL_STENCIL_OP_VALUE_AMD
 0x874C

	)

5640 
	#GL_STENCIL_BACK_OP_VALUE_AMD
 0x874D

	)

5641 (
APIENTRYP
 
	tPFNGLSTENCILOPVALUEAMDPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tvÆue
);

5642 #ifde‡
GL_GLEXT_PROTOTYPES


5643 
GLAPI
 
APIENTRY
 
glSãncûOpVÆueAMD
 (
GLíum
 
Á˚
, 
GLuöt
 
vÆue
);

5647 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


5648 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

5651 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


5652 
	#GL_AMD_å™sf‹m_„edback3_löes_åüngÀs
 1

	)

5655 #i‚de‡
GL_AMD_å™sf‹m_„edback4


5656 
	#GL_AMD_å™sf‹m_„edback4
 1

	)

5657 
	#GL_STREAM_RASTERIZATION_AMD
 0x91A0

	)

5660 #i‚de‡
GL_AMD_vîãx_shadî_œyî


5661 
	#GL_AMD_vîãx_shadî_œyî
 1

	)

5664 #i‚de‡
GL_AMD_vîãx_shadî_ãs£Œ©‹


5665 
	#GL_AMD_vîãx_shadî_ãs£Œ©‹
 1

	)

5666 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

5667 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

5668 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

5669 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

5670 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

5671 
	#GL_DISCRETE_AMD
 0x9006

	)

5672 
	#GL_CONTINUOUS_AMD
 0x9007

	)

5673 (
APIENTRYP
 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

5674 (
APIENTRYP
 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

5675 #ifde‡
GL_GLEXT_PROTOTYPES


5676 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄Fa˘‹AMD
 (
GLÊﬂt
 
Á˘‹
);

5677 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄ModeAMD
 (
GLíum
 
mode
);

5681 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


5682 
	#GL_AMD_vîãx_shadî_võwp‹t_ödex
 1

	)

5685 #i‚de‡
GL_APPLE_aux_dïth_°ícû


5686 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

5687 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

5690 #i‚de‡
GL_APPLE_˛õ¡_°‹age


5691 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

5692 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

5695 #i‚de‡
GL_APPLE_ñemít_¨øy


5696 
	#GL_APPLE_ñemít_¨øy
 1

	)

5697 
	#GL_ELEMENT_ARRAY_APPLE
 0x8A0C

	)

5698 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8A0D

	)

5699 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x8A0E

	)

5700 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5701 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5702 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5703 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5704 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5705 #ifde‡
GL_GLEXT_PROTOTYPES


5706 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5707 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5708 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5709 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5710 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5714 #i‚de‡
GL_APPLE_„n˚


5715 
	#GL_APPLE_„n˚
 1

	)

5716 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

5717 
	#GL_FENCE_APPLE
 0x8A0B

	)

5718 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

5719 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

5720 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5721 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5722 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5723 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5724 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

5725 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

5726 #ifde‡
GL_GLEXT_PROTOTYPES


5727 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

5728 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

5729 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
 
„n˚
);

5730 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
 
„n˚
);

5731 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
 
„n˚
);

5732 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
 
„n˚
);

5733 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
 
obje˘
, 
GLuöt
 
«me
);

5734 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
 
obje˘
, 
GLöt
 
«me
);

5738 #i‚de‡
GL_APPLE_Êﬂt_pixñs


5739 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

5740 
	#GL_HALF_APPLE
 0x140B

	)

5741 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

5742 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

5743 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

5744 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

5745 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

5746 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

5747 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

5748 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

5749 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

5750 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

5751 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

5752 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

5753 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

5756 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


5757 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

5758 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

5759 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

5760 (
APIENTRYP
 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5761 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

5762 #ifde‡
GL_GLEXT_PROTOTYPES


5763 
GLAPI
 
APIENTRY
 
glBuf„rP¨amëîiAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

5764 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™geAPPLE
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

5768 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


5769 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

5770 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

5771 
	#GL_RELEASED_APPLE
 0x8A19

	)

5772 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

5773 
	#GL_RETAINED_APPLE
 0x8A1B

	)

5774 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

5775 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

5776 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5777 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5778 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5779 #ifde‡
GL_GLEXT_PROTOTYPES


5780 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘PurgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5781 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘U≈urgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5782 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivAPPLE
 (
GLíum
 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

5786 #i‚de‡
GL_APPLE_rgb_422


5787 
	#GL_APPLE_rgb_422
 1

	)

5788 
	#GL_RGB_422_APPLE
 0x8A1F

	)

5789 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

5790 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

5791 
	#GL_RGB_RAW_422_APPLE
 0x8A51

	)

5794 #i‚de‡
GL_APPLE_row_byãs


5795 
	#GL_APPLE_row_byãs
 1

	)

5796 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

5797 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

5800 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


5801 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

5802 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

5805 #i‚de‡
GL_APPLE_ãxtuª_ønge


5806 
	#GL_APPLE_ãxtuª_ønge
 1

	)

5807 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

5808 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

5809 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

5810 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

5811 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

5812 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

5813 (
APIENTRYP
 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

5814 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

5815 #ifde‡
GL_GLEXT_PROTOTYPES


5816 
GLAPI
 
APIENTRY
 
glTextuªR™geAPPLE
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

5817 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîPoöãrvAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

5821 #i‚de‡
GL_APPLE_å™sf‹m_höt


5822 
	#GL_APPLE_å™sf‹m_höt
 1

	)

5823 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

5826 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


5827 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

5828 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

5829 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5830 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

5831 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

5832 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5833 #ifde‡
GL_GLEXT_PROTOTYPES


5834 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5835 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

5836 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

5837 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5841 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


5842 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

5843 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

5844 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

5845 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

5846 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

5847 
	#GL_STORAGE_CLIENT_APPLE
 0x85B4

	)

5848 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5849 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5850 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5851 #ifde‡
GL_GLEXT_PROTOTYPES


5852 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5853 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5854 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5858 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


5859 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

5860 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

5861 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

5862 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

5863 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

5864 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

5865 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

5866 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

5867 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

5868 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

5869 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

5870 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5871 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5872 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5873 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5874 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5875 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5876 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5877 #ifde‡
GL_GLEXT_PROTOTYPES


5878 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5879 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5880 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAâribE«bÀdAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5881 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLdoubÀ *
poöts
);

5882 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLÊﬂà*
poöts
);

5883 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLdoubÀ *
poöts
);

5884 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLÊﬂà*
poöts
);

5888 #i‚de‡
GL_APPLE_ycb¸_422


5889 
	#GL_APPLE_ycb¸_422
 1

	)

5890 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

5893 #i‚de‡
GL_ATI_døw_buf„rs


5894 
	#GL_ATI_døw_buf„rs
 1

	)

5895 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

5896 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

5897 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

5898 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

5899 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

5900 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

5901 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

5902 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

5903 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

5904 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

5905 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

5906 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

5907 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

5908 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

5909 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

5910 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

5911 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

5912 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

5913 #ifde‡
GL_GLEXT_PROTOTYPES


5914 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

5918 #i‚de‡
GL_ATI_ñemít_¨øy


5919 
	#GL_ATI_ñemít_¨øy
 1

	)

5920 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

5921 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

5922 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

5923 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5924 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

5925 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

5926 #ifde‡
GL_GLEXT_PROTOTYPES


5927 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5928 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
);

5929 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
);

5933 #i‚de‡
GL_ATI_ívm≠_bumpm≠


5934 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

5935 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

5936 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

5937 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

5938 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

5939 
	#GL_DUDV_ATI
 0x8779

	)

5940 
	#GL_DU8DV8_ATI
 0x877A

	)

5941 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

5942 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

5943 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

5944 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

5945 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

5946 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

5947 #ifde‡
GL_GLEXT_PROTOTYPES


5948 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

5949 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

5950 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

5951 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øm
);

5955 #i‚de‡
GL_ATI_‰agmít_shadî


5956 
	#GL_ATI_‰agmít_shadî
 1

	)

5957 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

5958 
	#GL_REG_0_ATI
 0x8921

	)

5959 
	#GL_REG_1_ATI
 0x8922

	)

5960 
	#GL_REG_2_ATI
 0x8923

	)

5961 
	#GL_REG_3_ATI
 0x8924

	)

5962 
	#GL_REG_4_ATI
 0x8925

	)

5963 
	#GL_REG_5_ATI
 0x8926

	)

5964 
	#GL_REG_6_ATI
 0x8927

	)

5965 
	#GL_REG_7_ATI
 0x8928

	)

5966 
	#GL_REG_8_ATI
 0x8929

	)

5967 
	#GL_REG_9_ATI
 0x892A

	)

5968 
	#GL_REG_10_ATI
 0x892B

	)

5969 
	#GL_REG_11_ATI
 0x892C

	)

5970 
	#GL_REG_12_ATI
 0x892D

	)

5971 
	#GL_REG_13_ATI
 0x892E

	)

5972 
	#GL_REG_14_ATI
 0x892F

	)

5973 
	#GL_REG_15_ATI
 0x8930

	)

5974 
	#GL_REG_16_ATI
 0x8931

	)

5975 
	#GL_REG_17_ATI
 0x8932

	)

5976 
	#GL_REG_18_ATI
 0x8933

	)

5977 
	#GL_REG_19_ATI
 0x8934

	)

5978 
	#GL_REG_20_ATI
 0x8935

	)

5979 
	#GL_REG_21_ATI
 0x8936

	)

5980 
	#GL_REG_22_ATI
 0x8937

	)

5981 
	#GL_REG_23_ATI
 0x8938

	)

5982 
	#GL_REG_24_ATI
 0x8939

	)

5983 
	#GL_REG_25_ATI
 0x893A

	)

5984 
	#GL_REG_26_ATI
 0x893B

	)

5985 
	#GL_REG_27_ATI
 0x893C

	)

5986 
	#GL_REG_28_ATI
 0x893D

	)

5987 
	#GL_REG_29_ATI
 0x893E

	)

5988 
	#GL_REG_30_ATI
 0x893F

	)

5989 
	#GL_REG_31_ATI
 0x8940

	)

5990 
	#GL_CON_0_ATI
 0x8941

	)

5991 
	#GL_CON_1_ATI
 0x8942

	)

5992 
	#GL_CON_2_ATI
 0x8943

	)

5993 
	#GL_CON_3_ATI
 0x8944

	)

5994 
	#GL_CON_4_ATI
 0x8945

	)

5995 
	#GL_CON_5_ATI
 0x8946

	)

5996 
	#GL_CON_6_ATI
 0x8947

	)

5997 
	#GL_CON_7_ATI
 0x8948

	)

5998 
	#GL_CON_8_ATI
 0x8949

	)

5999 
	#GL_CON_9_ATI
 0x894A

	)

6000 
	#GL_CON_10_ATI
 0x894B

	)

6001 
	#GL_CON_11_ATI
 0x894C

	)

6002 
	#GL_CON_12_ATI
 0x894D

	)

6003 
	#GL_CON_13_ATI
 0x894E

	)

6004 
	#GL_CON_14_ATI
 0x894F

	)

6005 
	#GL_CON_15_ATI
 0x8950

	)

6006 
	#GL_CON_16_ATI
 0x8951

	)

6007 
	#GL_CON_17_ATI
 0x8952

	)

6008 
	#GL_CON_18_ATI
 0x8953

	)

6009 
	#GL_CON_19_ATI
 0x8954

	)

6010 
	#GL_CON_20_ATI
 0x8955

	)

6011 
	#GL_CON_21_ATI
 0x8956

	)

6012 
	#GL_CON_22_ATI
 0x8957

	)

6013 
	#GL_CON_23_ATI
 0x8958

	)

6014 
	#GL_CON_24_ATI
 0x8959

	)

6015 
	#GL_CON_25_ATI
 0x895A

	)

6016 
	#GL_CON_26_ATI
 0x895B

	)

6017 
	#GL_CON_27_ATI
 0x895C

	)

6018 
	#GL_CON_28_ATI
 0x895D

	)

6019 
	#GL_CON_29_ATI
 0x895E

	)

6020 
	#GL_CON_30_ATI
 0x895F

	)

6021 
	#GL_CON_31_ATI
 0x8960

	)

6022 
	#GL_MOV_ATI
 0x8961

	)

6023 
	#GL_ADD_ATI
 0x8963

	)

6024 
	#GL_MUL_ATI
 0x8964

	)

6025 
	#GL_SUB_ATI
 0x8965

	)

6026 
	#GL_DOT3_ATI
 0x8966

	)

6027 
	#GL_DOT4_ATI
 0x8967

	)

6028 
	#GL_MAD_ATI
 0x8968

	)

6029 
	#GL_LERP_ATI
 0x8969

	)

6030 
	#GL_CND_ATI
 0x896A

	)

6031 
	#GL_CND0_ATI
 0x896B

	)

6032 
	#GL_DOT2_ADD_ATI
 0x896C

	)

6033 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

6034 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

6035 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

6036 
	#GL_NUM_PASSES_ATI
 0x8970

	)

6037 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

6038 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

6039 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

6040 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

6041 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

6042 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

6043 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

6044 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

6045 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

6046 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

6047 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

6048 
	#GL_RED_BIT_ATI
 0x00000001

	)

6049 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

6050 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

6051 
	#GL_2X_BIT_ATI
 0x00000001

	)

6052 
	#GL_4X_BIT_ATI
 0x00000002

	)

6053 
	#GL_8X_BIT_ATI
 0x00000004

	)

6054 
	#GL_HALF_BIT_ATI
 0x00000008

	)

6055 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

6056 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

6057 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

6058 
	#GL_COMP_BIT_ATI
 0x00000002

	)

6059 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

6060 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

6061 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

6062 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

6063 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

6064 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

6065 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

6066 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

6067 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

6068 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

6069 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

6070 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

6071 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

6072 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

6073 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

6074 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6075 #ifde‡
GL_GLEXT_PROTOTYPES


6076 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuöà
ønge
);

6077 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
 
id
);

6078 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
 
id
);

6079 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

6080 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

6081 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
 
d°
, GLuöà
co‹d
, 
GLíum
 
swizzÀ
);

6082 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
 
d°
, GLuöà
öãΩ
, 
GLíum
 
swizzÀ
);

6083 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

6084 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

6085 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

6086 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

6087 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

6088 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

6089 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
 
d°
, c⁄° 
GLÊﬂt
 *
vÆue
);

6093 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


6094 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

6095 *(
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6096 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6097 #ifde‡
GL_GLEXT_PROTOTYPES


6098 
GLAPI
 *
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6099 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6103 #i‚de‡
GL_ATI_memöfo


6104 
	#GL_ATI_memöfo
 1

	)

6105 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

6106 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

6107 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

6110 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


6111 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

6112 
	#GL_RGBA_FLOAT_MODE_ATI
 0x8820

	)

6113 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

6116 #i‚de‡
GL_ATI_≤_åüngÀs


6117 
	#GL_ATI_≤_åüngÀs
 1

	)

6118 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

6119 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

6120 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

6121 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

6122 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

6123 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

6124 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

6125 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

6126 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

6127 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6128 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6129 #ifde‡
GL_GLEXT_PROTOTYPES


6130 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6131 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6135 #i‚de‡
GL_ATI_£∑øã_°ícû


6136 
	#GL_ATI_£∑øã_°ícû
 1

	)

6137 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

6138 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

6139 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

6140 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

6141 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

6142 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

6143 #ifde‡
GL_GLEXT_PROTOTYPES


6144 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

6145 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
 
‰⁄tfunc
, GLíum 
backfunc
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

6149 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


6150 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

6151 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

6154 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


6155 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

6156 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

6157 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

6158 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

6161 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


6162 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

6163 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

6164 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

6165 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

6166 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

6167 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

6168 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

6169 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

6170 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

6171 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

6172 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

6173 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

6174 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

6177 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


6178 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

6179 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

6180 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

6183 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


6184 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

6185 
	#GL_STATIC_ATI
 0x8760

	)

6186 
	#GL_DYNAMIC_ATI
 0x8761

	)

6187 
	#GL_PRESERVE_ATI
 0x8762

	)

6188 
	#GL_DISCARD_ATI
 0x8763

	)

6189 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

6190 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

6191 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

6192 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

6193 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	tußge
);

6194 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6195 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

6196 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6197 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6198 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6199 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

6200 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6201 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6202 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6203 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6204 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6205 #ifde‡
GL_GLEXT_PROTOTYPES


6206 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
ußge
);

6207 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6208 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
 
buf„r
, GLuöà
off£t
, 
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
¥e£rve
);

6209 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6210 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6211 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6212 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
 
¨øy
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLuöt
 
buf„r
, GLuöà
off£t
);

6213 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6214 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6215 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

6216 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6217 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6221 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


6222 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

6223 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6224 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6225 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6226 #ifde‡
GL_GLEXT_PROTOTYPES


6227 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

6228 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6229 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6233 #i‚de‡
GL_ATI_vîãx_°ªams


6234 
	#GL_ATI_vîãx_°ªams
 1

	)

6235 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

6236 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

6237 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

6238 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

6239 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

6240 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

6241 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

6242 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

6243 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

6244 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

6245 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

6246 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6247 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

6248 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6249 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

6250 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6251 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

6252 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6253 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6254 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6255 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

6256 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6257 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6258 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6259 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6260 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6261 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6262 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6263 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6264 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6265 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6266 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6267 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6268 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6269 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6270 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6271 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6272 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6273 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6274 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6275 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6276 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6277 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

6278 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

6279 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

6280 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6281 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

6282 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6283 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

6284 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6285 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

6286 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6287 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

6288 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6289 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6290 #ifde‡
GL_GLEXT_PROTOTYPES


6291 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
);

6292 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6293 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
);

6294 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6295 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
);

6296 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6297 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
);

6298 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6299 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
);

6300 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6301 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
);

6302 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6303 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

6304 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6305 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6306 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6307 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

6308 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6309 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

6310 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6311 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6312 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6313 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6314 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6315 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

6316 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6317 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

6318 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6319 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

6320 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6321 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

6322 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6323 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
 
°ªam
, 
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
);

6324 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
 
°ªam
, c⁄° 
GLbyã
 *
co‹ds
);

6325 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
);

6326 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6327 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
nx
, GLöà
ny
, GLöà
nz
);

6328 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6329 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

6330 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6331 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
);

6332 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6333 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
 
°ªam
);

6334 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6335 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6339 #i‚de‡
GL_EXT_422_pixñs


6340 
	#GL_EXT_422_pixñs
 1

	)

6341 
	#GL_422_EXT
 0x80CC

	)

6342 
	#GL_422_REV_EXT
 0x80CD

	)

6343 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

6344 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

6347 #i‚de‡
GL_EXT_abgr


6348 
	#GL_EXT_abgr
 1

	)

6349 
	#GL_ABGR_EXT
 0x8000

	)

6352 #i‚de‡
GL_EXT_bgø


6353 
	#GL_EXT_bgø
 1

	)

6354 
	#GL_BGR_EXT
 0x80E0

	)

6355 
	#GL_BGRA_EXT
 0x80E1

	)

6358 #i‚de‡
GL_EXT_bödabÀ_unif‹m


6359 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

6360 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

6361 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

6362 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

6363 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

6364 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

6365 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

6366 (
APIENTRYP
 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

6367 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

6368 
GLöçå
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

6369 #ifde‡
GL_GLEXT_PROTOTYPES


6370 
GLAPI
 
APIENTRY
 
glUnif‹mBuf„rEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
buf„r
);

6371 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mBuf„rSizeEXT
 (
GLuöt
 
¥ogøm
, GLöà
loˇti⁄
);

6372 
GLAPI
 
GLöçå
 
APIENTRY
 
glGëUnif‹mOff£tEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
);

6376 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


6377 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

6378 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

6379 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

6380 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

6381 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

6382 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

6383 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

6384 #ifde‡
GL_GLEXT_PROTOTYPES


6385 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

6389 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


6390 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

6391 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

6392 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

6393 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6394 #ifde‡
GL_GLEXT_PROTOTYPES


6395 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

6399 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


6400 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

6401 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

6402 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

6403 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

6404 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

6405 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

6406 #ifde‡
GL_GLEXT_PROTOTYPES


6407 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

6411 #i‚de‡
GL_EXT_bÀnd_logic_›


6412 
	#GL_EXT_bÀnd_logic_›
 1

	)

6415 #i‚de‡
GL_EXT_bÀnd_mömax


6416 
	#GL_EXT_bÀnd_mömax
 1

	)

6417 
	#GL_MIN_EXT
 0x8007

	)

6418 
	#GL_MAX_EXT
 0x8008

	)

6419 
	#GL_FUNC_ADD_EXT
 0x8006

	)

6420 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

6421 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

6422 #ifde‡
GL_GLEXT_PROTOTYPES


6423 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
 
mode
);

6427 #i‚de‡
GL_EXT_bÀnd_subåa˘


6428 
	#GL_EXT_bÀnd_subåa˘
 1

	)

6429 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

6430 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

6433 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


6434 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

6435 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

6438 #i‚de‡
GL_EXT_cmyka


6439 
	#GL_EXT_cmyka
 1

	)

6440 
	#GL_CMYK_EXT
 0x800C

	)

6441 
	#GL_CMYKA_EXT
 0x800D

	)

6442 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

6443 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

6446 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


6447 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

6448 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6449 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

6450 #ifde‡
GL_GLEXT_PROTOTYPES


6451 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

6452 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

6456 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


6457 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

6458 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

6459 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

6460 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6461 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

6462 #ifde‡
GL_GLEXT_PROTOTYPES


6463 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

6464 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

6468 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


6469 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

6470 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

6471 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

6472 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

6473 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

6474 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

6475 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

6476 
	#GL_REDUCE_EXT
 0x8016

	)

6477 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

6478 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

6479 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

6480 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

6481 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

6482 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

6483 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

6484 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

6485 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

6486 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

6487 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

6488 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

6489 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

6490 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

6491 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

6492 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

6493 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6494 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

6495 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6496 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6497 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6498 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

6499 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6500 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6501 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

6502 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

6503 #ifde‡
GL_GLEXT_PROTOTYPES


6504 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

6505 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

6506 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

6507 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6508 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

6509 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6510 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

6511 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6512 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

6513 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6514 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6515 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

6516 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

6520 #i‚de‡
GL_EXT_co‹dö©e_‰ame


6521 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

6522 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

6523 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

6524 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

6525 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

6526 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

6527 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

6528 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

6529 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

6530 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

6531 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

6532 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

6533 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

6534 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

6535 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

6536 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

6537 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6538 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

6539 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6540 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

6541 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6542 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

6543 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6544 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

6545 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6546 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

6547 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6548 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

6549 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6550 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

6551 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6552 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

6553 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6554 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

6555 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6556 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6557 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6558 #ifde‡
GL_GLEXT_PROTOTYPES


6559 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
 
tx
, GLbyã 
ty
, GLbyã 
tz
);

6560 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *
v
);

6561 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
 
tx
, GLdoubÀ 
ty
, GLdoubÀ 
tz
);

6562 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

6563 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
 
tx
, GLÊﬂà
ty
, GLÊﬂà
tz
);

6564 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

6565 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
 
tx
, GLöà
ty
, GLöà
tz
);

6566 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *
v
);

6567 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
 
tx
, GLsh‹à
ty
, GLsh‹à
tz
);

6568 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

6569 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
 
bx
, GLbyã 
by
, GLbyã 
bz
);

6570 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *
v
);

6571 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
 
bx
, GLdoubÀ 
by
, GLdoubÀ 
bz
);

6572 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

6573 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
 
bx
, GLÊﬂà
by
, GLÊﬂà
bz
);

6574 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

6575 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
 
bx
, GLöà
by
, GLöà
bz
);

6576 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *
v
);

6577 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
 
bx
, GLsh‹à
by
, GLsh‹à
bz
);

6578 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

6579 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6580 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6584 #i‚de‡
GL_EXT_c›y_ãxtuª


6585 
	#GL_EXT_c›y_ãxtuª
 1

	)

6586 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6587 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6588 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6589 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6590 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6591 #ifde‡
GL_GLEXT_PROTOTYPES


6592 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6593 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6594 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6595 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6596 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6600 #i‚de‡
GL_EXT_cuŒ_vîãx


6601 
	#GL_EXT_cuŒ_vîãx
 1

	)

6602 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

6603 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

6604 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

6605 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6606 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6607 #ifde‡
GL_GLEXT_PROTOTYPES


6608 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6609 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6613 #i‚de‡
GL_EXT_debug_œbñ


6614 
	#GL_EXT_debug_œbñ
 1

	)

6615 
	#GL_PROGRAM_PIPELINE_OBJECT_EXT
 0x8A4F

	)

6616 
	#GL_PROGRAM_OBJECT_EXT
 0x8B40

	)

6617 
	#GL_SHADER_OBJECT_EXT
 0x8B48

	)

6618 
	#GL_BUFFER_OBJECT_EXT
 0x9151

	)

6619 
	#GL_QUERY_OBJECT_EXT
 0x9153

	)

6620 
	#GL_VERTEX_ARRAY_OBJECT_EXT
 0x9154

	)

6621 (
APIENTRYP
 
	tPFNGLLABELOBJECTEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

6622 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

6623 #ifde‡
GL_GLEXT_PROTOTYPES


6624 
GLAPI
 
APIENTRY
 
glLabñObje˘EXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

6625 
GLAPI
 
APIENTRY
 
glGëObje˘LabñEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

6629 #i‚de‡
GL_EXT_debug_m¨kî


6630 
	#GL_EXT_debug_m¨kî
 1

	)

6631 (
APIENTRYP
 
	tPFNGLINSERTEVENTMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

6632 (
APIENTRYP
 
	tPFNGLPUSHGROUPMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

6633 (
APIENTRYP
 
	tPFNGLPOPGROUPMARKEREXTPROC
) ();

6634 #ifde‡
GL_GLEXT_PROTOTYPES


6635 
GLAPI
 
APIENTRY
 
glIn£πEvítM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

6636 
GLAPI
 
APIENTRY
 
glPushGroupM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

6637 
GLAPI
 
APIENTRY
 
glP›GroupM¨kîEXT
 ();

6641 #i‚de‡
GL_EXT_dïth_bounds_ã°


6642 
	#GL_EXT_dïth_bounds_ã°
 1

	)

6643 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

6644 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

6645 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

6646 #ifde‡
GL_GLEXT_PROTOTYPES


6647 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
 
zmö
, GL˛ampd 
zmax
);

6651 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


6652 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

6653 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

6654 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

6655 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

6656 (
APIENTRYP
 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6657 (
APIENTRYP
 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6658 (
APIENTRYP
 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6659 (
APIENTRYP
 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6660 (
APIENTRYP
 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tmode
);

6661 (
APIENTRYP
 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6662 (
APIENTRYP
 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6663 (
APIENTRYP
 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6664 (
APIENTRYP
 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6665 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6666 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6667 (
APIENTRYP
 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

6668 (
APIENTRYP
 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

6669 (
APIENTRYP
 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tmode
);

6670 (
APIENTRYP
 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tmode
);

6671 (
APIENTRYP
 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

6672 (
APIENTRYP
 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

6673 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6674 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6675 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6676 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6677 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6678 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6679 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6680 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6681 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6682 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6683 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6684 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6685 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

6686 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6687 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6688 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6689 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

6690 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6691 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6692 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6693 (
APIENTRYP
 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

6694 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6695 (
APIENTRYP
 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6696 (
APIENTRYP
 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6697 (
APIENTRYP
 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6698 (
APIENTRYP
 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6699 (
APIENTRYP
 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

6700 (
APIENTRYP
 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6701 (
APIENTRYP
 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6702 (
APIENTRYP
 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6703 (
APIENTRYP
 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6704 (
APIENTRYP
 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6705 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6706 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6707 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6708 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6709 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6710 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6711 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6712 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6713 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6714 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6715 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6716 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6717 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6718 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6719 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6720 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6721 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6722 (
APIENTRYP
 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

6723 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6724 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6725 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6726 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

6727 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6728 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6729 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6730 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6731 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6732 (
APIENTRYP
 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

6733 (
APIENTRYP
 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

6734 (
APIENTRYP
 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, **
	td©a
);

6735 (
APIENTRYP
 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6736 (
APIENTRYP
 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6737 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6738 (
APIENTRYP
 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

6739 (
APIENTRYP
 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

6740 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6741 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6742 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6743 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6744 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6745 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6746 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6747 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6748 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6749 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6750 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6751 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6752 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6753 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6754 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6755 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6756 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6757 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6758 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLíum
 
	tußge
);

6759 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

6760 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

6761 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6762 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6763 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, **
	t∑øms
);

6764 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

6765 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

6766 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

6767 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

6768 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

6769 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

6770 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

6771 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

6772 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

6773 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6774 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6775 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6776 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6777 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6778 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6779 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6780 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6781 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6782 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6783 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6784 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6785 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6786 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6787 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6788 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6789 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6790 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

6791 (
APIENTRYP
 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

6792 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6793 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

6794 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6795 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöà*
	t∑øms
);

6796 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6797 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

6798 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6799 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

6800 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

6801 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

6802 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

6803 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

6804 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6805 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6806 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6807 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6808 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6809 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6810 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

6811 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

6812 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

6813 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöà*
	t∑øms
);

6814 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

6815 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øms
);

6816 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà*
	t∑øms
);

6817 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6818 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6819 (
APIENTRYP
 
	tPFNGLGETFLOATI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6820 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6821 (
APIENTRYP
 
	tPFNGLGETPOINTERI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, **
	t∑øms
);

6822 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

6823 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6824 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6825 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6826 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6827 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6828 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6829 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6830 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

6831 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6832 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6833 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6834 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6835 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

6836 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6837 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6838 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

6839 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

6840 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6841 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

6842 (
APIENTRYP
 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

6843 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6844 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6845 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6846 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6847 (
APIENTRYP
 
	tPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

6848 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6849 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

6850 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

6851 (
APIENTRYP
 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

6852 (
APIENTRYP
 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

6853 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6854 (
APIENTRYP
 
	tPFNGLVERTEXARRAYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6855 (
APIENTRYP
 
	tPFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6856 (
APIENTRYP
 
	tPFNGLVERTEXARRAYINDEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6857 (
APIENTRYP
 
	tPFNGLVERTEXARRAYNORMALOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6858 (
APIENTRYP
 
	tPFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6859 (
APIENTRYP
 
	tPFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6860 (
APIENTRYP
 
	tPFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6861 (
APIENTRYP
 
	tPFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6862 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6863 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6864 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6865 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6866 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6867 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6868 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6869 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6870 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6871 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6872 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

6873 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

6874 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

6875 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6876 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizeùå
 
	toff£t
, GLsizeùå 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6877 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6878 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6879 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

6880 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6881 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6882 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6883 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6884 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6885 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6886 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6887 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6888 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6889 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6890 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6891 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6892 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6893 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6894 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6895 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6896 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6897 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

6898 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6899 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

6900 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6901 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6902 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

6903 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

6904 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6905 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6906 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

6907 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

6908 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6909 (
APIENTRYP
 
	tPFNGLTEXTUREPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tcommô
);

6910 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, GLuöà
	tdivis‹
);

6911 #ifde‡
GL_GLEXT_PROTOTYPES


6912 
GLAPI
 
APIENTRY
 
glM©rixLﬂdfEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6913 
GLAPI
 
APIENTRY
 
glM©rixLﬂddEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6914 
GLAPI
 
APIENTRY
 
glM©rixMu…fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6915 
GLAPI
 
APIENTRY
 
glM©rixMu…dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6916 
GLAPI
 
APIENTRY
 
glM©rixLﬂdIdítôyEXT
 (
GLíum
 
mode
);

6917 
GLAPI
 
APIENTRY
 
glM©rixRŸ©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6918 
GLAPI
 
APIENTRY
 
glM©rixRŸ©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
™gÀ
, GLdoubÀ 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6919 
GLAPI
 
APIENTRY
 
glM©rixSˇÀfEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6920 
GLAPI
 
APIENTRY
 
glM©rixSˇÀdEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6921 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6922 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6923 
GLAPI
 
APIENTRY
 
glM©rixFru°umEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6924 
GLAPI
 
APIENTRY
 
glM©rixOπhoEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6925 
GLAPI
 
APIENTRY
 
glM©rixP›EXT
 (
GLíum
 
mode
);

6926 
GLAPI
 
APIENTRY
 
glM©rixPushEXT
 (
GLíum
 
mode
);

6927 
GLAPI
 
APIENTRY
 
glClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6928 
GLAPI
 
APIENTRY
 
glPushClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6929 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6930 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6931 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6932 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6933 
GLAPI
 
APIENTRY
 
glTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6934 
GLAPI
 
APIENTRY
 
glTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6935 
GLAPI
 
APIENTRY
 
glTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6936 
GLAPI
 
APIENTRY
 
glTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6937 
GLAPI
 
APIENTRY
 
glC›yTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6938 
GLAPI
 
APIENTRY
 
glC›yTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6939 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6940 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6941 
GLAPI
 
APIENTRY
 
glGëTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6942 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6943 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6944 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6945 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6946 
GLAPI
 
APIENTRY
 
glTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6947 
GLAPI
 
APIENTRY
 
glTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6948 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6949 
GLAPI
 
APIENTRY
 
glBödMu…iTextuªEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ãxtuª
);

6950 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dPoöãrEXT
 (
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6951 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6952 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6953 
GLAPI
 
APIENTRY
 
glMu…iTexEnviEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6954 
GLAPI
 
APIENTRY
 
glMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6955 
GLAPI
 
APIENTRY
 
glMu…iTexGídEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
);

6956 
GLAPI
 
APIENTRY
 
glMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

6957 
GLAPI
 
APIENTRY
 
glMu…iTexGífEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6958 
GLAPI
 
APIENTRY
 
glMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6959 
GLAPI
 
APIENTRY
 
glMu…iTexGíiEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6960 
GLAPI
 
APIENTRY
 
glMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6961 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6962 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6963 
GLAPI
 
APIENTRY
 
glGëMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6964 
GLAPI
 
APIENTRY
 
glGëMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6965 
GLAPI
 
APIENTRY
 
glGëMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6966 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîiEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6967 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6968 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6969 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6970 
GLAPI
 
APIENTRY
 
glMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6971 
GLAPI
 
APIENTRY
 
glMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6972 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6973 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6974 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6975 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6976 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6977 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6978 
GLAPI
 
APIENTRY
 
glGëMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6979 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6980 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6981 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6982 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6983 
GLAPI
 
APIENTRY
 
glMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6984 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6985 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6986 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6987 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6988 
GLAPI
 
APIENTRY
 
glGëFlﬂtIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

6989 
GLAPI
 
APIENTRY
 
glGëDoubÀIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

6990 
GLAPI
 
APIENTRY
 
glGëPoöãrIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, **
d©a
);

6991 
GLAPI
 
APIENTRY
 
glE«bÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6992 
GLAPI
 
APIENTRY
 
glDißbÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6993 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6994 
GLAPI
 
APIENTRY
 
glGëI¡egîIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

6995 
GLAPI
 
APIENTRY
 
glGëBoﬁónIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

6996 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6997 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6998 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6999 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7000 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7001 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7002 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
lod
, *
img
);

7003 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

7004 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

7005 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

7006 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7007 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7008 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7009 
GLAPI
 
APIENTRY
 
glGëCom¥es£dMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
lod
, *
img
);

7010 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

7011 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

7012 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

7013 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

7014 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLíum
 
ußge
);

7015 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

7016 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

7017 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
);

7018 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîivEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7019 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrvEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, **
∑øms
);

7020 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

7021 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

7022 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

7023 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

7024 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

7025 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

7026 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

7027 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

7028 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

7029 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7030 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7031 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7032 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7033 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7034 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7035 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7036 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7037 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7038 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7039 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7040 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7041 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7042 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7043 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7044 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7045 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7046 
GLAPI
 
APIENTRY
 
glTextuªBuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
);

7047 
GLAPI
 
APIENTRY
 
glMu…iTexBuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

7048 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7049 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° GLuöà*
∑øms
);

7050 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7051 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, GLuöà*
∑øms
);

7052 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7053 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

7054 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7055 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

7056 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

7057 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

7058 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

7059 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

7060 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7061 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7062 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7063 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7064 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîs4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7065 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4iEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

7066 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLöt
 *
∑øms
);

7067 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

7068 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

7069 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° GLuöà*
∑øms
);

7070 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

7071 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 *
∑øms
);

7072 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIuivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà*
∑øms
);

7073 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

7074 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

7075 
GLAPI
 
APIENTRY
 
glGëFlﬂti_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

7076 
GLAPI
 
APIENTRY
 
glGëDoubÀi_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

7077 
GLAPI
 
APIENTRY
 
glGëPoöãri_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, **
∑øms
);

7078 
GLAPI
 
APIENTRY
 
glNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

7079 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7080 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

7081 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7082 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

7083 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîdvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 *
∑øms
);

7084 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîfvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 *
∑øms
);

7085 
GLAPI
 
APIENTRY
 
glGëNamedProgømivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7086 
GLAPI
 
APIENTRY
 
glGëNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

7087 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

7088 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîivEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7089 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7090 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7091 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètusEXT
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

7092 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª1DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7093 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª2DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7094 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª3DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

7095 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

7096 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7097 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠EXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
);

7098 
GLAPI
 
APIENTRY
 
glGíî©eMu…iTexMùm≠EXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
);

7099 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

7100 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rsEXT
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

7101 
GLAPI
 
APIENTRY
 
glFømebuf„rRódBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

7102 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7103 
GLAPI
 
APIENTRY
 
glNamedC›yBuf„rSubD©aEXT
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

7104 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7105 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayîEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

7106 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªFa˚EXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

7107 
GLAPI
 
APIENTRY
 
glTextuªRídîbuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
ªndîbuf„r
);

7108 
GLAPI
 
APIENTRY
 
glMu…iTexRídîbuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

7109 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7110 
GLAPI
 
APIENTRY
 
glVîãxAºayCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7111 
GLAPI
 
APIENTRY
 
glVîãxAºayEdgeFœgOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7112 
GLAPI
 
APIENTRY
 
glVîãxAºayIndexOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7113 
GLAPI
 
APIENTRY
 
glVîãxAºayN‹mÆOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7114 
GLAPI
 
APIENTRY
 
glVîãxAºayTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7115 
GLAPI
 
APIENTRY
 
glVîãxAºayMu…iTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7116 
GLAPI
 
APIENTRY
 
glVîãxAºayFogCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7117 
GLAPI
 
APIENTRY
 
glVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7118 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7119 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7120 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

7121 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

7122 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

7123 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

7124 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

7125 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãrvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, **
∑øm
);

7126 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîi_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

7127 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãri_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, **
∑øm
);

7128 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

7129 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

7130 
GLAPI
 
APIENTRY
 
glNamedBuf„rSt‹ageEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

7131 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

7132 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizeùå
 
off£t
, GLsizeùå 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

7133 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîiEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

7134 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7135 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

7136 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7137 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7138 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7139 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7140 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7141 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7142 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7143 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7144 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7145 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7146 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7147 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7148 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7149 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7150 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7151 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7152 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™geEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

7153 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

7154 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7155 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

7156 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7157 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7158 
GLAPI
 
APIENTRY
 
glVîãxAºayBödVîãxBuf„rEXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

7159 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

7160 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

7161 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

7162 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribBödögEXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

7163 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBödögDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

7164 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7165 
GLAPI
 
APIENTRY
 
glTextuªPageCommômítEXT
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
commô
);

7166 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, GLuöà
divis‹
);

7170 #i‚de‡
GL_EXT_døw_buf„rs2


7171 
	#GL_EXT_døw_buf„rs2
 1

	)

7172 (
APIENTRYP
 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

7173 #ifde‡
GL_GLEXT_PROTOTYPES


7174 
GLAPI
 
APIENTRY
 
glCﬁ‹MaskIndexedEXT
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

7178 #i‚de‡
GL_EXT_døw_ö°™˚d


7179 
	#GL_EXT_døw_ö°™˚d
 1

	)

7180 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

7181 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7182 #ifde‡
GL_GLEXT_PROTOTYPES


7183 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dEXT
 (
GLíum
 
mode
, 
GLöt
 
°¨t
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

7184 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

7188 #i‚de‡
GL_EXT_døw_ønge_ñemíts


7189 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

7190 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

7191 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

7192 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

7193 #ifde‡
GL_GLEXT_PROTOTYPES


7194 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

7198 #i‚de‡
GL_EXT_fog_co‹d


7199 
	#GL_EXT_fog_co‹d
 1

	)

7200 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

7201 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

7202 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

7203 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

7204 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

7205 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

7206 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

7207 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

7208 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

7209 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

7210 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

7211 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

7212 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7213 #ifde‡
GL_GLEXT_PROTOTYPES


7214 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
 
co‹d
);

7215 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *
co‹d
);

7216 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
 
co‹d
);

7217 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *
co‹d
);

7218 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7222 #i‚de‡
GL_EXT_‰amebuf„r_blô


7223 
	#GL_EXT_‰amebuf„r_blô
 1

	)

7224 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

7225 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

7226 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

7227 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

7228 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

7229 #ifde‡
GL_GLEXT_PROTOTYPES


7230 
GLAPI
 
APIENTRY
 
glBlôFømebuf„rEXT
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

7234 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


7235 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

7236 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

7237 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

7238 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

7239 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

7240 #ifde‡
GL_GLEXT_PROTOTYPES


7241 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7245 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


7246 
	#GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 1

	)

7247 
	#GL_SCALED_RESOLVE_FASTEST_EXT
 0x90BA

	)

7248 
	#GL_SCALED_RESOLVE_NICEST_EXT
 0x90BB

	)

7251 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


7252 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

7253 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

7254 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

7255 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

7256 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

7257 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

7258 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

7259 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

7260 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

7261 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

7262 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

7263 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

7264 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

7265 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

7266 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

7267 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

7268 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

7269 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

7270 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

7271 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

7272 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

7273 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

7274 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

7275 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

7276 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

7277 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

7278 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

7279 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

7280 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

7281 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

7282 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

7283 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

7284 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

7285 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

7286 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

7287 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

7288 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

7289 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

7290 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

7291 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

7292 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

7293 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

7294 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

7295 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

7296 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

7297 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

7298 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

7299 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

7300 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

7301 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

7302 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

7303 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

7304 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

7305 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

7306 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

7307 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

7308 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7309 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7310 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

7311 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

7312 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

7313 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

7314 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7315 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7316 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7317 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

7318 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

7319 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7320 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7321 #ifde‡
GL_GLEXT_PROTOTYPES


7322 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
 
ªndîbuf„r
);

7323 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

7324 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

7325 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

7326 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

7327 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7328 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
 
‰amebuf„r
);

7329 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

7330 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

7331 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

7332 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLíum 
èrgë
);

7333 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7334 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7335 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

7336 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

7337 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7338 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
 
èrgë
);

7342 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


7343 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

7344 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

7345 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

7348 #i‚de‡
GL_EXT_geomëry_shadî4


7349 
	#GL_EXT_geomëry_shadî4
 1

	)

7350 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

7351 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

7352 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

7353 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

7354 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

7355 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

7356 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

7357 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

7358 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

7359 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

7360 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

7361 
	#GL_LINES_ADJACENCY_EXT
 0x000A

	)

7362 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0x000B

	)

7363 
	#GL_TRIANGLES_ADJACENCY_EXT
 0x000C

	)

7364 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0x000D

	)

7365 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

7366 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

7367 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

7368 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

7369 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

7370 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

7371 #ifde‡
GL_GLEXT_PROTOTYPES


7372 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

7376 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


7377 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

7378 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7379 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7380 #ifde‡
GL_GLEXT_PROTOTYPES


7381 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7382 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7386 #i‚de‡
GL_EXT_gpu_shadî4


7387 
	#GL_EXT_gpu_shadî4
 1

	)

7388 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
 0x88FD

	)

7389 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

7390 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

7391 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

7392 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

7393 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

7394 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

7395 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

7396 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

7397 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

7398 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

7399 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

7400 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

7401 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

7402 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

7403 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

7404 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

7405 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

7406 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

7407 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

7408 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

7409 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

7410 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

7411 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

7412 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

7413 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

7414 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_EXT
 0x8904

	)

7415 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_EXT
 0x8905

	)

7416 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

7417 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

7418 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

7419 (
APIENTRYP
 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

7420 (
APIENTRYP
 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

7421 (
APIENTRYP
 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

7422 (
APIENTRYP
 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

7423 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7424 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7425 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7426 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7427 #ifde‡
GL_GLEXT_PROTOTYPES


7428 
GLAPI
 
APIENTRY
 
glGëUnif‹muivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

7429 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

7430 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

7431 
GLAPI
 
APIENTRY
 
glUnif‹m1uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

7432 
GLAPI
 
APIENTRY
 
glUnif‹m2uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

7433 
GLAPI
 
APIENTRY
 
glUnif‹m3uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

7434 
GLAPI
 
APIENTRY
 
glUnif‹m4uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

7435 
GLAPI
 
APIENTRY
 
glUnif‹m1uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7436 
GLAPI
 
APIENTRY
 
glUnif‹m2uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7437 
GLAPI
 
APIENTRY
 
glUnif‹m3uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7438 
GLAPI
 
APIENTRY
 
glUnif‹m4uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7442 #i‚de‡
GL_EXT_hi°ogøm


7443 
	#GL_EXT_hi°ogøm
 1

	)

7444 
	#GL_HISTOGRAM_EXT
 0x8024

	)

7445 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

7446 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

7447 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

7448 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

7449 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

7450 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

7451 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

7452 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

7453 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

7454 
	#GL_MINMAX_EXT
 0x802E

	)

7455 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

7456 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

7457 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

7458 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

7459 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7460 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7461 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

7462 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7463 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7464 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

7465 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

7466 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7467 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7468 #ifde‡
GL_GLEXT_PROTOTYPES


7469 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

7470 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7471 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7472 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

7473 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7474 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7475 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

7476 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

7477 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
 
èrgë
);

7478 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
 
èrgë
);

7482 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


7483 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

7484 
	#GL_IUI_V2F_EXT
 0x81AD

	)

7485 
	#GL_IUI_V3F_EXT
 0x81AE

	)

7486 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

7487 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

7488 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

7489 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

7490 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

7491 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

7494 #i‚de‡
GL_EXT_ödex_func


7495 
	#GL_EXT_ödex_func
 1

	)

7496 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

7497 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

7498 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

7499 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

7500 #ifde‡
GL_GLEXT_PROTOTYPES


7501 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

7505 #i‚de‡
GL_EXT_ödex_m©îül


7506 
	#GL_EXT_ödex_m©îül
 1

	)

7507 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

7508 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

7509 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

7510 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

7511 #ifde‡
GL_GLEXT_PROTOTYPES


7512 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

7516 #i‚de‡
GL_EXT_ödex_ãxtuª


7517 
	#GL_EXT_ödex_ãxtuª
 1

	)

7520 #i‚de‡
GL_EXT_light_ãxtuª


7521 
	#GL_EXT_light_ãxtuª
 1

	)

7522 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

7523 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

7524 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

7525 
	#GL_ATTENUATION_EXT
 0x834D

	)

7526 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

7527 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

7528 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

7529 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

7530 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

7531 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

7532 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

7533 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

7534 #ifde‡
GL_GLEXT_PROTOTYPES


7535 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
 
mode
);

7536 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
 
≤ame
);

7537 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

7541 #i‚de‡
GL_EXT_misc_©åibuã


7542 
	#GL_EXT_misc_©åibuã
 1

	)

7545 #i‚de‡
GL_EXT_mu…i_døw_¨øys


7546 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

7547 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

7548 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7549 #ifde‡
GL_GLEXT_PROTOTYPES


7550 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

7551 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
);

7555 #i‚de‡
GL_EXT_mu…ißm∂e


7556 
	#GL_EXT_mu…ißm∂e
 1

	)

7557 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

7558 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

7559 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

7560 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

7561 
	#GL_1PASS_EXT
 0x80A1

	)

7562 
	#GL_2PASS_0_EXT
 0x80A2

	)

7563 
	#GL_2PASS_1_EXT
 0x80A3

	)

7564 
	#GL_4PASS_0_EXT
 0x80A4

	)

7565 
	#GL_4PASS_1_EXT
 0x80A5

	)

7566 
	#GL_4PASS_2_EXT
 0x80A6

	)

7567 
	#GL_4PASS_3_EXT
 0x80A7

	)

7568 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

7569 
	#GL_SAMPLES_EXT
 0x80A9

	)

7570 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

7571 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

7572 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

7573 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

7574 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

7575 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

7576 #ifde‡
GL_GLEXT_PROTOTYPES


7577 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

7578 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
 
∑âîn
);

7582 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


7583 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

7584 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

7585 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

7586 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

7587 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

7590 #i‚de‡
GL_EXT_∑cked_Êﬂt


7591 
	#GL_EXT_∑cked_Êﬂt
 1

	)

7592 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

7593 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

7594 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

7597 #i‚de‡
GL_EXT_∑cked_pixñs


7598 
	#GL_EXT_∑cked_pixñs
 1

	)

7599 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

7600 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

7601 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

7602 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

7603 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

7606 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


7607 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

7608 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

7609 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

7610 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

7611 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

7612 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

7613 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

7614 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

7615 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

7616 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	td©a
);

7617 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7618 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7619 #ifde‡
GL_GLEXT_PROTOTYPES


7620 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

7621 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
d©a
);

7622 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7623 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7627 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


7628 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

7629 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

7630 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

7631 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

7632 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

7635 #i‚de‡
GL_EXT_pixñ_å™sf‹m


7636 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

7637 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

7638 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

7639 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

7640 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

7641 
	#GL_CUBIC_EXT
 0x8334

	)

7642 
	#GL_AVERAGE_EXT
 0x8335

	)

7643 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

7644 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

7645 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

7646 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7647 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7648 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7649 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7650 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7651 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7652 #ifde‡
GL_GLEXT_PROTOTYPES


7653 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

7654 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

7655 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7656 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7657 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7658 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7662 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


7663 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

7666 #i‚de‡
GL_EXT_poöt_∑ømëîs


7667 
	#GL_EXT_poöt_∑ømëîs
 1

	)

7668 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

7669 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

7670 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

7671 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

7672 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7673 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7674 #ifde‡
GL_GLEXT_PROTOTYPES


7675 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

7676 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7680 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


7681 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

7682 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

7683 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

7684 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

7685 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

7686 #ifde‡
GL_GLEXT_PROTOTYPES


7687 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
büs
);

7691 #i‚de‡
GL_EXT_pﬁyg⁄_off£t_˛amp


7692 
	#GL_EXT_pﬁyg⁄_off£t_˛amp
 1

	)

7693 
	#GL_POLYGON_OFFSET_CLAMP_EXT
 0x8E1B

	)

7694 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETCLAMPEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
, GLÊﬂà
	t˛amp
);

7695 #ifde‡
GL_GLEXT_PROTOTYPES


7696 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tCœmpEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
, GLÊﬂà
˛amp
);

7700 #i‚de‡
GL_EXT_po°_dïth_covîage


7701 
	#GL_EXT_po°_dïth_covîage
 1

	)

7704 #i‚de‡
GL_EXT_¥ovokög_vîãx


7705 
	#GL_EXT_¥ovokög_vîãx
 1

	)

7706 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

7707 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

7708 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

7709 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

7710 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

7711 #ifde‡
GL_GLEXT_PROTOTYPES


7712 
GLAPI
 
APIENTRY
 
glProvokögVîãxEXT
 (
GLíum
 
mode
);

7716 #i‚de‡
GL_EXT_ø°î_mu…ißm∂e


7717 
	#GL_EXT_ø°î_mu…ißm∂e
 1

	)

7718 
	#GL_RASTER_MULTISAMPLE_EXT
 0x9327

	)

7719 
	#GL_RASTER_SAMPLES_EXT
 0x9328

	)

7720 
	#GL_MAX_RASTER_SAMPLES_EXT
 0x9329

	)

7721 
	#GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT
 0x932A

	)

7722 
	#GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT
 0x932B

	)

7723 
	#GL_EFFECTIVE_RASTER_SAMPLES_EXT
 0x932C

	)

7724 (
APIENTRYP
 
	tPFNGLRASTERSAMPLESEXTPROC
Ë(
	tGLuöt
 
	tßm∂es
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

7725 #ifde‡
GL_GLEXT_PROTOTYPES


7726 
GLAPI
 
APIENTRY
 
glRa°îSam∂esEXT
 (
GLuöt
 
ßm∂es
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7730 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


7731 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

7732 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

7735 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


7736 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

7737 
	#GL_COLOR_SUM_EXT
 0x8458

	)

7738 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

7739 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

7740 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

7741 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

7742 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

7743 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

7744 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

7745 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

7746 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

7747 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7748 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

7749 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7750 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

7751 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7752 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

7753 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7754 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

7755 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

7756 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

7757 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

7758 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

7759 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

7760 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7761 #ifde‡
GL_GLEXT_PROTOTYPES


7762 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

7763 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *
v
);

7764 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

7765 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

7766 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

7767 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

7768 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

7769 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *
v
);

7770 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

7771 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

7772 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

7773 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *
v
);

7774 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

7775 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *
v
);

7776 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

7777 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *
v
);

7778 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7782 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


7783 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

7784 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

7785 (
APIENTRYP
 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

7786 (
APIENTRYP
 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

7787 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
 *
	t°rög
);

7788 #ifde‡
GL_GLEXT_PROTOTYPES


7789 
GLAPI
 
APIENTRY
 
glU£ShadîProgømEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
¥ogøm
);

7790 
GLAPI
 
APIENTRY
 
glA˘iveProgømEXT
 (
GLuöt
 
¥ogøm
);

7791 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømEXT
 (
GLíum
 
ty≥
, c⁄° 
GLch¨
 *
°rög
);

7795 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


7796 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

7797 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

7798 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

7799 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

7802 #i‚de‡
GL_EXT_shadî_image_lﬂd_f‹m©ãd


7803 
	#GL_EXT_shadî_image_lﬂd_f‹m©ãd
 1

	)

7806 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


7807 
	#GL_EXT_shadî_image_lﬂd_°‹e
 1

	)

7808 
	#GL_MAX_IMAGE_UNITS_EXT
 0x8F38

	)

7809 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
 0x8F39

	)

7810 
	#GL_IMAGE_BINDING_NAME_EXT
 0x8F3A

	)

7811 
	#GL_IMAGE_BINDING_LEVEL_EXT
 0x8F3B

	)

7812 
	#GL_IMAGE_BINDING_LAYERED_EXT
 0x8F3C

	)

7813 
	#GL_IMAGE_BINDING_LAYER_EXT
 0x8F3D

	)

7814 
	#GL_IMAGE_BINDING_ACCESS_EXT
 0x8F3E

	)

7815 
	#GL_IMAGE_1D_EXT
 0x904C

	)

7816 
	#GL_IMAGE_2D_EXT
 0x904D

	)

7817 
	#GL_IMAGE_3D_EXT
 0x904E

	)

7818 
	#GL_IMAGE_2D_RECT_EXT
 0x904F

	)

7819 
	#GL_IMAGE_CUBE_EXT
 0x9050

	)

7820 
	#GL_IMAGE_BUFFER_EXT
 0x9051

	)

7821 
	#GL_IMAGE_1D_ARRAY_EXT
 0x9052

	)

7822 
	#GL_IMAGE_2D_ARRAY_EXT
 0x9053

	)

7823 
	#GL_IMAGE_CUBE_MAP_ARRAY_EXT
 0x9054

	)

7824 
	#GL_IMAGE_2D_MULTISAMPLE_EXT
 0x9055

	)

7825 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9056

	)

7826 
	#GL_INT_IMAGE_1D_EXT
 0x9057

	)

7827 
	#GL_INT_IMAGE_2D_EXT
 0x9058

	)

7828 
	#GL_INT_IMAGE_3D_EXT
 0x9059

	)

7829 
	#GL_INT_IMAGE_2D_RECT_EXT
 0x905A

	)

7830 
	#GL_INT_IMAGE_CUBE_EXT
 0x905B

	)

7831 
	#GL_INT_IMAGE_BUFFER_EXT
 0x905C

	)

7832 
	#GL_INT_IMAGE_1D_ARRAY_EXT
 0x905D

	)

7833 
	#GL_INT_IMAGE_2D_ARRAY_EXT
 0x905E

	)

7834 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x905F

	)

7835 
	#GL_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x9060

	)

7836 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9061

	)

7837 
	#GL_UNSIGNED_INT_IMAGE_1D_EXT
 0x9062

	)

7838 
	#GL_UNSIGNED_INT_IMAGE_2D_EXT
 0x9063

	)

7839 
	#GL_UNSIGNED_INT_IMAGE_3D_EXT
 0x9064

	)

7840 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
 0x9065

	)

7841 
	#GL_UNSIGNED_INT_IMAGE_CUBE_EXT
 0x9066

	)

7842 
	#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
 0x9067

	)

7843 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
 0x9068

	)

7844 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
 0x9069

	)

7845 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x906A

	)

7846 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x906B

	)

7847 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x906C

	)

7848 
	#GL_MAX_IMAGE_SAMPLES_EXT
 0x906D

	)

7849 
	#GL_IMAGE_BINDING_FORMAT_EXT
 0x906E

	)

7850 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
 0x00000001

	)

7851 
	#GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
 0x00000002

	)

7852 
	#GL_UNIFORM_BARRIER_BIT_EXT
 0x00000004

	)

7853 
	#GL_TEXTURE_FETCH_BARRIER_BIT_EXT
 0x00000008

	)

7854 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
 0x00000020

	)

7855 
	#GL_COMMAND_BARRIER_BIT_EXT
 0x00000040

	)

7856 
	#GL_PIXEL_BUFFER_BARRIER_BIT_EXT
 0x00000080

	)

7857 
	#GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
 0x00000100

	)

7858 
	#GL_BUFFER_UPDATE_BARRIER_BIT_EXT
 0x00000200

	)

7859 
	#GL_FRAMEBUFFER_BARRIER_BIT_EXT
 0x00000400

	)

7860 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
 0x00000800

	)

7861 
	#GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
 0x00001000

	)

7862 
	#GL_ALL_BARRIER_BITS_EXT
 0xFFFFFFFF

	)

7863 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLöà
	tf‹m©
);

7864 (
APIENTRYP
 
	tPFNGLMEMORYBARRIEREXTPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

7865 #ifde‡
GL_GLEXT_PROTOTYPES


7866 
GLAPI
 
APIENTRY
 
glBödImageTextuªEXT
 (
GLuöt
 
ödex
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLöà
f‹m©
);

7867 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrEXT
 (
GLbôfõld
 
b¨rõrs
);

7871 #i‚de‡
GL_EXT_shadî_öãgî_mix


7872 
	#GL_EXT_shadî_öãgî_mix
 1

	)

7875 #i‚de‡
GL_EXT_shadow_funcs


7876 
	#GL_EXT_shadow_funcs
 1

	)

7879 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


7880 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

7881 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

7884 #i‚de‡
GL_EXT_•¨£_ãxtuª2


7885 
	#GL_EXT_•¨£_ãxtuª2
 1

	)

7888 #i‚de‡
GL_EXT_°ícû_˛ór_èg


7889 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

7890 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

7891 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

7892 (
APIENTRYP
 
	tPFNGLSTENCILCLEARTAGEXTPROC
Ë(
	tGLsizei
 
	t°ícûTagBôs
, 
	tGLuöt
 
	t°ícûCÀ¨Tag
);

7893 #ifde‡
GL_GLEXT_PROTOTYPES


7894 
GLAPI
 
APIENTRY
 
glSãncûCÀ¨TagEXT
 (
GLsizei
 
°ícûTagBôs
, 
GLuöt
 
°ícûCÀ¨Tag
);

7898 #i‚de‡
GL_EXT_°ícû_two_side


7899 
	#GL_EXT_°ícû_two_side
 1

	)

7900 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

7901 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

7902 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

7903 #ifde‡
GL_GLEXT_PROTOTYPES


7904 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
 
Á˚
);

7908 #i‚de‡
GL_EXT_°ícû_wøp


7909 
	#GL_EXT_°ícû_wøp
 1

	)

7910 
	#GL_INCR_WRAP_EXT
 0x8507

	)

7911 
	#GL_DECR_WRAP_EXT
 0x8508

	)

7914 #i‚de‡
GL_EXT_subãxtuª


7915 
	#GL_EXT_subãxtuª
 1

	)

7916 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7917 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7918 #ifde‡
GL_GLEXT_PROTOTYPES


7919 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7920 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7924 #i‚de‡
GL_EXT_ãxtuª


7925 
	#GL_EXT_ãxtuª
 1

	)

7926 
	#GL_ALPHA4_EXT
 0x803B

	)

7927 
	#GL_ALPHA8_EXT
 0x803C

	)

7928 
	#GL_ALPHA12_EXT
 0x803D

	)

7929 
	#GL_ALPHA16_EXT
 0x803E

	)

7930 
	#GL_LUMINANCE4_EXT
 0x803F

	)

7931 
	#GL_LUMINANCE8_EXT
 0x8040

	)

7932 
	#GL_LUMINANCE12_EXT
 0x8041

	)

7933 
	#GL_LUMINANCE16_EXT
 0x8042

	)

7934 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

7935 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

7936 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

7937 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

7938 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

7939 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

7940 
	#GL_INTENSITY_EXT
 0x8049

	)

7941 
	#GL_INTENSITY4_EXT
 0x804A

	)

7942 
	#GL_INTENSITY8_EXT
 0x804B

	)

7943 
	#GL_INTENSITY12_EXT
 0x804C

	)

7944 
	#GL_INTENSITY16_EXT
 0x804D

	)

7945 
	#GL_RGB2_EXT
 0x804E

	)

7946 
	#GL_RGB4_EXT
 0x804F

	)

7947 
	#GL_RGB5_EXT
 0x8050

	)

7948 
	#GL_RGB8_EXT
 0x8051

	)

7949 
	#GL_RGB10_EXT
 0x8052

	)

7950 
	#GL_RGB12_EXT
 0x8053

	)

7951 
	#GL_RGB16_EXT
 0x8054

	)

7952 
	#GL_RGBA2_EXT
 0x8055

	)

7953 
	#GL_RGBA4_EXT
 0x8056

	)

7954 
	#GL_RGB5_A1_EXT
 0x8057

	)

7955 
	#GL_RGBA8_EXT
 0x8058

	)

7956 
	#GL_RGB10_A2_EXT
 0x8059

	)

7957 
	#GL_RGBA12_EXT
 0x805A

	)

7958 
	#GL_RGBA16_EXT
 0x805B

	)

7959 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

7960 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

7961 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

7962 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

7963 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

7964 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

7965 
	#GL_REPLACE_EXT
 0x8062

	)

7966 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

7967 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

7968 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

7971 #i‚de‡
GL_EXT_ãxtuª3D


7972 
	#GL_EXT_ãxtuª3D
 1

	)

7973 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

7974 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

7975 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

7976 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

7977 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

7978 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

7979 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

7980 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

7981 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

7982 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7983 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7984 #ifde‡
GL_GLEXT_PROTOTYPES


7985 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7986 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7990 #i‚de‡
GL_EXT_ãxtuª_¨øy


7991 
	#GL_EXT_ãxtuª_¨øy
 1

	)

7992 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

7993 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

7994 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

7995 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

7996 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

7997 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

7998 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

7999 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

8000 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

8001 #ifde‡
GL_GLEXT_PROTOTYPES


8002 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

8006 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


8007 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

8008 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

8009 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

8010 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

8011 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

8012 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

8013 (
APIENTRYP
 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

8014 #ifde‡
GL_GLEXT_PROTOTYPES


8015 
GLAPI
 
APIENTRY
 
glTexBuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

8019 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


8020 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

8021 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

8022 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

8023 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

8024 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

8027 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


8028 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

8029 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

8030 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

8031 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

8032 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

8035 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


8036 
	#GL_EXT_ãxtuª_com¥essi⁄_s3tc
 1

	)

8037 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

8038 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

8039 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

8040 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

8043 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


8044 
	#GL_EXT_ãxtuª_cube_m≠
 1

	)

8045 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

8046 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

8047 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

8048 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

8049 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

8050 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

8051 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

8052 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

8053 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

8054 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

8055 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

8056 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

8059 #i‚de‡
GL_EXT_ãxtuª_ív_add


8060 
	#GL_EXT_ãxtuª_ív_add
 1

	)

8063 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


8064 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

8065 
	#GL_COMBINE_EXT
 0x8570

	)

8066 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

8067 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

8068 
	#GL_RGB_SCALE_EXT
 0x8573

	)

8069 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

8070 
	#GL_INTERPOLATE_EXT
 0x8575

	)

8071 
	#GL_CONSTANT_EXT
 0x8576

	)

8072 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

8073 
	#GL_PREVIOUS_EXT
 0x8578

	)

8074 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

8075 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

8076 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

8077 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

8078 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

8079 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

8080 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

8081 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

8082 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

8083 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

8084 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

8085 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

8088 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


8089 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

8090 
	#GL_DOT3_RGB_EXT
 0x8740

	)

8091 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

8094 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


8095 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

8096 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

8097 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

8100 #i‚de‡
GL_EXT_ãxtuª_fûãr_mömax


8101 
	#GL_EXT_ãxtuª_fûãr_mömax
 1

	)

8104 #i‚de‡
GL_EXT_ãxtuª_öãgî


8105 
	#GL_EXT_ãxtuª_öãgî
 1

	)

8106 
	#GL_RGBA32UI_EXT
 0x8D70

	)

8107 
	#GL_RGB32UI_EXT
 0x8D71

	)

8108 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

8109 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

8110 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

8111 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

8112 
	#GL_RGBA16UI_EXT
 0x8D76

	)

8113 
	#GL_RGB16UI_EXT
 0x8D77

	)

8114 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

8115 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

8116 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

8117 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

8118 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

8119 
	#GL_RGB8UI_EXT
 0x8D7D

	)

8120 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

8121 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

8122 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

8123 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

8124 
	#GL_RGBA32I_EXT
 0x8D82

	)

8125 
	#GL_RGB32I_EXT
 0x8D83

	)

8126 
	#GL_ALPHA32I_EXT
 0x8D84

	)

8127 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

8128 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

8129 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

8130 
	#GL_RGBA16I_EXT
 0x8D88

	)

8131 
	#GL_RGB16I_EXT
 0x8D89

	)

8132 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

8133 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

8134 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

8135 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

8136 
	#GL_RGBA8I_EXT
 0x8D8E

	)

8137 
	#GL_RGB8I_EXT
 0x8D8F

	)

8138 
	#GL_ALPHA8I_EXT
 0x8D90

	)

8139 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

8140 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

8141 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

8142 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

8143 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

8144 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

8145 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

8146 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

8147 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

8148 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

8149 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

8150 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

8151 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

8152 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

8153 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8154 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

8155 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8156 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

8157 (
APIENTRYP
 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

8158 (
APIENTRYP
 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

8159 #ifde‡
GL_GLEXT_PROTOTYPES


8160 
GLAPI
 
APIENTRY
 
glTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8161 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

8162 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8163 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

8164 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IiEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
, GLöà
Æpha
);

8165 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IuiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
, GLuöà
Æpha
);

8169 #i‚de‡
GL_EXT_ãxtuª_lod_büs


8170 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

8171 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

8172 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

8173 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

8176 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


8177 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

8178 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

8179 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

8180 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

8183 #i‚de‡
GL_EXT_ãxtuª_obje˘


8184 
	#GL_EXT_ãxtuª_obje˘
 1

	)

8185 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

8186 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

8187 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

8188 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

8189 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

8190 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

8191 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

8192 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

8193 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

8194 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8195 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

8196 #ifde‡
GL_GLEXT_PROTOTYPES


8197 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, GLboﬁó¿*
ªsidí˚s
);

8198 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

8199 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

8200 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

8201 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
 
ãxtuª
);

8202 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GL˛ampf
 *
¥i‹ôõs
);

8206 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


8207 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

8208 
	#GL_PERTURB_EXT
 0x85AE

	)

8209 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

8210 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

8211 #ifde‡
GL_GLEXT_PROTOTYPES


8212 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
 
mode
);

8216 #i‚de‡
GL_EXT_ãxtuª_sRGB


8217 
	#GL_EXT_ãxtuª_sRGB
 1

	)

8218 
	#GL_SRGB_EXT
 0x8C40

	)

8219 
	#GL_SRGB8_EXT
 0x8C41

	)

8220 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

8221 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

8222 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

8223 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

8224 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

8225 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

8226 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

8227 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

8228 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

8229 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

8230 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

8231 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

8232 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

8233 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

8236 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


8237 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

8238 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

8239 
	#GL_DECODE_EXT
 0x8A49

	)

8240 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

8243 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


8244 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

8245 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

8246 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

8247 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

8250 #i‚de‡
GL_EXT_ãxtuª_¢‹m


8251 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

8252 
	#GL_ALPHA_SNORM
 0x9010

	)

8253 
	#GL_LUMINANCE_SNORM
 0x9011

	)

8254 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

8255 
	#GL_INTENSITY_SNORM
 0x9013

	)

8256 
	#GL_ALPHA8_SNORM
 0x9014

	)

8257 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

8258 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

8259 
	#GL_INTENSITY8_SNORM
 0x9017

	)

8260 
	#GL_ALPHA16_SNORM
 0x9018

	)

8261 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

8262 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

8263 
	#GL_INTENSITY16_SNORM
 0x901B

	)

8264 
	#GL_RED_SNORM
 0x8F90

	)

8265 
	#GL_RG_SNORM
 0x8F91

	)

8266 
	#GL_RGB_SNORM
 0x8F92

	)

8267 
	#GL_RGBA_SNORM
 0x8F93

	)

8270 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


8271 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

8272 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

8273 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

8274 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

8275 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

8276 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

8279 #i‚de‡
GL_EXT_timî_quîy


8280 
	#GL_EXT_timî_quîy
 1

	)

8281 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

8282 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

8283 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

8284 #ifde‡
GL_GLEXT_PROTOTYPES


8285 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

8286 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

8290 #i‚de‡
GL_EXT_å™sf‹m_„edback


8291 
	#GL_EXT_å™sf‹m_„edback
 1

	)

8292 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

8293 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

8294 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

8295 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

8296 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

8297 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

8298 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

8299 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

8300 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

8301 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

8302 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

8303 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

8304 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

8305 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

8306 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

8307 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

8308 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

8309 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8310 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

8311 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

8312 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

8313 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

8314 #ifde‡
GL_GLEXT_PROTOTYPES


8315 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackEXT
 (
GLíum
 
¥imôiveMode
);

8316 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackEXT
 ();

8317 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

8318 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

8319 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£EXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

8320 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsEXT
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

8321 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögEXT
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

8325 #i‚de‡
GL_EXT_vîãx_¨øy


8326 
	#GL_EXT_vîãx_¨øy
 1

	)

8327 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

8328 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

8329 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

8330 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

8331 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

8332 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

8333 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

8334 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

8335 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

8336 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

8337 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

8338 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

8339 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

8340 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

8341 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

8342 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

8343 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

8344 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

8345 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

8346 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

8347 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

8348 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

8349 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

8350 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

8351 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

8352 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

8353 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

8354 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

8355 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

8356 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

8357 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

8358 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

8359 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

8360 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8361 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

8362 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

8363 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, **
	t∑øms
);

8364 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8365 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8366 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8367 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8368 #ifde‡
GL_GLEXT_PROTOTYPES


8369 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
 
i
);

8370 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8371 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

8372 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLboﬁón
 *
poöãr
);

8373 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
 
≤ame
, **
∑øms
);

8374 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8375 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8376 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8377 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8381 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


8382 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

8385 #i‚de‡
GL_EXT_vîãx_©åib_64bô


8386 
	#GL_EXT_vîãx_©åib_64bô
 1

	)

8387 
	#GL_DOUBLE_VEC2_EXT
 0x8FFC

	)

8388 
	#GL_DOUBLE_VEC3_EXT
 0x8FFD

	)

8389 
	#GL_DOUBLE_VEC4_EXT
 0x8FFE

	)

8390 
	#GL_DOUBLE_MAT2_EXT
 0x8F46

	)

8391 
	#GL_DOUBLE_MAT3_EXT
 0x8F47

	)

8392 
	#GL_DOUBLE_MAT4_EXT
 0x8F48

	)

8393 
	#GL_DOUBLE_MAT2x3_EXT
 0x8F49

	)

8394 
	#GL_DOUBLE_MAT2x4_EXT
 0x8F4A

	)

8395 
	#GL_DOUBLE_MAT3x2_EXT
 0x8F4B

	)

8396 
	#GL_DOUBLE_MAT3x4_EXT
 0x8F4C

	)

8397 
	#GL_DOUBLE_MAT4x2_EXT
 0x8F4D

	)

8398 
	#GL_DOUBLE_MAT4x3_EXT
 0x8F4E

	)

8399 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

8400 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8401 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8402 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8403 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8404 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8405 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8406 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8407 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

8408 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

8409 #ifde‡
GL_GLEXT_PROTOTYPES


8410 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

8411 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8412 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8413 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8414 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8415 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8416 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8417 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8418 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

8419 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdvEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

8423 #i‚de‡
GL_EXT_vîãx_shadî


8424 
	#GL_EXT_vîãx_shadî
 1

	)

8425 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

8426 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

8427 
	#GL_OP_INDEX_EXT
 0x8782

	)

8428 
	#GL_OP_NEGATE_EXT
 0x8783

	)

8429 
	#GL_OP_DOT3_EXT
 0x8784

	)

8430 
	#GL_OP_DOT4_EXT
 0x8785

	)

8431 
	#GL_OP_MUL_EXT
 0x8786

	)

8432 
	#GL_OP_ADD_EXT
 0x8787

	)

8433 
	#GL_OP_MADD_EXT
 0x8788

	)

8434 
	#GL_OP_FRAC_EXT
 0x8789

	)

8435 
	#GL_OP_MAX_EXT
 0x878A

	)

8436 
	#GL_OP_MIN_EXT
 0x878B

	)

8437 
	#GL_OP_SET_GE_EXT
 0x878C

	)

8438 
	#GL_OP_SET_LT_EXT
 0x878D

	)

8439 
	#GL_OP_CLAMP_EXT
 0x878E

	)

8440 
	#GL_OP_FLOOR_EXT
 0x878F

	)

8441 
	#GL_OP_ROUND_EXT
 0x8790

	)

8442 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

8443 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

8444 
	#GL_OP_POWER_EXT
 0x8793

	)

8445 
	#GL_OP_RECIP_EXT
 0x8794

	)

8446 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

8447 
	#GL_OP_SUB_EXT
 0x8796

	)

8448 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

8449 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

8450 
	#GL_OP_MOV_EXT
 0x8799

	)

8451 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

8452 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

8453 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

8454 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

8455 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

8456 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

8457 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

8458 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

8459 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

8460 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

8461 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

8462 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

8463 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

8464 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

8465 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

8466 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

8467 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

8468 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

8469 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

8470 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

8471 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

8472 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

8473 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

8474 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

8475 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

8476 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

8477 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

8478 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

8479 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

8480 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

8481 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

8482 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

8483 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

8484 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

8485 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

8486 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

8487 
	#GL_SCALAR_EXT
 0x87BE

	)

8488 
	#GL_VECTOR_EXT
 0x87BF

	)

8489 
	#GL_MATRIX_EXT
 0x87C0

	)

8490 
	#GL_VARIANT_EXT
 0x87C1

	)

8491 
	#GL_INVARIANT_EXT
 0x87C2

	)

8492 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

8493 
	#GL_LOCAL_EXT
 0x87C4

	)

8494 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

8495 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

8496 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

8497 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

8498 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

8499 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

8500 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

8501 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

8502 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

8503 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

8504 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

8505 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

8506 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

8507 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

8508 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

8509 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

8510 
	#GL_X_EXT
 0x87D5

	)

8511 
	#GL_Y_EXT
 0x87D6

	)

8512 
	#GL_Z_EXT
 0x87D7

	)

8513 
	#GL_W_EXT
 0x87D8

	)

8514 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

8515 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

8516 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

8517 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

8518 
	#GL_ZERO_EXT
 0x87DD

	)

8519 
	#GL_ONE_EXT
 0x87DE

	)

8520 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

8521 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

8522 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

8523 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

8524 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

8525 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

8526 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

8527 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

8528 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

8529 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

8530 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

8531 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

8532 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

8533 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

8534 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

8535 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

8536 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

8537 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

8538 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

8539 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

8540 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

8541 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

8542 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

8543 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

8544 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

8545 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

8546 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

8547 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

8548 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

8549 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

8550 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

8551 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

8552 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

8553 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

8554 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

8555 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

8556 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

8557 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

8558 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° *
	taddr
);

8559 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

8560 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

8561 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

8562 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

8563 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

8564 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

8565 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

8566 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

8567 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8568 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8569 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8570 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, **
	td©a
);

8571 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8572 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8573 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8574 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8575 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8576 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8577 #ifde‡
GL_GLEXT_PROTOTYPES


8578 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

8579 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

8580 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
 
id
);

8581 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuöà
ønge
);

8582 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
 
id
);

8583 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
);

8584 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
);

8585 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
, GLuöà
¨g3
);

8586 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

8587 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

8588 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

8589 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

8590 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
 
d©©y≥
, GLíum 
°‹agëy≥
, GLíum 
ønge
, GLuöà
comp⁄íts
);

8591 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

8592 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

8593 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
 
id
, c⁄° 
GLbyã
 *
addr
);

8594 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
 
id
, c⁄° 
GLsh‹t
 *
addr
);

8595 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
 
id
, c⁄° 
GLöt
 *
addr
);

8596 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
addr
);

8597 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
 
id
, c⁄° 
GLdoubÀ
 *
addr
);

8598 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
 
id
, c⁄° 
GLubyã
 *
addr
);

8599 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
 
id
, c⁄° 
GLush‹t
 *
addr
);

8600 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
 
id
, c⁄° GLuöà*
addr
);

8601 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, GLuöà
°ride
, c⁄° *
addr
);

8602 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

8603 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

8604 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
 
light
, GLíum 
vÆue
);

8605 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
 
Á˚
, GLíum 
vÆue
);

8606 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
co‹d
, GLíum 
vÆue
);

8607 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
vÆue
);

8608 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
 
vÆue
);

8609 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
 
id
, 
GLíum
 
ˇp
);

8610 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8611 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8612 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8613 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, **
d©a
);

8614 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8615 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8616 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8617 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8618 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8619 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8623 #i‚de‡
GL_EXT_vîãx_weightög


8624 
	#GL_EXT_vîãx_weightög
 1

	)

8625 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 0x0BA3

	)

8626 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

8627 
	#GL_MODELVIEW0_MATRIX_EXT
 0x0BA6

	)

8628 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

8629 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

8630 
	#GL_MODELVIEW0_EXT
 0x1700

	)

8631 
	#GL_MODELVIEW1_EXT
 0x850A

	)

8632 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

8633 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

8634 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

8635 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

8636 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

8637 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

8638 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

8639 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

8640 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

8641 #ifde‡
GL_GLEXT_PROTOTYPES


8642 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
 
weight
);

8643 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *
weight
);

8644 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

8648 #i‚de‡
GL_EXT_wödow_ª˘™gÀs


8649 
	#GL_EXT_wödow_ª˘™gÀs
 1

	)

8650 
	#GL_INCLUSIVE_EXT
 0x8F10

	)

8651 
	#GL_EXCLUSIVE_EXT
 0x8F11

	)

8652 
	#GL_WINDOW_RECTANGLE_EXT
 0x8F12

	)

8653 
	#GL_WINDOW_RECTANGLE_MODE_EXT
 0x8F13

	)

8654 
	#GL_MAX_WINDOW_RECTANGLES_EXT
 0x8F14

	)

8655 
	#GL_NUM_WINDOW_RECTANGLES_EXT
 0x8F15

	)

8656 (
APIENTRYP
 
	tPFNGLWINDOWRECTANGLESEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tbox
);

8657 #ifde‡
GL_GLEXT_PROTOTYPES


8658 
GLAPI
 
APIENTRY
 
glWödowRe˘™gÀsEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
box
);

8662 #i‚de‡
GL_EXT_x11_sync_obje˘


8663 
	#GL_EXT_x11_sync_obje˘
 1

	)

8664 
	#GL_SYNC_X11_FENCE_EXT
 0x90E1

	)

8665 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLIMPORTSYNCEXTPROC
Ë(
	tGLíum
 
	texã∫Æ_sync_ty≥
, 
	tGLöçå
 
	texã∫Æ_sync
, 
	tGLbôfõld
 
	tÊags
);

8666 #ifde‡
GL_GLEXT_PROTOTYPES


8667 
GLAPI
 
GLsync
 
APIENTRY
 
glImp‹tSyncEXT
 (
GLíum
 
exã∫Æ_sync_ty≥
, 
GLöçå
 
exã∫Æ_sync
, 
GLbôfõld
 
Êags
);

8671 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


8672 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

8673 (
APIENTRYP
 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

8674 #ifde‡
GL_GLEXT_PROTOTYPES


8675 
GLAPI
 
APIENTRY
 
glFømeTîmö©‹GREMEDY
 ();

8679 #i‚de‡
GL_GREMEDY_°rög_m¨kî


8680 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

8681 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

8682 #ifde‡
GL_GLEXT_PROTOTYPES


8683 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
 
Àn
, c⁄° *
°rög
);

8687 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


8688 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

8689 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

8690 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

8691 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

8692 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

8695 #i‚de‡
GL_HP_image_å™sf‹m


8696 
	#GL_HP_image_å™sf‹m
 1

	)

8697 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

8698 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

8699 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

8700 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

8701 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

8702 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

8703 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

8704 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

8705 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

8706 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

8707 
	#GL_CUBIC_HP
 0x815F

	)

8708 
	#GL_AVERAGE_HP
 0x8160

	)

8709 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

8710 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

8711 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

8712 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8713 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8714 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8715 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8716 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8717 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8718 #ifde‡
GL_GLEXT_PROTOTYPES


8719 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

8720 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

8721 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8722 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8723 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8724 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8728 #i‚de‡
GL_HP_oc˛usi⁄_ã°


8729 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

8730 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

8731 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

8734 #i‚de‡
GL_HP_ãxtuª_lightög


8735 
	#GL_HP_ãxtuª_lightög
 1

	)

8736 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

8737 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

8738 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

8741 #i‚de‡
GL_IBM_cuŒ_vîãx


8742 
	#GL_IBM_cuŒ_vîãx
 1

	)

8743 
	#GL_CULL_VERTEX_IBM
 103050

	)

8746 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


8747 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

8748 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

8749 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

8750 #ifde‡
GL_GLEXT_PROTOTYPES


8751 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
, GLöà
mode°ride
);

8752 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
, 
GLöt
 
mode°ride
);

8756 #i‚de‡
GL_IBM_ø°îpos_˛ù


8757 
	#GL_IBM_ø°îpos_˛ù
 1

	)

8758 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

8761 #i‚de‡
GL_IBM_°©ic_d©a


8762 
	#GL_IBM_°©ic_d©a
 1

	)

8763 
	#GL_ALL_STATIC_DATA_IBM
 103060

	)

8764 
	#GL_STATIC_VERTEX_ARRAY_IBM
 103061

	)

8765 (
APIENTRYP
 
	tPFNGLFLUSHSTATICDATAIBMPROC
Ë(
	tGLíum
 
	tèrgë
);

8766 #ifde‡
GL_GLEXT_PROTOTYPES


8767 
GLAPI
 
APIENTRY
 
glFlushSèticD©aIBM
 (
GLíum
 
èrgë
);

8771 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


8772 
	#GL_IBM_ãxtuª_múr‹ed_ª≥©
 1

	)

8773 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

8776 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


8777 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

8778 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

8779 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

8780 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

8781 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

8782 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

8783 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

8784 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

8785 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

8786 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

8787 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

8788 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

8789 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

8790 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

8791 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

8792 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

8793 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

8794 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8795 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8796 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
 **
	tpoöãr
, GLöà
	t±r°ride
);

8797 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8798 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8799 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8800 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8801 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8802 #ifde‡
GL_GLEXT_PROTOTYPES


8803 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8804 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8805 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
 
°ride
, c⁄° 
GLboﬁón
 **
poöãr
, GLöà
±r°ride
);

8806 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8807 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8808 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8809 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8810 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8814 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


8815 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

8816 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

8817 #ifde‡
GL_GLEXT_PROTOTYPES


8818 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

8822 #i‚de‡
GL_INGR_cﬁ‹_˛amp


8823 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

8824 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

8825 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

8826 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

8827 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

8828 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

8829 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

8830 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

8831 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

8834 #i‚de‡
GL_INGR_öãæa˚_ªad


8835 
	#GL_INGR_öãæa˚_ªad
 1

	)

8836 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

8839 #i‚de‡
GL_INTEL_‰agmít_shadî_‹dîög


8840 
	#GL_INTEL_‰agmít_shadî_‹dîög
 1

	)

8843 #i‚de‡
GL_INTEL_‰amebuf„r_CMAA


8844 
	#GL_INTEL_‰amebuf„r_CMAA
 1

	)

8845 (
APIENTRYP
 
	tPFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC
) ();

8846 #ifde‡
GL_GLEXT_PROTOTYPES


8847 
GLAPI
 
APIENTRY
 
glAµlyFømebuf„rAâachmítCMAAINTEL
 ();

8851 #i‚de‡
GL_INTEL_m≠_ãxtuª


8852 
	#GL_INTEL_m≠_ãxtuª
 1

	)

8853 
	#GL_TEXTURE_MEMORY_LAYOUT_INTEL
 0x83FF

	)

8854 
	#GL_LAYOUT_DEFAULT_INTEL
 0

	)

8855 
	#GL_LAYOUT_LINEAR_INTEL
 1

	)

8856 
	#GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
 2

	)

8857 (
APIENTRYP
 
	tPFNGLSYNCTEXTUREINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8858 (
APIENTRYP
 
	tPFNGLUNMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8859 *(
	tAPIENTRYP
 
	tPFNGLMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLbôfõld
 
	tac˚ss
, GLöà*
	t°ride
, 
	tGLíum
 *
	tœyout
);

8860 #ifde‡
GL_GLEXT_PROTOTYPES


8861 
GLAPI
 
APIENTRY
 
glSyncTextuªINTEL
 (
GLuöt
 
ãxtuª
);

8862 
GLAPI
 
APIENTRY
 
glUnm≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

8863 
GLAPI
 *
APIENTRY
 
glM≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLbôfõld
 
ac˚ss
, GLöà*
°ride
, 
GLíum
 *
œyout
);

8867 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


8868 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

8869 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

8870 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

8871 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

8872 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

8873 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

8874 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8875 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8876 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8877 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8878 #ifde‡
GL_GLEXT_PROTOTYPES


8879 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8880 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
 
ty≥
, c⁄° **
poöãr
);

8881 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8882 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8886 #i‚de‡
GL_INTEL_≥rf‹m™˚_quîy


8887 
	#GL_INTEL_≥rf‹m™˚_quîy
 1

	)

8888 
	#GL_PERFQUERY_SINGLE_CONTEXT_INTEL
 0x00000000

	)

8889 
	#GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
 0x00000001

	)

8890 
	#GL_PERFQUERY_WAIT_INTEL
 0x83FB

	)

8891 
	#GL_PERFQUERY_FLUSH_INTEL
 0x83FA

	)

8892 
	#GL_PERFQUERY_DONOT_FLUSH_INTEL
 0x83F9

	)

8893 
	#GL_PERFQUERY_COUNTER_EVENT_INTEL
 0x94F0

	)

8894 
	#GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
 0x94F1

	)

8895 
	#GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
 0x94F2

	)

8896 
	#GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
 0x94F3

	)

8897 
	#GL_PERFQUERY_COUNTER_RAW_INTEL
 0x94F4

	)

8898 
	#GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
 0x94F5

	)

8899 
	#GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
 0x94F8

	)

8900 
	#GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
 0x94F9

	)

8901 
	#GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
 0x94FA

	)

8902 
	#GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
 0x94FB

	)

8903 
	#GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
 0x94FC

	)

8904 
	#GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
 0x94FD

	)

8905 
	#GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
 0x94FE

	)

8906 
	#GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
 0x94FF

	)

8907 
	#GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
 0x9500

	)

8908 (
APIENTRYP
 
	tPFNGLBEGINPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8909 (
APIENTRYP
 
	tPFNGLCREATEPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà*
	tquîyH™dÀ
);

8910 (
APIENTRYP
 
	tPFNGLDELETEPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8911 (
APIENTRYP
 
	tPFNGLENDPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8912 (
APIENTRYP
 
	tPFNGLGETFIRSTPERFQUERYIDINTELPROC
Ë(
	tGLuöt
 *
	tquîyId
);

8913 (
APIENTRYP
 
	tPFNGLGETNEXTPERFQUERYIDINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà*
	t√xtQuîyId
);

8914 (
APIENTRYP
 
	tPFNGLGETPERFCOUNTERINFOINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà
	tcou¡îId
, GLuöà
	tcou¡îNameLígth
, 
	tGLch¨
 *
	tcou¡îName
, GLuöà
	tcou¡îDescLígth
, GLch¨ *
	tcou¡îDesc
, GLuöà*
	tcou¡îOff£t
, GLuöà*
	tcou¡îD©aSize
, GLuöà*
	tcou¡îTy≥Enum
, GLuöà*
	tcou¡îD©aTy≥Enum
, 
	tGLuöt64
 *
	tøwCou¡îMaxVÆue
);

8915 (
APIENTRYP
 
	tPFNGLGETPERFQUERYDATAINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
, GLuöà
	tÊags
, 
	tGLsizei
 
	td©aSize
, 
	tGLvoid
 *
	td©a
, GLuöà*
	tbyãsWrôãn
);

8916 (
APIENTRYP
 
	tPFNGLGETPERFQUERYIDBYNAMEINTELPROC
Ë(
	tGLch¨
 *
	tquîyName
, 
	tGLuöt
 *
	tquîyId
);

8917 (
APIENTRYP
 
	tPFNGLGETPERFQUERYINFOINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà
	tquîyNameLígth
, 
	tGLch¨
 *
	tquîyName
, GLuöà*
	td©aSize
, GLuöà*
	tnoCou¡îs
, GLuöà*
	tnoIn°™˚s
, GLuöà*
	tˇpsMask
);

8918 #ifde‡
GL_GLEXT_PROTOTYPES


8919 
GLAPI
 
APIENTRY
 
glBegöPîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8920 
GLAPI
 
APIENTRY
 
glCª©ePîfQuîyINTEL
 (
GLuöt
 
quîyId
, GLuöà*
quîyH™dÀ
);

8921 
GLAPI
 
APIENTRY
 
glDñëePîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8922 
GLAPI
 
APIENTRY
 
glEndPîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8923 
GLAPI
 
APIENTRY
 
glGëFú°PîfQuîyIdINTEL
 (
GLuöt
 *
quîyId
);

8924 
GLAPI
 
APIENTRY
 
glGëNextPîfQuîyIdINTEL
 (
GLuöt
 
quîyId
, GLuöà*
√xtQuîyId
);

8925 
GLAPI
 
APIENTRY
 
glGëPîfCou¡îInfoINTEL
 (
GLuöt
 
quîyId
, GLuöà
cou¡îId
, GLuöà
cou¡îNameLígth
, 
GLch¨
 *
cou¡îName
, GLuöà
cou¡îDescLígth
, GLch¨ *
cou¡îDesc
, GLuöà*
cou¡îOff£t
, GLuöà*
cou¡îD©aSize
, GLuöà*
cou¡îTy≥Enum
, GLuöà*
cou¡îD©aTy≥Enum
, 
GLuöt64
 *
øwCou¡îMaxVÆue
);

8926 
GLAPI
 
APIENTRY
 
glGëPîfQuîyD©aINTEL
 (
GLuöt
 
quîyH™dÀ
, GLuöà
Êags
, 
GLsizei
 
d©aSize
, 
GLvoid
 *
d©a
, GLuöà*
byãsWrôãn
);

8927 
GLAPI
 
APIENTRY
 
glGëPîfQuîyIdByNameINTEL
 (
GLch¨
 *
quîyName
, 
GLuöt
 *
quîyId
);

8928 
GLAPI
 
APIENTRY
 
glGëPîfQuîyInfoINTEL
 (
GLuöt
 
quîyId
, GLuöà
quîyNameLígth
, 
GLch¨
 *
quîyName
, GLuöà*
d©aSize
, GLuöà*
noCou¡îs
, GLuöà*
noIn°™˚s
, GLuöà*
ˇpsMask
);

8932 #i‚de‡
GL_MESAX_ãxtuª_°ack


8933 
	#GL_MESAX_ãxtuª_°ack
 1

	)

8934 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

8935 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

8936 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

8937 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

8938 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

8939 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

8942 #i‚de‡
GL_MESA_∑ck_övît


8943 
	#GL_MESA_∑ck_övît
 1

	)

8944 
	#GL_PACK_INVERT_MESA
 0x8758

	)

8947 #i‚de‡
GL_MESA_ªsize_buf„rs


8948 
	#GL_MESA_ªsize_buf„rs
 1

	)

8949 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

8950 #ifde‡
GL_GLEXT_PROTOTYPES


8951 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

8955 #i‚de‡
GL_MESA_wödow_pos


8956 
	#GL_MESA_wödow_pos
 1

	)

8957 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8958 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8959 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

8960 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8961 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

8962 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8963 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

8964 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8965 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8966 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8967 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8968 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8969 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

8970 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8971 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

8972 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8973 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8974 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8975 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

8976 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8977 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8978 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8979 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

8980 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8981 #ifde‡
GL_GLEXT_PROTOTYPES


8982 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8983 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8984 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

8985 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8986 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
 
x
, GLöà
y
);

8987 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *
v
);

8988 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
);

8989 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8990 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8991 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8992 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

8993 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8994 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

8995 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *
v
);

8996 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

8997 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8998 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8999 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

9000 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9001 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

9002 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9003 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *
v
);

9004 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

9005 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *
v
);

9009 #i‚de‡
GL_MESA_ycb¸_ãxtuª


9010 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

9011 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

9012 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

9013 
	#GL_YCBCR_MESA
 0x8757

	)

9016 #i‚de‡
GL_NVX_c⁄dôi⁄Æ_ªndî


9017 
	#GL_NVX_c⁄dôi⁄Æ_ªndî
 1

	)

9018 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVXPROC
Ë(
	tGLuöt
 
	tid
);

9019 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVXPROC
) ();

9020 #ifde‡
GL_GLEXT_PROTOTYPES


9021 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNVX
 (
GLuöt
 
id
);

9022 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNVX
 ();

9026 #i‚de‡
GL_NVX_gpu_mem‹y_öfo


9027 
	#GL_NVX_gpu_mem‹y_öfo
 1

	)

9028 
	#GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
 0x9047

	)

9029 
	#GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
 0x9048

	)

9030 
	#GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
 0x9049

	)

9031 
	#GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
 0x904A

	)

9032 
	#GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
 0x904B

	)

9035 #i‚de‡
GL_NV_bödÀss_mu…i_døw_ödúe˘


9036 
	#GL_NV_bödÀss_mu…i_døw_ödúe˘
 1

	)

9037 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9038 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9039 #ifde‡
GL_GLEXT_PROTOTYPES


9040 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘BödÀssNV
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9041 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘BödÀssNV
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9045 #i‚de‡
GL_NV_bödÀss_mu…i_døw_ödúe˘_cou¡


9046 
	#GL_NV_bödÀss_mu…i_døw_ödúe˘_cou¡
 1

	)

9047 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	tmaxDøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9048 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	tmaxDøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9049 #ifde‡
GL_GLEXT_PROTOTYPES


9050 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘BödÀssCou¡NV
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
maxDøwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9051 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘BödÀssCou¡NV
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
maxDøwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9055 #i‚de‡
GL_NV_bödÀss_ãxtuª


9056 
	#GL_NV_bödÀss_ãxtuª
 1

	)

9057 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
);

9058 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

9059 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9060 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9061 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

9062 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

9063 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9064 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

9065 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

9066 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

9067 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

9068 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9069 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9070 #ifde‡
GL_GLEXT_PROTOTYPES


9071 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀNV
 (
GLuöt
 
ãxtuª
);

9072 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

9073 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9074 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

9075 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀNV
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

9076 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

9077 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

9078 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

9079 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

9080 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

9081 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

9082 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9083 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9087 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d


9088 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d
 1

	)

9089 
	#GL_BLEND_OVERLAP_NV
 0x9281

	)

9090 
	#GL_BLEND_PREMULTIPLIED_SRC_NV
 0x9280

	)

9091 
	#GL_BLUE_NV
 0x1905

	)

9092 
	#GL_COLORBURN_NV
 0x929A

	)

9093 
	#GL_COLORDODGE_NV
 0x9299

	)

9094 
	#GL_CONJOINT_NV
 0x9284

	)

9095 
	#GL_CONTRAST_NV
 0x92A1

	)

9096 
	#GL_DARKEN_NV
 0x9297

	)

9097 
	#GL_DIFFERENCE_NV
 0x929E

	)

9098 
	#GL_DISJOINT_NV
 0x9283

	)

9099 
	#GL_DST_ATOP_NV
 0x928F

	)

9100 
	#GL_DST_IN_NV
 0x928B

	)

9101 
	#GL_DST_NV
 0x9287

	)

9102 
	#GL_DST_OUT_NV
 0x928D

	)

9103 
	#GL_DST_OVER_NV
 0x9289

	)

9104 
	#GL_EXCLUSION_NV
 0x92A0

	)

9105 
	#GL_GREEN_NV
 0x1904

	)

9106 
	#GL_HARDLIGHT_NV
 0x929B

	)

9107 
	#GL_HARDMIX_NV
 0x92A9

	)

9108 
	#GL_HSL_COLOR_NV
 0x92AF

	)

9109 
	#GL_HSL_HUE_NV
 0x92AD

	)

9110 
	#GL_HSL_LUMINOSITY_NV
 0x92B0

	)

9111 
	#GL_HSL_SATURATION_NV
 0x92AE

	)

9112 
	#GL_INVERT_OVG_NV
 0x92B4

	)

9113 
	#GL_INVERT_RGB_NV
 0x92A3

	)

9114 
	#GL_LIGHTEN_NV
 0x9298

	)

9115 
	#GL_LINEARBURN_NV
 0x92A5

	)

9116 
	#GL_LINEARDODGE_NV
 0x92A4

	)

9117 
	#GL_LINEARLIGHT_NV
 0x92A7

	)

9118 
	#GL_MINUS_CLAMPED_NV
 0x92B3

	)

9119 
	#GL_MINUS_NV
 0x929F

	)

9120 
	#GL_MULTIPLY_NV
 0x9294

	)

9121 
	#GL_OVERLAY_NV
 0x9296

	)

9122 
	#GL_PINLIGHT_NV
 0x92A8

	)

9123 
	#GL_PLUS_CLAMPED_ALPHA_NV
 0x92B2

	)

9124 
	#GL_PLUS_CLAMPED_NV
 0x92B1

	)

9125 
	#GL_PLUS_DARKER_NV
 0x9292

	)

9126 
	#GL_PLUS_NV
 0x9291

	)

9127 
	#GL_RED_NV
 0x1903

	)

9128 
	#GL_SCREEN_NV
 0x9295

	)

9129 
	#GL_SOFTLIGHT_NV
 0x929C

	)

9130 
	#GL_SRC_ATOP_NV
 0x928E

	)

9131 
	#GL_SRC_IN_NV
 0x928A

	)

9132 
	#GL_SRC_NV
 0x9286

	)

9133 
	#GL_SRC_OUT_NV
 0x928C

	)

9134 
	#GL_SRC_OVER_NV
 0x9288

	)

9135 
	#GL_UNCORRELATED_NV
 0x9282

	)

9136 
	#GL_VIVIDLIGHT_NV
 0x92A6

	)

9137 
	#GL_XOR_NV
 0x1506

	)

9138 (
APIENTRYP
 
	tPFNGLBLENDPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

9139 (
APIENTRYP
 
	tPFNGLBLENDBARRIERNVPROC
) ();

9140 #ifde‡
GL_GLEXT_PROTOTYPES


9141 
GLAPI
 
APIENTRY
 
glBÀndP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

9142 
GLAPI
 
APIENTRY
 
glBÀndB¨rõrNV
 ();

9146 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít


9147 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít
 1

	)

9148 
	#GL_BLEND_ADVANCED_COHERENT_NV
 0x9285

	)

9151 #i‚de‡
GL_NV_bÀnd_squ¨e


9152 
	#GL_NV_bÀnd_squ¨e
 1

	)

9155 #i‚de‡
GL_NV_˛ù_•a˚_w_sˇlög


9156 
	#GL_NV_˛ù_•a˚_w_sˇlög
 1

	)

9157 
	#GL_VIEWPORT_POSITION_W_SCALE_NV
 0x937C

	)

9158 
	#GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV
 0x937D

	)

9159 
	#GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV
 0x937E

	)

9160 (
APIENTRYP
 
	tPFNGLVIEWPORTPOSITIONWSCALENVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	txc€ff
, GLÊﬂà
	tyc€ff
);

9161 #ifde‡
GL_GLEXT_PROTOTYPES


9162 
GLAPI
 
APIENTRY
 
glVõwp‹tPosôi⁄WSˇÀNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
xc€ff
, GLÊﬂà
yc€ff
);

9166 #i‚de‡
GL_NV_comm™d_li°


9167 
	#GL_NV_comm™d_li°
 1

	)

9168 
	#GL_TERMINATE_SEQUENCE_COMMAND_NV
 0x0000

	)

9169 
	#GL_NOP_COMMAND_NV
 0x0001

	)

9170 
	#GL_DRAW_ELEMENTS_COMMAND_NV
 0x0002

	)

9171 
	#GL_DRAW_ARRAYS_COMMAND_NV
 0x0003

	)

9172 
	#GL_DRAW_ELEMENTS_STRIP_COMMAND_NV
 0x0004

	)

9173 
	#GL_DRAW_ARRAYS_STRIP_COMMAND_NV
 0x0005

	)

9174 
	#GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV
 0x0006

	)

9175 
	#GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV
 0x0007

	)

9176 
	#GL_ELEMENT_ADDRESS_COMMAND_NV
 0x0008

	)

9177 
	#GL_ATTRIBUTE_ADDRESS_COMMAND_NV
 0x0009

	)

9178 
	#GL_UNIFORM_ADDRESS_COMMAND_NV
 0x000A

	)

9179 
	#GL_BLEND_COLOR_COMMAND_NV
 0x000B

	)

9180 
	#GL_STENCIL_REF_COMMAND_NV
 0x000C

	)

9181 
	#GL_LINE_WIDTH_COMMAND_NV
 0x000D

	)

9182 
	#GL_POLYGON_OFFSET_COMMAND_NV
 0x000E

	)

9183 
	#GL_ALPHA_REF_COMMAND_NV
 0x000F

	)

9184 
	#GL_VIEWPORT_COMMAND_NV
 0x0010

	)

9185 
	#GL_SCISSOR_COMMAND_NV
 0x0011

	)

9186 
	#GL_FRONT_FACE_COMMAND_NV
 0x0012

	)

9187 (
APIENTRYP
 
	tPFNGLCREATESTATESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t°©es
);

9188 (
APIENTRYP
 
	tPFNGLDELETESTATESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t°©es
);

9189 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSTATENVPROC
Ë(
	tGLuöt
 
	t°©e
);

9190 (
APIENTRYP
 
	tPFNGLSTATECAPTURENVPROC
Ë(
	tGLuöt
 
	t°©e
, 
	tGLíum
 
	tmode
);

9191 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETCOMMANDHEADERNVPROC
Ë(
	tGLíum
 
	ttokíID
, 
	tGLuöt
 
	tsize
);

9192 
GLush‹t
 (
	tAPIENTRYP
 
	tPFNGLGETSTAGEINDEXNVPROC
Ë(
	tGLíum
 
	tshadîty≥
);

9193 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
, 
	tGLuöt
 
	tbuf„r
, c⁄° 
	tGLöçå
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, GLuöà
	tcou¡
);

9194 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSADDRESSNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
, c⁄° 
	tGLuöt64
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, 
	tGLuöt
 
	tcou¡
);

9195 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSSTATESNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, c⁄° 
	tGLöçå
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° GLuöà*
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9196 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSSTATESADDRESSNVPROC
Ë(c⁄° 
	tGLuöt64
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° 
	tGLuöt
 *
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9197 (
APIENTRYP
 
	tPFNGLCREATECOMMANDLISTSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tli°s
);

9198 (
APIENTRYP
 
	tPFNGLDELETECOMMANDLISTSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tli°s
);

9199 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISCOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9200 (
APIENTRYP
 
	tPFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC
Ë(
	tGLuöt
 
	tli°
, GLuöà
	t£gmít
, c⁄° **
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° GLuöà*
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9201 (
APIENTRYP
 
	tPFNGLCOMMANDLISTSEGMENTSNVPROC
Ë(
	tGLuöt
 
	tli°
, GLuöà
	t£gmíts
);

9202 (
APIENTRYP
 
	tPFNGLCOMPILECOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9203 (
APIENTRYP
 
	tPFNGLCALLCOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9204 #ifde‡
GL_GLEXT_PROTOTYPES


9205 
GLAPI
 
APIENTRY
 
glCª©eSèãsNV
 (
GLsizei
 
n
, 
GLuöt
 *
°©es
);

9206 
GLAPI
 
APIENTRY
 
glDñëeSèãsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
°©es
);

9207 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSèãNV
 (
GLuöt
 
°©e
);

9208 
GLAPI
 
APIENTRY
 
glSèãC≠tuªNV
 (
GLuöt
 
°©e
, 
GLíum
 
mode
);

9209 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëComm™dHódîNV
 (
GLíum
 
tokíID
, GLuöà
size
);

9210 
GLAPI
 
GLush‹t
 
APIENTRY
 
glGëSègeIndexNV
 (
GLíum
 
shadîty≥
);

9211 
GLAPI
 
APIENTRY
 
glDøwComm™dsNV
 (
GLíum
 
¥imôiveMode
, 
GLuöt
 
buf„r
, c⁄° 
GLöçå
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, GLuöà
cou¡
);

9212 
GLAPI
 
APIENTRY
 
glDøwComm™dsAddªssNV
 (
GLíum
 
¥imôiveMode
, c⁄° 
GLuöt64
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, 
GLuöt
 
cou¡
);

9213 
GLAPI
 
APIENTRY
 
glDøwComm™dsSèãsNV
 (
GLuöt
 
buf„r
, c⁄° 
GLöçå
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° GLuöà*
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9214 
GLAPI
 
APIENTRY
 
glDøwComm™dsSèãsAddªssNV
 (c⁄° 
GLuöt64
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° 
GLuöt
 *
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9215 
GLAPI
 
APIENTRY
 
glCª©eComm™dLi°sNV
 (
GLsizei
 
n
, 
GLuöt
 *
li°s
);

9216 
GLAPI
 
APIENTRY
 
glDñëeComm™dLi°sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
li°s
);

9217 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsComm™dLi°NV
 (
GLuöt
 
li°
);

9218 
GLAPI
 
APIENTRY
 
glLi°DøwComm™dsSèãsClõ¡NV
 (
GLuöt
 
li°
, GLuöà
£gmít
, c⁄° **
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° GLuöà*
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9219 
GLAPI
 
APIENTRY
 
glComm™dLi°SegmítsNV
 (
GLuöt
 
li°
, GLuöà
£gmíts
);

9220 
GLAPI
 
APIENTRY
 
glCompûeComm™dLi°NV
 (
GLuöt
 
li°
);

9221 
GLAPI
 
APIENTRY
 
glCÆlComm™dLi°NV
 (
GLuöt
 
li°
);

9225 #i‚de‡
GL_NV_compuã_¥ogøm5


9226 
	#GL_NV_compuã_¥ogøm5
 1

	)

9227 
	#GL_COMPUTE_PROGRAM_NV
 0x90FB

	)

9228 
	#GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
 0x90FC

	)

9231 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


9232 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

9233 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

9234 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

9235 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

9236 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

9237 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

9238 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

9239 #ifde‡
GL_GLEXT_PROTOTYPES


9240 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNV
 (
GLuöt
 
id
, 
GLíum
 
mode
);

9241 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNV
 ();

9245 #i‚de‡
GL_NV_c⁄£rv©ive_ø°î


9246 
	#GL_NV_c⁄£rv©ive_ø°î
 1

	)

9247 
	#GL_CONSERVATIVE_RASTERIZATION_NV
 0x9346

	)

9248 
	#GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV
 0x9347

	)

9249 
	#GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV
 0x9348

	)

9250 
	#GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV
 0x9349

	)

9251 (
APIENTRYP
 
	tPFNGLSUBPIXELPRECISIONBIASNVPROC
Ë(
	tGLuöt
 
	txbôs
, GLuöà
	tybôs
);

9252 #ifde‡
GL_GLEXT_PROTOTYPES


9253 
GLAPI
 
APIENTRY
 
glSubpixñPªcisi⁄BüsNV
 (
GLuöt
 
xbôs
, GLuöà
ybôs
);

9257 #i‚de‡
GL_NV_c⁄£rv©ive_ø°î_dû©e


9258 
	#GL_NV_c⁄£rv©ive_ø°î_dû©e
 1

	)

9259 
	#GL_CONSERVATIVE_RASTER_DILATE_NV
 0x9379

	)

9260 
	#GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV
 0x937A

	)

9261 
	#GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV
 0x937B

	)

9262 (
APIENTRYP
 
	tPFNGLCONSERVATIVERASTERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

9263 #ifde‡
GL_GLEXT_PROTOTYPES


9264 
GLAPI
 
APIENTRY
 
glC⁄£rv©iveRa°îP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

9268 #i‚de‡
GL_NV_c⁄£rv©ive_ø°î_¥e_¢≠_åüngÀs


9269 
	#GL_NV_c⁄£rv©ive_ø°î_¥e_¢≠_åüngÀs
 1

	)

9270 
	#GL_CONSERVATIVE_RASTER_MODE_NV
 0x954D

	)

9271 
	#GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV
 0x954E

	)

9272 
	#GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV
 0x954F

	)

9273 (
APIENTRYP
 
	tPFNGLCONSERVATIVERASTERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9274 #ifde‡
GL_GLEXT_PROTOTYPES


9275 
GLAPI
 
APIENTRY
 
glC⁄£rv©iveRa°îP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9279 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


9280 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

9281 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

9282 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

9285 #i‚de‡
GL_NV_c›y_image


9286 
	#GL_NV_c›y_image
 1

	)

9287 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

9288 #ifde‡
GL_GLEXT_PROTOTYPES


9289 
GLAPI
 
APIENTRY
 
glC›yImageSubD©aNV
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

9293 #i‚de‡
GL_NV_dìp_ãxtuª3D


9294 
	#GL_NV_dìp_ãxtuª3D
 1

	)

9295 
	#GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
 0x90D0

	)

9296 
	#GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
 0x90D1

	)

9299 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


9300 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

9301 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

9302 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

9303 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

9304 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

9305 (
APIENTRYP
 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

9306 (
APIENTRYP
 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

9307 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

9308 #ifde‡
GL_GLEXT_PROTOTYPES


9309 
GLAPI
 
APIENTRY
 
glDïthR™gedNV
 (
GLdoubÀ
 
zNór
, GLdoubÀ 
zF¨
);

9310 
GLAPI
 
APIENTRY
 
glCÀ¨DïthdNV
 (
GLdoubÀ
 
dïth
);

9311 
GLAPI
 
APIENTRY
 
glDïthBoundsdNV
 (
GLdoubÀ
 
zmö
, GLdoubÀ 
zmax
);

9315 #i‚de‡
GL_NV_dïth_˛amp


9316 
	#GL_NV_dïth_˛amp
 1

	)

9317 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

9320 #i‚de‡
GL_NV_døw_ãxtuª


9321 
	#GL_NV_døw_ãxtuª
 1

	)

9322 (
APIENTRYP
 
	tPFNGLDRAWTEXTURENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
, 
	tGLÊﬂt
 
	tx0
, GLÊﬂà
	ty0
, GLÊﬂà
	tx1
, GLÊﬂà
	ty1
, GLÊﬂà
	tz
, GLÊﬂà
	ts0
, GLÊﬂà
	tt0
, GLÊﬂà
	ts1
, GLÊﬂà
	tt1
);

9323 #ifde‡
GL_GLEXT_PROTOTYPES


9324 
GLAPI
 
APIENTRY
 
glDøwTextuªNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
, 
GLÊﬂt
 
x0
, GLÊﬂà
y0
, GLÊﬂà
x1
, GLÊﬂà
y1
, GLÊﬂà
z
, GLÊﬂà
s0
, GLÊﬂà
t0
, GLÊﬂà
s1
, GLÊﬂà
t1
);

9328 #i‚de‡
GL_NV_evÆu©‹s


9329 
	#GL_NV_evÆu©‹s
 1

	)

9330 
	#GL_EVAL_2D_NV
 0x86C0

	)

9331 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

9332 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

9333 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

9334 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

9335 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

9336 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

9337 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

9338 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

9339 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

9340 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

9341 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

9342 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

9343 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

9344 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

9345 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

9346 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

9347 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

9348 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

9349 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

9350 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

9351 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

9352 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

9353 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

9354 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° *
	tpoöts
);

9355 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9356 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9357 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, *
	tpoöts
);

9358 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9359 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9360 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9361 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9362 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

9363 #ifde‡
GL_GLEXT_PROTOTYPES


9364 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLöt
 
u‹dî
, GLöà
v‹dî
, 
GLboﬁón
 
∑cked
, c⁄° *
poöts
);

9365 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9366 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9367 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLboﬁón
 
∑cked
, *
poöts
);

9368 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9369 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9370 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9371 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9372 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
 
èrgë
, GLíum 
mode
);

9376 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


9377 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

9378 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

9379 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

9380 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

9381 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

9382 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

9383 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

9384 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

9385 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

9386 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

9387 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

9388 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

9389 (
APIENTRYP
 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

9390 (
APIENTRYP
 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

9391 #ifde‡
GL_GLEXT_PROTOTYPES


9392 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efvNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

9393 
GLAPI
 
APIENTRY
 
glSam∂eMaskIndexedNV
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

9394 
GLAPI
 
APIENTRY
 
glTexRídîbuf„rNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

9398 #i‚de‡
GL_NV_„n˚


9399 
	#GL_NV_„n˚
 1

	)

9400 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

9401 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

9402 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

9403 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

9404 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

9405 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9406 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9407 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9408 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9409 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

9410 #ifde‡
GL_GLEXT_PROTOTYPES


9411 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

9412 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

9413 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
 
„n˚
);

9414 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

9415 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9416 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
 
„n˚
);

9417 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

9421 #i‚de‡
GL_NV_fûl_ª˘™gÀ


9422 
	#GL_NV_fûl_ª˘™gÀ
 1

	)

9423 
	#GL_FILL_RECTANGLE_NV
 0x933C

	)

9426 #i‚de‡
GL_NV_Êﬂt_buf„r


9427 
	#GL_NV_Êﬂt_buf„r
 1

	)

9428 
	#GL_FLOAT_R_NV
 0x8880

	)

9429 
	#GL_FLOAT_RG_NV
 0x8881

	)

9430 
	#GL_FLOAT_RGB_NV
 0x8882

	)

9431 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

9432 
	#GL_FLOAT_R16_NV
 0x8884

	)

9433 
	#GL_FLOAT_R32_NV
 0x8885

	)

9434 
	#GL_FLOAT_RG16_NV
 0x8886

	)

9435 
	#GL_FLOAT_RG32_NV
 0x8887

	)

9436 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

9437 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

9438 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

9439 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

9440 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

9441 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

9442 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

9445 #i‚de‡
GL_NV_fog_di°™˚


9446 
	#GL_NV_fog_di°™˚
 1

	)

9447 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

9448 
	#GL_EYE_RADIAL_NV
 0x855B

	)

9449 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

9452 #i‚de‡
GL_NV_‰agmít_covîage_to_cﬁ‹


9453 
	#GL_NV_‰agmít_covîage_to_cﬁ‹
 1

	)

9454 
	#GL_FRAGMENT_COVERAGE_TO_COLOR_NV
 0x92DD

	)

9455 
	#GL_FRAGMENT_COVERAGE_COLOR_NV
 0x92DE

	)

9456 (
APIENTRYP
 
	tPFNGLFRAGMENTCOVERAGECOLORNVPROC
Ë(
	tGLuöt
 
	tcﬁ‹
);

9457 #ifde‡
GL_GLEXT_PROTOTYPES


9458 
GLAPI
 
APIENTRY
 
glFøgmítCovîageCﬁ‹NV
 (
GLuöt
 
cﬁ‹
);

9462 #i‚de‡
GL_NV_‰agmít_¥ogøm


9463 
	#GL_NV_‰agmít_¥ogøm
 1

	)

9464 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

9465 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

9466 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

9467 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

9468 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

9469 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

9470 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9471 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9472 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

9473 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9474 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

9475 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

9476 #ifde‡
GL_GLEXT_PROTOTYPES


9477 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9478 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLÊﬂt
 *
v
);

9479 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

9480 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLdoubÀ
 *
v
);

9481 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
∑øms
);

9482 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 *
∑øms
);

9486 #i‚de‡
GL_NV_‰agmít_¥ogøm2


9487 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

9488 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

9489 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

9490 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

9491 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

9492 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

9495 #i‚de‡
GL_NV_‰agmít_¥ogøm4


9496 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

9499 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


9500 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

9503 #i‚de‡
GL_NV_‰agmít_shadî_öãæock


9504 
	#GL_NV_‰agmít_shadî_öãæock
 1

	)

9507 #i‚de‡
GL_NV_‰amebuf„r_mixed_ßm∂es


9508 
	#GL_NV_‰amebuf„r_mixed_ßm∂es
 1

	)

9509 
	#GL_COVERAGE_MODULATION_TABLE_NV
 0x9331

	)

9510 
	#GL_COLOR_SAMPLES_NV
 0x8E20

	)

9511 
	#GL_DEPTH_SAMPLES_NV
 0x932D

	)

9512 
	#GL_STENCIL_SAMPLES_NV
 0x932E

	)

9513 
	#GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV
 0x932F

	)

9514 
	#GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV
 0x9330

	)

9515 
	#GL_COVERAGE_MODULATION_NV
 0x9332

	)

9516 
	#GL_COVERAGE_MODULATION_TABLE_SIZE_NV
 0x9333

	)

9517 (
APIENTRYP
 
	tPFNGLCOVERAGEMODULATIONTABLENVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9518 (
APIENTRYP
 
	tPFNGLGETCOVERAGEMODULATIONTABLENVPROC
Ë(
	tGLsizei
 
	tbufsize
, 
	tGLÊﬂt
 *
	tv
);

9519 (
APIENTRYP
 
	tPFNGLCOVERAGEMODULATIONNVPROC
Ë(
	tGLíum
 
	tcomp⁄íts
);

9520 #ifde‡
GL_GLEXT_PROTOTYPES


9521 
GLAPI
 
APIENTRY
 
glCovîageModuœti⁄TabÀNV
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
v
);

9522 
GLAPI
 
APIENTRY
 
glGëCovîageModuœti⁄TabÀNV
 (
GLsizei
 
bufsize
, 
GLÊﬂt
 *
v
);

9523 
GLAPI
 
APIENTRY
 
glCovîageModuœti⁄NV
 (
GLíum
 
comp⁄íts
);

9527 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


9528 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

9529 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

9530 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

9531 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

9532 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

9533 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

9534 #ifde‡
GL_GLEXT_PROTOTYPES


9535 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

9539 #i‚de‡
GL_NV_geomëry_¥ogøm4


9540 
	#GL_NV_geomëry_¥ogøm4
 1

	)

9541 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

9542 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

9543 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

9544 (
APIENTRYP
 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

9545 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

9546 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

9547 #ifde‡
GL_GLEXT_PROTOTYPES


9548 
GLAPI
 
APIENTRY
 
glProgømVîãxLimôNV
 (
GLíum
 
èrgë
, 
GLöt
 
limô
);

9549 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

9550 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚EXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

9554 #i‚de‡
GL_NV_geomëry_shadî4


9555 
	#GL_NV_geomëry_shadî4
 1

	)

9558 #i‚de‡
GL_NV_geomëry_shadî_∑s°hrough


9559 
	#GL_NV_geomëry_shadî_∑s°hrough
 1

	)

9562 #i‚de‡
GL_NV_gpu_¥ogøm4


9563 
	#GL_NV_gpu_¥ogøm4
 1

	)

9564 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

9565 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

9566 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

9567 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

9568 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

9569 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

9570 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

9571 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

9572 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

9573 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

9574 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9575 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

9576 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

9577 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9578 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

9579 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

9580 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9581 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

9582 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

9583 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9584 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

9585 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

9586 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

9587 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

9588 #ifde‡
GL_GLEXT_PROTOTYPES


9589 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9590 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

9591 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9592 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

9593 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

9594 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9595 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9596 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

9597 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9598 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

9599 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

9600 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9601 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

9602 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

9603 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

9604 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

9608 #i‚de‡
GL_NV_gpu_¥ogøm5


9609 
	#GL_NV_gpu_¥ogøm5
 1

	)

9610 
	#GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
 0x8E5A

	)

9611 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5B

	)

9612 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5C

	)

9613 
	#GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
 0x8E5D

	)

9614 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5E

	)

9615 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5F

	)

9616 
	#GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
 0x8F44

	)

9617 
	#GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
 0x8F45

	)

9618 (
APIENTRYP
 
	tPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	t∑øms
);

9619 (
APIENTRYP
 
	tPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øm
);

9620 #ifde‡
GL_GLEXT_PROTOTYPES


9621 
GLAPI
 
APIENTRY
 
glProgømSubroutöeP¨amëîsuivNV
 (
GLíum
 
èrgë
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
∑øms
);

9622 
GLAPI
 
APIENTRY
 
glGëProgømSubroutöeP¨amëîuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øm
);

9626 #i‚de‡
GL_NV_gpu_¥ogøm5_mem_exãnded


9627 
	#GL_NV_gpu_¥ogøm5_mem_exãnded
 1

	)

9630 #i‚de‡
GL_NV_gpu_shadî5


9631 
	#GL_NV_gpu_shadî5
 1

	)

9634 #i‚de‡
GL_NV_hÆf_Êﬂt


9635 
	#GL_NV_hÆf_Êﬂt
 1

	)

9636 
	tGLhÆfNV
;

9637 
	#GL_HALF_FLOAT_NV
 0x140B

	)

9638 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

9639 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9640 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

9641 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9642 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

9643 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9644 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

9645 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9646 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

9647 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9648 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

9649 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9650 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

9651 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9652 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

9653 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9654 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

9655 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9656 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

9657 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9658 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

9659 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9660 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

9661 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9662 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

9663 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9664 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

9665 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9666 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

9667 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

9668 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

9669 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9670 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

9671 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

9672 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

9673 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9674 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

9675 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9676 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

9677 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9678 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

9679 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9680 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9681 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9682 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9683 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9684 #ifde‡
GL_GLEXT_PROTOTYPES


9685 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
);

9686 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9687 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

9688 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9689 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

9690 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9691 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
 
nx
, GLhÆfNV 
ny
, GLhÆfNV 
nz
);

9692 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9693 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

9694 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9695 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
, GLhÆfNV 
Æpha
);

9696 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9697 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
 
s
);

9698 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9699 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
);

9700 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9701 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

9702 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9703 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

9704 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9705 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
);

9706 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9707 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
);

9708 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9709 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

9710 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9711 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

9712 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9713 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
 
fog
);

9714 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *
fog
);

9715 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

9716 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9717 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
 
weight
);

9718 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *
weight
);

9719 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
);

9720 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9721 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
);

9722 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9723 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

9724 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9725 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

9726 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9727 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9728 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9729 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9730 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9734 #i‚de‡
GL_NV_öã∫Æf‹m©_ßm∂e_quîy


9735 
	#GL_NV_öã∫Æf‹m©_ßm∂e_quîy
 1

	)

9736 
	#GL_MULTISAMPLES_NV
 0x9371

	)

9737 
	#GL_SUPERSAMPLE_SCALE_X_NV
 0x9372

	)

9738 
	#GL_SUPERSAMPLE_SCALE_Y_NV
 0x9373

	)

9739 
	#GL_CONFORMANT_NV
 0x9374

	)

9740 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATSAMPLEIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	t≤ame
, GLsizeò
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

9741 #ifde‡
GL_GLEXT_PROTOTYPES


9742 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©Sam∂eivNV
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
ßm∂es
, GLíum 
≤ame
, GLsizeò
bufSize
, 
GLöt
 *
∑øms
);

9746 #i‚de‡
GL_NV_light_max_exp⁄ít


9747 
	#GL_NV_light_max_exp⁄ít
 1

	)

9748 
	#GL_MAX_SHININESS_NV
 0x8504

	)

9749 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

9752 #i‚de‡
GL_NV_mu…ißm∂e_covîage


9753 
	#GL_NV_mu…ißm∂e_covîage
 1

	)

9756 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


9757 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

9758 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

9761 #i‚de‡
GL_NV_oc˛usi⁄_quîy


9762 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

9763 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

9764 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

9765 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

9766 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

9767 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

9768 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

9769 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

9770 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

9771 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

9772 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9773 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

9774 #ifde‡
GL_GLEXT_PROTOTYPES


9775 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

9776 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

9777 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

9778 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

9779 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

9780 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9781 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

9785 #i‚de‡
GL_NV_∑cked_dïth_°ícû


9786 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

9787 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

9788 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

9791 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


9792 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

9793 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

9794 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

9795 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

9796 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

9797 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

9798 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9799 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9800 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9801 #ifde‡
GL_GLEXT_PROTOTYPES


9802 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

9803 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9804 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9808 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


9809 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

9812 #i‚de‡
GL_NV_∑th_ªndîög


9813 
	#GL_NV_∑th_ªndîög
 1

	)

9814 
	#GL_PATH_FORMAT_SVG_NV
 0x9070

	)

9815 
	#GL_PATH_FORMAT_PS_NV
 0x9071

	)

9816 
	#GL_STANDARD_FONT_NAME_NV
 0x9072

	)

9817 
	#GL_SYSTEM_FONT_NAME_NV
 0x9073

	)

9818 
	#GL_FILE_NAME_NV
 0x9074

	)

9819 
	#GL_PATH_STROKE_WIDTH_NV
 0x9075

	)

9820 
	#GL_PATH_END_CAPS_NV
 0x9076

	)

9821 
	#GL_PATH_INITIAL_END_CAP_NV
 0x9077

	)

9822 
	#GL_PATH_TERMINAL_END_CAP_NV
 0x9078

	)

9823 
	#GL_PATH_JOIN_STYLE_NV
 0x9079

	)

9824 
	#GL_PATH_MITER_LIMIT_NV
 0x907A

	)

9825 
	#GL_PATH_DASH_CAPS_NV
 0x907B

	)

9826 
	#GL_PATH_INITIAL_DASH_CAP_NV
 0x907C

	)

9827 
	#GL_PATH_TERMINAL_DASH_CAP_NV
 0x907D

	)

9828 
	#GL_PATH_DASH_OFFSET_NV
 0x907E

	)

9829 
	#GL_PATH_CLIENT_LENGTH_NV
 0x907F

	)

9830 
	#GL_PATH_FILL_MODE_NV
 0x9080

	)

9831 
	#GL_PATH_FILL_MASK_NV
 0x9081

	)

9832 
	#GL_PATH_FILL_COVER_MODE_NV
 0x9082

	)

9833 
	#GL_PATH_STROKE_COVER_MODE_NV
 0x9083

	)

9834 
	#GL_PATH_STROKE_MASK_NV
 0x9084

	)

9835 
	#GL_COUNT_UP_NV
 0x9088

	)

9836 
	#GL_COUNT_DOWN_NV
 0x9089

	)

9837 
	#GL_PATH_OBJECT_BOUNDING_BOX_NV
 0x908A

	)

9838 
	#GL_CONVEX_HULL_NV
 0x908B

	)

9839 
	#GL_BOUNDING_BOX_NV
 0x908D

	)

9840 
	#GL_TRANSLATE_X_NV
 0x908E

	)

9841 
	#GL_TRANSLATE_Y_NV
 0x908F

	)

9842 
	#GL_TRANSLATE_2D_NV
 0x9090

	)

9843 
	#GL_TRANSLATE_3D_NV
 0x9091

	)

9844 
	#GL_AFFINE_2D_NV
 0x9092

	)

9845 
	#GL_AFFINE_3D_NV
 0x9094

	)

9846 
	#GL_TRANSPOSE_AFFINE_2D_NV
 0x9096

	)

9847 
	#GL_TRANSPOSE_AFFINE_3D_NV
 0x9098

	)

9848 
	#GL_UTF8_NV
 0x909A

	)

9849 
	#GL_UTF16_NV
 0x909B

	)

9850 
	#GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
 0x909C

	)

9851 
	#GL_PATH_COMMAND_COUNT_NV
 0x909D

	)

9852 
	#GL_PATH_COORD_COUNT_NV
 0x909E

	)

9853 
	#GL_PATH_DASH_ARRAY_COUNT_NV
 0x909F

	)

9854 
	#GL_PATH_COMPUTED_LENGTH_NV
 0x90A0

	)

9855 
	#GL_PATH_FILL_BOUNDING_BOX_NV
 0x90A1

	)

9856 
	#GL_PATH_STROKE_BOUNDING_BOX_NV
 0x90A2

	)

9857 
	#GL_SQUARE_NV
 0x90A3

	)

9858 
	#GL_ROUND_NV
 0x90A4

	)

9859 
	#GL_TRIANGULAR_NV
 0x90A5

	)

9860 
	#GL_BEVEL_NV
 0x90A6

	)

9861 
	#GL_MITER_REVERT_NV
 0x90A7

	)

9862 
	#GL_MITER_TRUNCATE_NV
 0x90A8

	)

9863 
	#GL_SKIP_MISSING_GLYPH_NV
 0x90A9

	)

9864 
	#GL_USE_MISSING_GLYPH_NV
 0x90AA

	)

9865 
	#GL_PATH_ERROR_POSITION_NV
 0x90AB

	)

9866 
	#GL_ACCUM_ADJACENT_PAIRS_NV
 0x90AD

	)

9867 
	#GL_ADJACENT_PAIRS_NV
 0x90AE

	)

9868 
	#GL_FIRST_TO_REST_NV
 0x90AF

	)

9869 
	#GL_PATH_GEN_MODE_NV
 0x90B0

	)

9870 
	#GL_PATH_GEN_COEFF_NV
 0x90B1

	)

9871 
	#GL_PATH_GEN_COMPONENTS_NV
 0x90B3

	)

9872 
	#GL_PATH_STENCIL_FUNC_NV
 0x90B7

	)

9873 
	#GL_PATH_STENCIL_REF_NV
 0x90B8

	)

9874 
	#GL_PATH_STENCIL_VALUE_MASK_NV
 0x90B9

	)

9875 
	#GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
 0x90BD

	)

9876 
	#GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
 0x90BE

	)

9877 
	#GL_PATH_COVER_DEPTH_FUNC_NV
 0x90BF

	)

9878 
	#GL_PATH_DASH_OFFSET_RESET_NV
 0x90B4

	)

9879 
	#GL_MOVE_TO_RESETS_NV
 0x90B5

	)

9880 
	#GL_MOVE_TO_CONTINUES_NV
 0x90B6

	)

9881 
	#GL_CLOSE_PATH_NV
 0x00

	)

9882 
	#GL_MOVE_TO_NV
 0x02

	)

9883 
	#GL_RELATIVE_MOVE_TO_NV
 0x03

	)

9884 
	#GL_LINE_TO_NV
 0x04

	)

9885 
	#GL_RELATIVE_LINE_TO_NV
 0x05

	)

9886 
	#GL_HORIZONTAL_LINE_TO_NV
 0x06

	)

9887 
	#GL_RELATIVE_HORIZONTAL_LINE_TO_NV
 0x07

	)

9888 
	#GL_VERTICAL_LINE_TO_NV
 0x08

	)

9889 
	#GL_RELATIVE_VERTICAL_LINE_TO_NV
 0x09

	)

9890 
	#GL_QUADRATIC_CURVE_TO_NV
 0x0A

	)

9891 
	#GL_RELATIVE_QUADRATIC_CURVE_TO_NV
 0x0B

	)

9892 
	#GL_CUBIC_CURVE_TO_NV
 0x0C

	)

9893 
	#GL_RELATIVE_CUBIC_CURVE_TO_NV
 0x0D

	)

9894 
	#GL_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0E

	)

9895 
	#GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0F

	)

9896 
	#GL_SMOOTH_CUBIC_CURVE_TO_NV
 0x10

	)

9897 
	#GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
 0x11

	)

9898 
	#GL_SMALL_CCW_ARC_TO_NV
 0x12

	)

9899 
	#GL_RELATIVE_SMALL_CCW_ARC_TO_NV
 0x13

	)

9900 
	#GL_SMALL_CW_ARC_TO_NV
 0x14

	)

9901 
	#GL_RELATIVE_SMALL_CW_ARC_TO_NV
 0x15

	)

9902 
	#GL_LARGE_CCW_ARC_TO_NV
 0x16

	)

9903 
	#GL_RELATIVE_LARGE_CCW_ARC_TO_NV
 0x17

	)

9904 
	#GL_LARGE_CW_ARC_TO_NV
 0x18

	)

9905 
	#GL_RELATIVE_LARGE_CW_ARC_TO_NV
 0x19

	)

9906 
	#GL_RESTART_PATH_NV
 0xF0

	)

9907 
	#GL_DUP_FIRST_CUBIC_CURVE_TO_NV
 0xF2

	)

9908 
	#GL_DUP_LAST_CUBIC_CURVE_TO_NV
 0xF4

	)

9909 
	#GL_RECT_NV
 0xF6

	)

9910 
	#GL_CIRCULAR_CCW_ARC_TO_NV
 0xF8

	)

9911 
	#GL_CIRCULAR_CW_ARC_TO_NV
 0xFA

	)

9912 
	#GL_CIRCULAR_TANGENT_ARC_TO_NV
 0xFC

	)

9913 
	#GL_ARC_TO_NV
 0xFE

	)

9914 
	#GL_RELATIVE_ARC_TO_NV
 0xFF

	)

9915 
	#GL_BOLD_BIT_NV
 0x01

	)

9916 
	#GL_ITALIC_BIT_NV
 0x02

	)

9917 
	#GL_GLYPH_WIDTH_BIT_NV
 0x01

	)

9918 
	#GL_GLYPH_HEIGHT_BIT_NV
 0x02

	)

9919 
	#GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
 0x04

	)

9920 
	#GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
 0x08

	)

9921 
	#GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
 0x10

	)

9922 
	#GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
 0x20

	)

9923 
	#GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
 0x40

	)

9924 
	#GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
 0x80

	)

9925 
	#GL_GLYPH_HAS_KERNING_BIT_NV
 0x100

	)

9926 
	#GL_FONT_X_MIN_BOUNDS_BIT_NV
 0x00010000

	)

9927 
	#GL_FONT_Y_MIN_BOUNDS_BIT_NV
 0x00020000

	)

9928 
	#GL_FONT_X_MAX_BOUNDS_BIT_NV
 0x00040000

	)

9929 
	#GL_FONT_Y_MAX_BOUNDS_BIT_NV
 0x00080000

	)

9930 
	#GL_FONT_UNITS_PER_EM_BIT_NV
 0x00100000

	)

9931 
	#GL_FONT_ASCENDER_BIT_NV
 0x00200000

	)

9932 
	#GL_FONT_DESCENDER_BIT_NV
 0x00400000

	)

9933 
	#GL_FONT_HEIGHT_BIT_NV
 0x00800000

	)

9934 
	#GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
 0x01000000

	)

9935 
	#GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
 0x02000000

	)

9936 
	#GL_FONT_UNDERLINE_POSITION_BIT_NV
 0x04000000

	)

9937 
	#GL_FONT_UNDERLINE_THICKNESS_BIT_NV
 0x08000000

	)

9938 
	#GL_FONT_HAS_KERNING_BIT_NV
 0x10000000

	)

9939 
	#GL_ROUNDED_RECT_NV
 0xE8

	)

9940 
	#GL_RELATIVE_ROUNDED_RECT_NV
 0xE9

	)

9941 
	#GL_ROUNDED_RECT2_NV
 0xEA

	)

9942 
	#GL_RELATIVE_ROUNDED_RECT2_NV
 0xEB

	)

9943 
	#GL_ROUNDED_RECT4_NV
 0xEC

	)

9944 
	#GL_RELATIVE_ROUNDED_RECT4_NV
 0xED

	)

9945 
	#GL_ROUNDED_RECT8_NV
 0xEE

	)

9946 
	#GL_RELATIVE_ROUNDED_RECT8_NV
 0xEF

	)

9947 
	#GL_RELATIVE_RECT_NV
 0xF7

	)

9948 
	#GL_FONT_GLYPHS_AVAILABLE_NV
 0x9368

	)

9949 
	#GL_FONT_TARGET_UNAVAILABLE_NV
 0x9369

	)

9950 
	#GL_FONT_UNAVAILABLE_NV
 0x936A

	)

9951 
	#GL_FONT_UNINTELLIGIBLE_NV
 0x936B

	)

9952 
	#GL_CONIC_CURVE_TO_NV
 0x1A

	)

9953 
	#GL_RELATIVE_CONIC_CURVE_TO_NV
 0x1B

	)

9954 
	#GL_FONT_NUM_GLYPH_INDICES_BIT_NV
 0x20000000

	)

9955 
	#GL_STANDARD_FONT_FORMAT_NV
 0x936C

	)

9956 
	#GL_2_BYTES_NV
 0x1407

	)

9957 
	#GL_3_BYTES_NV
 0x1408

	)

9958 
	#GL_4_BYTES_NV
 0x1409

	)

9959 
	#GL_EYE_LINEAR_NV
 0x2400

	)

9960 
	#GL_OBJECT_LINEAR_NV
 0x2401

	)

9961 
	#GL_CONSTANT_NV
 0x8576

	)

9962 
	#GL_PATH_FOG_GEN_MODE_NV
 0x90AC

	)

9963 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

9964 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

9965 
	#GL_PATH_GEN_COLOR_FORMAT_NV
 0x90B2

	)

9966 
	#GL_PATH_PROJECTION_NV
 0x1701

	)

9967 
	#GL_PATH_MODELVIEW_NV
 0x1700

	)

9968 
	#GL_PATH_MODELVIEW_STACK_DEPTH_NV
 0x0BA3

	)

9969 
	#GL_PATH_MODELVIEW_MATRIX_NV
 0x0BA6

	)

9970 
	#GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV
 0x0D36

	)

9971 
	#GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV
 0x84E3

	)

9972 
	#GL_PATH_PROJECTION_STACK_DEPTH_NV
 0x0BA4

	)

9973 
	#GL_PATH_PROJECTION_MATRIX_NV
 0x0BA7

	)

9974 
	#GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV
 0x0D38

	)

9975 
	#GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV
 0x84E4

	)

9976 
	#GL_FRAGMENT_INPUT_NV
 0x936D

	)

9977 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENPATHSNVPROC
Ë(
	tGLsizei
 
	tønge
);

9978 (
APIENTRYP
 
	tPFNGLDELETEPATHSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tønge
);

9979 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
);

9980 (
APIENTRYP
 
	tPFNGLPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9981 (
APIENTRYP
 
	tPFNGLPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9982 (
APIENTRYP
 
	tPFNGLPATHSUBCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tcomm™dSèπ
, GLsizeò
	tcomm™dsToDñëe
, GLsizeò
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9983 (
APIENTRYP
 
	tPFNGLPATHSUBCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tco‹dSèπ
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9984 (
APIENTRYP
 
	tPFNGLPATHSTRINGNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tf‹m©
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	t∑thSåög
);

9985 (
APIENTRYP
 
	tPFNGLPATHGLYPHSNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	tty≥
, c⁄° *
	tch¨codes
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9986 (
APIENTRYP
 
	tPFNGLPATHGLYPHRANGENVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°Glyph
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9987 (
APIENTRYP
 
	tPFNGLWEIGHTPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, 
	tGLsizei
 
	tnumP©hs
, c⁄° GLuöà*
	t∑ths
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

9988 (
APIENTRYP
 
	tPFNGLCOPYPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
);

9989 (
APIENTRYP
 
	tPFNGLINTERPOLATEPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t∑thA
, GLuöà
	t∑thB
, 
	tGLÊﬂt
 
	tweight
);

9990 (
APIENTRYP
 
	tPFNGLTRANSFORMPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
, 
	tGLíum
 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9991 (
APIENTRYP
 
	tPFNGLPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	tvÆue
);

9992 (
APIENTRYP
 
	tPFNGLPATHPARAMETERINVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

9993 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9994 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

9995 (
APIENTRYP
 
	tPFNGLPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tdashCou¡
, c⁄° 
	tGLÊﬂt
 *
	tdashAºay
);

9996 (
APIENTRYP
 
	tPFNGLPATHSTENCILFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

9997 (
APIENTRYP
 
	tPFNGLPATHSTENCILDEPTHOFFSETNVPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

9998 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
);

9999 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
);

10000 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10001 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10002 (
APIENTRYP
 
	tPFNGLPATHCOVERDEPTHFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
);

10003 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

10004 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

10005 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10006 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10007 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

10008 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

10009 (
APIENTRYP
 
	tPFNGLGETPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLubyã
 *
	tcomm™ds
);

10010 (
APIENTRYP
 
	tPFNGLGETPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tco‹ds
);

10011 (
APIENTRYP
 
	tPFNGLGETPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tdashAºay
);

10012 (
APIENTRYP
 
	tPFNGLGETPATHMETRICSNVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

10013 (
APIENTRYP
 
	tPFNGLGETPATHMETRICRANGENVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLuöt
 
	tfú°P©hName
, 
	tGLsizei
 
	tnumP©hs
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

10014 (
APIENTRYP
 
	tPFNGLGETPATHSPACINGNVPROC
Ë(
	tGLíum
 
	t∑thLi°Mode
, 
	tGLsizei
 
	tnumP©hs
, GLíum 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLÊﬂt
 
	tadv™˚SˇÀ
, GLÊﬂà
	tkînögSˇÀ
, GLíum 
	tå™sf‹mTy≥
, GLÊﬂà*
	tªtu∫edS∑cög
);

10015 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, GLuöà
	tmask
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10016 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10017 
GLÊﬂt
 (
	tAPIENTRYP
 
	tPFNGLGETPATHLENGTHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
);

10018 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLPOINTALONGPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
, 
	tGLÊﬂt
 
	tdi°™˚
, GLÊﬂà*
	tx
, GLÊﬂà*
	ty
, GLÊﬂà*
	tèngítX
, GLÊﬂà*
	tèngítY
);

10019 (
APIENTRYP
 
	tPFNGLMATRIXLOAD3X2FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10020 (
APIENTRYP
 
	tPFNGLMATRIXLOAD3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10021 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSE3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10022 (
APIENTRYP
 
	tPFNGLMATRIXMULT3X2FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10023 (
APIENTRYP
 
	tPFNGLMATRIXMULT3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10024 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSE3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10025 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tcovîMode
);

10026 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, 
	tGLíum
 
	tcovîMode
);

10027 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10028 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10029 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHGLYPHINDEXRANGENVPROC
Ë(
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLuöt
 
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
, GLuöà
	tba£AndCou¡
[2]);

10030 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHGLYPHINDEXARRAYNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°GlyphIndex
, 
	tGLsizei
 
	tnumGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

10031 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, 
	tGLsizeùå
 
	tf⁄tSize
, c⁄° *
	tf⁄tD©a
, 
	tGLsizei
 
	tÁ˚Index
, GLuöà
	tfú°GlyphIndex
, GLsizeò
	tnumGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

10032 (
APIENTRYP
 
	tPFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLíum
 
	tgíMode
, GLöà
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

10033 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEFVNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLÊﬂt
 *
	t∑øms
);

10034 (
APIENTRYP
 
	tPFNGLPATHCOLORGENNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	tgíMode
, GLíum 
	tcﬁ‹F‹m©
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

10035 (
APIENTRYP
 
	tPFNGLPATHTEXGENNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	tgíMode
, 
	tGLöt
 
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

10036 (
APIENTRYP
 
	tPFNGLPATHFOGGENNVPROC
Ë(
	tGLíum
 
	tgíMode
);

10037 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENIVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

10038 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENFVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

10039 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENIVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

10040 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENFVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

10041 #ifde‡
GL_GLEXT_PROTOTYPES


10042 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíP©hsNV
 (
GLsizei
 
ønge
);

10043 
GLAPI
 
APIENTRY
 
glDñëeP©hsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
ønge
);

10044 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsP©hNV
 (
GLuöt
 
∑th
);

10045 
GLAPI
 
APIENTRY
 
glP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10046 
GLAPI
 
APIENTRY
 
glP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10047 
GLAPI
 
APIENTRY
 
glP©hSubComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
comm™dSèπ
, GLsizeò
comm™dsToDñëe
, GLsizeò
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10048 
GLAPI
 
APIENTRY
 
glP©hSubCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
co‹dSèπ
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10049 
GLAPI
 
APIENTRY
 
glP©hSåögNV
 (
GLuöt
 
∑th
, 
GLíum
 
f‹m©
, 
GLsizei
 
Àngth
, c⁄° *
∑thSåög
);

10050 
GLAPI
 
APIENTRY
 
glP©hGlyphsNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLsizei
 
numGlyphs
, GLíum 
ty≥
, c⁄° *
ch¨codes
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10051 
GLAPI
 
APIENTRY
 
glP©hGlyphR™geNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°Glyph
, 
GLsizei
 
numGlyphs
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10052 
GLAPI
 
APIENTRY
 
glWeightP©hsNV
 (
GLuöt
 
ªsu…P©h
, 
GLsizei
 
numP©hs
, c⁄° GLuöà*
∑ths
, c⁄° 
GLÊﬂt
 *
weights
);

10053 
GLAPI
 
APIENTRY
 
glC›yP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
);

10054 
GLAPI
 
APIENTRY
 
glI¡îpﬁ©eP©hsNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
∑thA
, GLuöà
∑thB
, 
GLÊﬂt
 
weight
);

10055 
GLAPI
 
APIENTRY
 
glTønsf‹mP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
, 
GLíum
 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10056 
GLAPI
 
APIENTRY
 
glP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
vÆue
);

10057 
GLAPI
 
APIENTRY
 
glP©hP¨amëîiNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

10058 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆue
);

10059 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

10060 
GLAPI
 
APIENTRY
 
glP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLsizei
 
dashCou¡
, c⁄° 
GLÊﬂt
 *
dashAºay
);

10061 
GLAPI
 
APIENTRY
 
glP©hSãncûFuncNV
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

10062 
GLAPI
 
APIENTRY
 
glP©hSãncûDïthOff£tNV
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

10063 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
);

10064 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
);

10065 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10066 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10067 
GLAPI
 
APIENTRY
 
glP©hCovîDïthFuncNV
 (
GLíum
 
func
);

10068 
GLAPI
 
APIENTRY
 
glCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

10069 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

10070 
GLAPI
 
APIENTRY
 
glCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10071 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10072 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 *
vÆue
);

10073 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10074 
GLAPI
 
APIENTRY
 
glGëP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLubyã
 *
comm™ds
);

10075 
GLAPI
 
APIENTRY
 
glGëP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
co‹ds
);

10076 
GLAPI
 
APIENTRY
 
glGëP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
dashAºay
);

10077 
GLAPI
 
APIENTRY
 
glGëP©hMëricsNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

10078 
GLAPI
 
APIENTRY
 
glGëP©hMëricR™geNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLuöt
 
fú°P©hName
, 
GLsizei
 
numP©hs
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

10079 
GLAPI
 
APIENTRY
 
glGëP©hS∑cögNV
 (
GLíum
 
∑thLi°Mode
, 
GLsizei
 
numP©hs
, GLíum 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLÊﬂt
 
adv™˚SˇÀ
, GLÊﬂà
kînögSˇÀ
, GLíum 
å™sf‹mTy≥
, GLÊﬂà*
ªtu∫edS∑cög
);

10080 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInFûlP©hNV
 (
GLuöt
 
∑th
, GLuöà
mask
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10081 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10082 
GLAPI
 
GLÊﬂt
 
APIENTRY
 
glGëP©hLígthNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
);

10083 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glPoötAl⁄gP©hNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
, 
GLÊﬂt
 
di°™˚
, GLÊﬂà*
x
, GLÊﬂà*
y
, GLÊﬂà*
èngítX
, GLÊﬂà*
èngítY
);

10084 
GLAPI
 
APIENTRY
 
glM©rixLﬂd3x2fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10085 
GLAPI
 
APIENTRY
 
glM©rixLﬂd3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10086 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10087 
GLAPI
 
APIENTRY
 
glM©rixMu…3x2fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10088 
GLAPI
 
APIENTRY
 
glM©rixMu…3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10089 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10090 
GLAPI
 
APIENTRY
 
glSãncûThíCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
, GLíum 
covîMode
);

10091 
GLAPI
 
APIENTRY
 
glSãncûThíCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, 
GLíum
 
covîMode
);

10092 
GLAPI
 
APIENTRY
 
glSãncûThíCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10093 
GLAPI
 
APIENTRY
 
glSãncûThíCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10094 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hGlyphIndexR™geNV
 (GLíum 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLuöt
 
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
, GLuöà
ba£AndCou¡
[2]);

10095 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hGlyphIndexAºayNV
 (
GLuöt
 
fú°P©hName
, GLíum 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°GlyphIndex
, 
GLsizei
 
numGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10096 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hMem‹yGlyphIndexAºayNV
 (
GLuöt
 
fú°P©hName
, GLíum 
f⁄tT¨gë
, 
GLsizeùå
 
f⁄tSize
, c⁄° *
f⁄tD©a
, 
GLsizei
 
Á˚Index
, GLuöà
fú°GlyphIndex
, GLsizeò
numGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10097 
GLAPI
 
APIENTRY
 
glProgømP©hFøgmítI≈utGíNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLíum
 
gíMode
, GLöà
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10098 
GLAPI
 
APIENTRY
 
glGëProgømResour˚fvNV
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLÊﬂt
 *
∑øms
);

10099 
GLAPI
 
APIENTRY
 
glP©hCﬁ‹GíNV
 (
GLíum
 
cﬁ‹
, GLíum 
gíMode
, GLíum 
cﬁ‹F‹m©
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10100 
GLAPI
 
APIENTRY
 
glP©hTexGíNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
gíMode
, 
GLöt
 
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10101 
GLAPI
 
APIENTRY
 
glP©hFogGíNV
 (
GLíum
 
gíMode
);

10102 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GíivNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

10103 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GífvNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10104 
GLAPI
 
APIENTRY
 
glGëP©hTexGíivNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

10105 
GLAPI
 
APIENTRY
 
glGëP©hTexGífvNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10109 #i‚de‡
GL_NV_∑th_ªndîög_sh¨ed_edge


10110 
	#GL_NV_∑th_ªndîög_sh¨ed_edge
 1

	)

10111 
	#GL_SHARED_EDGE_NV
 0xC0

	)

10114 #i‚de‡
GL_NV_pixñ_d©a_ønge


10115 
	#GL_NV_pixñ_d©a_ønge
 1

	)

10116 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

10117 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

10118 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

10119 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

10120 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

10121 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

10122 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

10123 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

10124 #ifde‡
GL_GLEXT_PROTOTYPES


10125 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

10126 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
 
èrgë
);

10130 #i‚de‡
GL_NV_poöt_•rôe


10131 
	#GL_NV_poöt_•rôe
 1

	)

10132 
	#GL_POINT_SPRITE_NV
 0x8861

	)

10133 
	#GL_COORD_REPLACE_NV
 0x8862

	)

10134 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

10135 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10136 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10137 #ifde‡
GL_GLEXT_PROTOTYPES


10138 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10139 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10143 #i‚de‡
GL_NV_¥e£¡_video


10144 
	#GL_NV_¥e£¡_video
 1

	)

10145 
	#GL_FRAME_NV
 0x8E26

	)

10146 
	#GL_FIELDS_NV
 0x8E27

	)

10147 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

10148 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

10149 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

10150 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

10151 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

10152 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

10153 (
APIENTRYP
 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10154 (
APIENTRYP
 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

10155 (
APIENTRYP
 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

10156 (
APIENTRYP
 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10157 #ifde‡
GL_GLEXT_PROTOTYPES


10158 
GLAPI
 
APIENTRY
 
glPª£¡FømeKeyedNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLuöà
key0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLuöà
key1
);

10159 
GLAPI
 
APIENTRY
 
glPª£¡FømeDuÆFûlNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLíum 
èrgë2
, GLuöà
fûl2
, GLíum 
èrgë3
, GLuöà
fûl3
);

10160 
GLAPI
 
APIENTRY
 
glGëVideoivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10161 
GLAPI
 
APIENTRY
 
glGëVideouivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

10162 
GLAPI
 
APIENTRY
 
glGëVideoi64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

10163 
GLAPI
 
APIENTRY
 
glGëVideoui64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10167 #i‚de‡
GL_NV_¥imôive_ª°¨t


10168 
	#GL_NV_¥imôive_ª°¨t
 1

	)

10169 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

10170 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

10171 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

10172 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

10173 #ifde‡
GL_GLEXT_PROTOTYPES


10174 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

10175 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
 
ödex
);

10179 #i‚de‡
GL_NV_ªgi°î_comböîs


10180 
	#GL_NV_ªgi°î_comböîs
 1

	)

10181 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

10182 
	#GL_VARIABLE_A_NV
 0x8523

	)

10183 
	#GL_VARIABLE_B_NV
 0x8524

	)

10184 
	#GL_VARIABLE_C_NV
 0x8525

	)

10185 
	#GL_VARIABLE_D_NV
 0x8526

	)

10186 
	#GL_VARIABLE_E_NV
 0x8527

	)

10187 
	#GL_VARIABLE_F_NV
 0x8528

	)

10188 
	#GL_VARIABLE_G_NV
 0x8529

	)

10189 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

10190 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

10191 
	#GL_SPARE0_NV
 0x852E

	)

10192 
	#GL_SPARE1_NV
 0x852F

	)

10193 
	#GL_DISCARD_NV
 0x8530

	)

10194 
	#GL_E_TIMES_F_NV
 0x8531

	)

10195 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

10196 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

10197 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

10198 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

10199 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

10200 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

10201 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

10202 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

10203 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

10204 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

10205 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

10206 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

10207 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

10208 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

10209 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

10210 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

10211 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

10212 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

10213 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

10214 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

10215 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

10216 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

10217 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

10218 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

10219 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

10220 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

10221 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

10222 
	#GL_COMBINER0_NV
 0x8550

	)

10223 
	#GL_COMBINER1_NV
 0x8551

	)

10224 
	#GL_COMBINER2_NV
 0x8552

	)

10225 
	#GL_COMBINER3_NV
 0x8553

	)

10226 
	#GL_COMBINER4_NV
 0x8554

	)

10227 
	#GL_COMBINER5_NV
 0x8555

	)

10228 
	#GL_COMBINER6_NV
 0x8556

	)

10229 
	#GL_COMBINER7_NV
 0x8557

	)

10230 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10231 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10232 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10233 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10234 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

10235 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

10236 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

10237 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10238 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10239 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10240 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10241 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10242 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10243 #ifde‡
GL_GLEXT_PROTOTYPES


10244 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10245 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10246 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10247 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10248 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

10249 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
abOuçut
, GLíum 
cdOuçut
, GLíum 
sumOuçut
, GLíum 
sˇÀ
, GLíum 
büs
, 
GLboﬁón
 
abDŸProdu˘
, GLboﬁó¿
cdDŸProdu˘
, GLboﬁó¿
muxSum
);

10250 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

10251 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10252 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10253 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10254 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10255 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10256 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10260 #i‚de‡
GL_NV_ªgi°î_comböîs2


10261 
	#GL_NV_ªgi°î_comböîs2
 1

	)

10262 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

10263 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10264 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10265 #ifde‡
GL_GLEXT_PROTOTYPES


10266 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10267 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10271 #i‚de‡
GL_NV_robu°√ss_video_mem‹y_purge


10272 
	#GL_NV_robu°√ss_video_mem‹y_purge
 1

	)

10273 
	#GL_PURGED_CONTEXT_RESET_NV
 0x92BB

	)

10276 #i‚de‡
GL_NV_ßm∂e_loˇti⁄s


10277 
	#GL_NV_ßm∂e_loˇti⁄s
 1

	)

10278 
	#GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV
 0x933D

	)

10279 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV
 0x933E

	)

10280 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV
 0x933F

	)

10281 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV
 0x9340

	)

10282 
	#GL_SAMPLE_LOCATION_NV
 0x8E50

	)

10283 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_NV
 0x9341

	)

10284 
	#GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV
 0x9342

	)

10285 
	#GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV
 0x9343

	)

10286 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10287 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, GLuöà
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10288 (
APIENTRYP
 
	tPFNGLRESOLVEDEPTHVALUESNVPROC
) ();

10289 #ifde‡
GL_GLEXT_PROTOTYPES


10290 
GLAPI
 
APIENTRY
 
glFømebuf„rSam∂eLoˇti⁄sfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10291 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rSam∂eLoˇti⁄sfvNV
 (
GLuöt
 
‰amebuf„r
, GLuöà
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10292 
GLAPI
 
APIENTRY
 
glResﬁveDïthVÆuesNV
 ();

10296 #i‚de‡
GL_NV_ßm∂e_mask_ovîride_covîage


10297 
	#GL_NV_ßm∂e_mask_ovîride_covîage
 1

	)

10300 #i‚de‡
GL_NV_shadî_©omic_cou¡îs


10301 
	#GL_NV_shadî_©omic_cou¡îs
 1

	)

10304 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


10305 
	#GL_NV_shadî_©omic_Êﬂt
 1

	)

10308 #i‚de‡
GL_NV_shadî_©omic_Êﬂt64


10309 
	#GL_NV_shadî_©omic_Êﬂt64
 1

	)

10312 #i‚de‡
GL_NV_shadî_©omic_Â16_ve˘‹


10313 
	#GL_NV_shadî_©omic_Â16_ve˘‹
 1

	)

10316 #i‚de‡
GL_NV_shadî_©omic_öt64


10317 
	#GL_NV_shadî_©omic_öt64
 1

	)

10320 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


10321 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

10322 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

10323 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

10324 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

10325 (
APIENTRYP
 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

10326 (
APIENTRYP
 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

10327 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

10328 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

10329 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10330 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10331 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10332 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10333 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
 *
	tªsu…
);

10334 (
APIENTRYP
 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

10335 (
APIENTRYP
 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

10336 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

10337 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

10338 #ifde‡
GL_GLEXT_PROTOTYPES


10339 
GLAPI
 
APIENTRY
 
glMakeBuf„rResidítNV
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

10340 
GLAPI
 
APIENTRY
 
glMakeBuf„rN⁄ResidítNV
 (
GLíum
 
èrgë
);

10341 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rResidítNV
 (
GLíum
 
èrgë
);

10342 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

10343 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rN⁄ResidítNV
 (
GLuöt
 
buf„r
);

10344 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
);

10345 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîui64vNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10346 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîui64vNV
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10347 
GLAPI
 
APIENTRY
 
glGëI¡egîui64vNV
 (
GLíum
 
vÆue
, 
GLuöt64EXT
 *
ªsu…
);

10348 
GLAPI
 
APIENTRY
 
glUnif‹mui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

10349 
GLAPI
 
APIENTRY
 
glUnif‹mui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

10350 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

10351 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

10355 #i‚de‡
GL_NV_shadî_buf„r_°‹e


10356 
	#GL_NV_shadî_buf„r_°‹e
 1

	)

10357 
	#GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
 0x00000010

	)

10360 #i‚de‡
GL_NV_shadî_°‹age_buf„r_obje˘


10361 
	#GL_NV_shadî_°‹age_buf„r_obje˘
 1

	)

10364 #i‚de‡
GL_NV_shadî_thªad_group


10365 
	#GL_NV_shadî_thªad_group
 1

	)

10366 
	#GL_WARP_SIZE_NV
 0x9339

	)

10367 
	#GL_WARPS_PER_SM_NV
 0x933A

	)

10368 
	#GL_SM_COUNT_NV
 0x933B

	)

10371 #i‚de‡
GL_NV_shadî_thªad_shufÊe


10372 
	#GL_NV_shadî_thªad_shufÊe
 1

	)

10375 #i‚de‡
GL_NV_°îeo_võw_ªndîög


10376 
	#GL_NV_°îeo_võw_ªndîög
 1

	)

10379 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


10380 
	#GL_NV_ãs£Œ©i⁄_¥ogøm5
 1

	)

10381 
	#GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
 0x86D8

	)

10382 
	#GL_TESS_CONTROL_PROGRAM_NV
 0x891E

	)

10383 
	#GL_TESS_EVALUATION_PROGRAM_NV
 0x891F

	)

10384 
	#GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
 0x8C74

	)

10385 
	#GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
 0x8C75

	)

10388 #i‚de‡
GL_NV_ãxgí_emboss


10389 
	#GL_NV_ãxgí_emboss
 1

	)

10390 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

10391 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

10392 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

10395 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


10396 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

10397 
	#GL_NORMAL_MAP_NV
 0x8511

	)

10398 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

10401 #i‚de‡
GL_NV_ãxtuª_b¨rõr


10402 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

10403 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

10404 #ifde‡
GL_GLEXT_PROTOTYPES


10405 
GLAPI
 
APIENTRY
 
glTextuªB¨rõrNV
 ();

10409 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


10410 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

10413 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


10414 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

10415 
	#GL_COMBINE4_NV
 0x8503

	)

10416 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

10417 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

10418 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

10419 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

10422 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


10423 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

10424 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

10427 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


10428 
	#GL_NV_ãxtuª_mu…ißm∂e
 1

	)

10429 
	#GL_TEXTURE_COVERAGE_SAMPLES_NV
 0x9045

	)

10430 
	#GL_TEXTURE_COLOR_SAMPLES_NV
 0x9046

	)

10431 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10432 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10433 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10434 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10435 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10436 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10437 #ifde‡
GL_GLEXT_PROTOTYPES


10438 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10439 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10440 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10441 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10442 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10443 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10447 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


10448 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

10449 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

10450 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

10451 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

10452 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

10455 #i‚de‡
GL_NV_ãxtuª_shadî


10456 
	#GL_NV_ãxtuª_shadî
 1

	)

10457 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

10458 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

10459 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

10460 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

10461 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

10462 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

10463 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

10464 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

10465 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

10466 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

10467 
	#GL_CULL_MODES_NV
 0x86E0

	)

10468 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

10469 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

10470 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

10471 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 0x86E1

	)

10472 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 0x86E2

	)

10473 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 0x86E3

	)

10474 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

10475 
	#GL_CONST_EYE_NV
 0x86E5

	)

10476 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

10477 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

10478 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

10479 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

10480 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

10481 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

10482 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

10483 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

10484 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

10485 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

10486 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

10487 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

10488 
	#GL_HILO_NV
 0x86F4

	)

10489 
	#GL_DSDT_NV
 0x86F5

	)

10490 
	#GL_DSDT_MAG_NV
 0x86F6

	)

10491 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

10492 
	#GL_HILO16_NV
 0x86F8

	)

10493 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

10494 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

10495 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

10496 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

10497 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

10498 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

10499 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

10500 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

10501 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

10502 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

10503 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

10504 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

10505 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

10506 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

10507 
	#GL_DSDT8_NV
 0x8709

	)

10508 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

10509 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

10510 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

10511 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

10512 
	#GL_HI_SCALE_NV
 0x870E

	)

10513 
	#GL_LO_SCALE_NV
 0x870F

	)

10514 
	#GL_DS_SCALE_NV
 0x8710

	)

10515 
	#GL_DT_SCALE_NV
 0x8711

	)

10516 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

10517 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

10518 
	#GL_HI_BIAS_NV
 0x8714

	)

10519 
	#GL_LO_BIAS_NV
 0x8715

	)

10520 
	#GL_DS_BIAS_NV
 0x8716

	)

10521 
	#GL_DT_BIAS_NV
 0x8717

	)

10522 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

10523 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

10524 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

10525 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

10526 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

10527 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

10528 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

10529 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

10532 #i‚de‡
GL_NV_ãxtuª_shadî2


10533 
	#GL_NV_ãxtuª_shadî2
 1

	)

10534 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

10537 #i‚de‡
GL_NV_ãxtuª_shadî3


10538 
	#GL_NV_ãxtuª_shadî3
 1

	)

10539 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

10540 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

10541 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

10542 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

10543 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

10544 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

10545 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

10546 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

10547 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

10548 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

10549 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

10550 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

10551 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

10552 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

10553 
	#GL_HILO8_NV
 0x885E

	)

10554 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

10555 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

10558 #i‚de‡
GL_NV_å™sf‹m_„edback


10559 
	#GL_NV_å™sf‹m_„edback
 1

	)

10560 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

10561 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

10562 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

10563 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

10564 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

10565 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

10566 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

10567 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

10568 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

10569 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

10570 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

10571 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

10572 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

10573 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

10574 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

10575 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

10576 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

10577 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

10578 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

10579 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
 0x8C8A

	)

10580 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

10581 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

10582 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

10583 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

10584 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

10585 
	#GL_LAYER_NV
 0x8DAA

	)

10586 
	#GL_NEXT_BUFFER_NV
 -2

	)

10587 
	#GL_SKIP_COMPONENTS4_NV
 -3

	)

10588 
	#GL_SKIP_COMPONENTS3_NV
 -4

	)

10589 
	#GL_SKIP_COMPONENTS2_NV
 -5

	)

10590 
	#GL_SKIP_COMPONENTS1_NV
 -6

	)

10591 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

10592 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

10593 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

10594 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

10595 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

10596 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

10597 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

10598 (
APIENTRYP
 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

10599 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

10600 (
APIENTRYP
 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

10601 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

10602 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, GLsizeò
	tnbuf„rs
, c⁄° GLöà*
	tbuf°ªams
, 
	tGLíum
 
	tbuf„rMode
);

10603 #ifde‡
GL_GLEXT_PROTOTYPES


10604 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackNV
 (
GLíum
 
¥imôiveMode
);

10605 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackNV
 ();

10606 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, 
GLíum
 
buf„rMode
);

10607 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

10608 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

10609 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£NV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

10610 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsNV
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
loˇti⁄s
, 
GLíum
 
buf„rMode
);

10611 
GLAPI
 
APIENTRY
 
glA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

10612 
GLAPI
 
GLöt
 
APIENTRY
 
glGëV¨yögLoˇti⁄NV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

10613 
GLAPI
 
APIENTRY
 
glGëA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

10614 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLöt
 *
loˇti⁄
);

10615 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackSåómAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, GLsizeò
nbuf„rs
, c⁄° GLöà*
buf°ªams
, 
GLíum
 
buf„rMode
);

10619 #i‚de‡
GL_NV_å™sf‹m_„edback2


10620 
	#GL_NV_å™sf‹m_„edback2
 1

	)

10621 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

10622 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

10623 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

10624 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

10625 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

10626 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

10627 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

10628 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

10629 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

10630 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

10631 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

10632 #ifde‡
GL_GLEXT_PROTOTYPES


10633 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdbackNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10634 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

10635 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

10636 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdbackNV
 (
GLuöt
 
id
);

10637 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdbackNV
 ();

10638 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdbackNV
 ();

10639 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackNV
 (
GLíum
 
mode
, 
GLuöt
 
id
);

10643 #i‚de‡
GL_NV_unif‹m_buf„r_unifõd_mem‹y


10644 
	#GL_NV_unif‹m_buf„r_unifõd_mem‹y
 1

	)

10645 
	#GL_UNIFORM_BUFFER_UNIFIED_NV
 0x936E

	)

10646 
	#GL_UNIFORM_BUFFER_ADDRESS_NV
 0x936F

	)

10647 
	#GL_UNIFORM_BUFFER_LENGTH_NV
 0x9370

	)

10650 #i‚de‡
GL_NV_vd∑u_öãr›


10651 
	#GL_NV_vd∑u_öãr›
 1

	)

10652 
GLöçå
 
	tGLvd∑uSurÁ˚NV
;

10653 
	#GL_SURFACE_STATE_NV
 0x86EB

	)

10654 
	#GL_SURFACE_REGISTERED_NV
 0x86FD

	)

10655 
	#GL_SURFACE_MAPPED_NV
 0x8700

	)

10656 
	#GL_WRITE_DISCARD_NV
 0x88BE

	)

10657 (
APIENTRYP
 
	tPFNGLVDPAUINITNVPROC
Ë(c⁄° *
	tvdpDevi˚
, c⁄° *
	tgëProcAddªss
);

10658 (
APIENTRYP
 
	tPFNGLVDPAUFININVPROC
) ();

10659 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTERVIDEOSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

10660 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

10661 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLVDPAUISSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

10662 (
APIENTRYP
 
	tPFNGLVDPAUUNREGISTERSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

10663 (
APIENTRYP
 
	tPFNGLVDPAUGETSURFACEIVNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

10664 (
APIENTRYP
 
	tPFNGLVDPAUSURFACEACCESSNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	tac˚ss
);

10665 (
APIENTRYP
 
	tPFNGLVDPAUMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚s
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

10666 (
APIENTRYP
 
	tPFNGLVDPAUUNMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

10667 #ifde‡
GL_GLEXT_PROTOTYPES


10668 
GLAPI
 
APIENTRY
 
glVDPAUInôNV
 (c⁄° *
vdpDevi˚
, c⁄° *
gëProcAddªss
);

10669 
GLAPI
 
APIENTRY
 
glVDPAUFöiNV
 ();

10670 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îVideoSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

10671 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îOuçutSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

10672 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glVDPAUIsSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

10673 
GLAPI
 
APIENTRY
 
glVDPAUUƒegi°îSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

10674 
GLAPI
 
APIENTRY
 
glVDPAUGëSurÁ˚ivNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

10675 
GLAPI
 
APIENTRY
 
glVDPAUSurÁ˚Ac˚ssNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
ac˚ss
);

10676 
GLAPI
 
APIENTRY
 
glVDPAUM≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚s
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

10677 
GLAPI
 
APIENTRY
 
glVDPAUUnm≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

10681 #i‚de‡
GL_NV_vîãx_¨øy_ønge


10682 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

10683 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

10684 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

10685 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

10686 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

10687 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

10688 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

10689 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

10690 #ifde‡
GL_GLEXT_PROTOTYPES


10691 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

10692 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
 
Àngth
, c⁄° *
poöãr
);

10696 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


10697 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

10698 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

10701 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


10702 
	#GL_NV_vîãx_©åib_öãgî_64bô
 1

	)

10703 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
);

10704 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

10705 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

10706 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

10707 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10708 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10709 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10710 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10711 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

10712 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

10713 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

10714 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

10715 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10716 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10717 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10718 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10719 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

10720 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10721 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10722 #ifde‡
GL_GLEXT_PROTOTYPES


10723 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
);

10724 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

10725 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

10726 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

10727 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10728 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10729 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10730 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10731 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

10732 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

10733 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

10734 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

10735 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10736 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10737 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10738 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10739 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLi64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

10740 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10741 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10745 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


10746 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

10747 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

10748 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

10749 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

10750 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

10751 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

10752 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

10753 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

10754 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

10755 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

10756 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

10757 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

10758 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

10759 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

10760 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

10761 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

10762 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

10763 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

10764 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

10765 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

10766 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

10767 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

10768 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

10769 
	#GL_DRAW_INDIRECT_UNIFIED_NV
 0x8F40

	)

10770 
	#GL_DRAW_INDIRECT_ADDRESS_NV
 0x8F41

	)

10771 
	#GL_DRAW_INDIRECT_LENGTH_NV
 0x8F42

	)

10772 (
APIENTRYP
 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

10773 (
APIENTRYP
 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10774 (
APIENTRYP
 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10775 (
APIENTRYP
 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10776 (
APIENTRYP
 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10777 (
APIENTRYP
 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10778 (
APIENTRYP
 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

10779 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10780 (
APIENTRYP
 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10781 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

10782 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10783 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 *
	tªsu…
);

10784 #ifde‡
GL_GLEXT_PROTOTYPES


10785 
GLAPI
 
APIENTRY
 
glBuf„rAddªssR™geNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 
addªss
, 
GLsizeùå
 
Àngth
);

10786 
GLAPI
 
APIENTRY
 
glVîãxF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10787 
GLAPI
 
APIENTRY
 
glN‹mÆF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10788 
GLAPI
 
APIENTRY
 
glCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10789 
GLAPI
 
APIENTRY
 
glIndexF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10790 
GLAPI
 
APIENTRY
 
glTexCo‹dF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10791 
GLAPI
 
APIENTRY
 
glEdgeFœgF‹m©NV
 (
GLsizei
 
°ride
);

10792 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10793 
GLAPI
 
APIENTRY
 
glFogCo‹dF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10794 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
);

10795 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10796 
GLAPI
 
APIENTRY
 
glGëI¡egîui64i_vNV
 (
GLíum
 
vÆue
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 *
ªsu…
);

10800 #i‚de‡
GL_NV_vîãx_¥ogøm


10801 
	#GL_NV_vîãx_¥ogøm
 1

	)

10802 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

10803 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

10804 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

10805 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

10806 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

10807 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

10808 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

10809 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

10810 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

10811 
	#GL_IDENTITY_NV
 0x862A

	)

10812 
	#GL_INVERSE_NV
 0x862B

	)

10813 
	#GL_TRANSPOSE_NV
 0x862C

	)

10814 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

10815 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

10816 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

10817 
	#GL_MATRIX0_NV
 0x8630

	)

10818 
	#GL_MATRIX1_NV
 0x8631

	)

10819 
	#GL_MATRIX2_NV
 0x8632

	)

10820 
	#GL_MATRIX3_NV
 0x8633

	)

10821 
	#GL_MATRIX4_NV
 0x8634

	)

10822 
	#GL_MATRIX5_NV
 0x8635

	)

10823 
	#GL_MATRIX6_NV
 0x8636

	)

10824 
	#GL_MATRIX7_NV
 0x8637

	)

10825 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

10826 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

10827 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

10828 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

10829 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

10830 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

10831 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

10832 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

10833 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

10834 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

10835 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

10836 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

10837 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

10838 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

10839 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

10840 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

10841 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

10842 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

10843 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

10844 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

10845 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

10846 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

10847 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

10848 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

10849 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

10850 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

10851 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

10852 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

10853 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

10854 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

10855 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

10856 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

10857 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

10858 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

10859 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

10860 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

10861 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

10862 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

10863 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

10864 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

10865 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

10866 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

10867 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

10868 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

10869 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

10870 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

10871 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

10872 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

10873 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

10874 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

10875 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

10876 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

10877 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

10878 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

10879 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

10880 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

10881 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

10882 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

10883 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

10884 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

10885 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

10886 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

10887 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10888 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10889 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

10890 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10891 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10892 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10893 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

10894 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10895 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10896 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10897 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10898 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

10899 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

10900 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

10901 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10902 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10903 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10904 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10905 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10906 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10907 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10908 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

10909 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

10910 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

10911 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10912 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

10913 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10914 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

10915 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10916 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10917 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10918 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10919 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10920 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10921 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10922 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10923 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10924 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10925 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10926 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10927 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10928 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10929 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10930 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10931 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10932 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10933 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10934 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

10935 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

10936 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10937 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10938 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10939 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10940 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10941 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10942 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10943 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10944 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10945 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10946 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10947 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10948 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

10949 #ifde‡
GL_GLEXT_PROTOTYPES


10950 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
, GLboﬁó¿*
ªsidí˚s
);

10951 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10952 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10953 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
∑øms
);

10954 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

10955 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10956 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10957 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10958 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLubyã
 *
¥ogøm
);

10959 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10960 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10961 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10962 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10963 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

10964 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
 
id
);

10965 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
¥ogøm
);

10966 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10967 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10968 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10969 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10970 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10971 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10972 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10973 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
m©rix
, GLíum 
å™sf‹m
);

10974 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
 
ödex
, 
GLöt
 
fsize
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

10975 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

10976 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10977 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

10978 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10979 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

10980 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10981 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10982 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10983 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10984 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10985 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

10986 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10987 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10988 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10989 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10990 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10991 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10992 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10993 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10994 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10995 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10996 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10997 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

10998 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10999 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

11000 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

11001 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11002 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11003 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11004 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11005 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11006 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11007 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11008 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11009 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11010 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11011 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11012 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11013 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLubyã
 *
v
);

11017 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


11018 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

11021 #i‚de‡
GL_NV_vîãx_¥ogøm2


11022 
	#GL_NV_vîãx_¥ogøm2
 1

	)

11025 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


11026 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

11029 #i‚de‡
GL_NV_vîãx_¥ogøm3


11030 
	#GL_NV_vîãx_¥ogøm3
 1

	)

11033 #i‚de‡
GL_NV_vîãx_¥ogøm4


11034 
	#GL_NV_vîãx_¥ogøm4
 1

	)

11035 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

11036 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

11037 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

11038 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

11039 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11040 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

11041 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

11042 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

11043 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11044 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11045 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11046 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11047 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11048 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11049 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11050 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11051 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11052 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

11053 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

11054 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

11055 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

11056 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

11057 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11058 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

11059 #ifde‡
GL_GLEXT_PROTOTYPES


11060 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

11061 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

11062 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

11063 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11064 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
);

11065 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

11066 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

11067 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11068 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11069 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11070 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11071 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11072 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11073 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11074 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11075 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11076 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

11077 
GLAPI
 
APIENTRY
 
glVîãxAâribI4svEXT
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

11078 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

11079 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

11080 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

11081 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11082 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

11086 #i‚de‡
GL_NV_video_ˇ±uª


11087 
	#GL_NV_video_ˇ±uª
 1

	)

11088 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

11089 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

11090 
	#GL_FIELD_UPPER_NV
 0x9022

	)

11091 
	#GL_FIELD_LOWER_NV
 0x9023

	)

11092 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

11093 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

11094 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

11095 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

11096 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

11097 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

11098 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

11099 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

11100 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

11101 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

11102 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

11103 
	#GL_SUCCESS_NV
 0x902F

	)

11104 
	#GL_FAILURE_NV
 0x9030

	)

11105 
	#GL_YCBYCR8_422_NV
 0x9031

	)

11106 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

11107 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

11108 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

11109 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

11110 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

11111 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

11112 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

11113 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

11114 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

11115 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

11116 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

11117 (
APIENTRYP
 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

11118 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

11119 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

11120 (
APIENTRYP
 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

11121 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11122 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11123 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11124 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

11125 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà*
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

11126 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11127 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11128 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

11129 #ifde‡
GL_GLEXT_PROTOTYPES


11130 
GLAPI
 
APIENTRY
 
glBegöVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

11131 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómBuf„rNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, 
GLöçåARB
 
off£t
);

11132 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómTextuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, GLíum 
èrgë
, GLuöà
ãxtuª
);

11133 
GLAPI
 
APIENTRY
 
glEndVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

11134 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11135 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11136 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11137 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

11138 
GLAPI
 
GLíum
 
APIENTRY
 
glVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà*
£quí˚_num
, 
GLuöt64EXT
 *
ˇ±uª_time
);

11139 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11140 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11141 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

11145 #i‚de‡
GL_NV_võwp‹t_¨øy2


11146 
	#GL_NV_võwp‹t_¨øy2
 1

	)

11149 #i‚de‡
GL_NV_võwp‹t_swizzÀ


11150 
	#GL_NV_võwp‹t_swizzÀ
 1

	)

11151 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV
 0x9350

	)

11152 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV
 0x9351

	)

11153 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV
 0x9352

	)

11154 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV
 0x9353

	)

11155 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV
 0x9354

	)

11156 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV
 0x9355

	)

11157 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV
 0x9356

	)

11158 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV
 0x9357

	)

11159 
	#GL_VIEWPORT_SWIZZLE_X_NV
 0x9358

	)

11160 
	#GL_VIEWPORT_SWIZZLE_Y_NV
 0x9359

	)

11161 
	#GL_VIEWPORT_SWIZZLE_Z_NV
 0x935A

	)

11162 
	#GL_VIEWPORT_SWIZZLE_W_NV
 0x935B

	)

11163 (
APIENTRYP
 
	tPFNGLVIEWPORTSWIZZLENVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tswizzÀx
, GLíum 
	tswizzÀy
, GLíum 
	tswizzÀz
, GLíum 
	tswizzÀw
);

11164 #ifde‡
GL_GLEXT_PROTOTYPES


11165 
GLAPI
 
APIENTRY
 
glVõwp‹tSwizzÀNV
 (
GLuöt
 
ödex
, 
GLíum
 
swizzÀx
, GLíum 
swizzÀy
, GLíum 
swizzÀz
, GLíum 
swizzÀw
);

11169 #i‚de‡
GL_OML_öãæa˚


11170 
	#GL_OML_öãæa˚
 1

	)

11171 
	#GL_INTERLACE_OML
 0x8980

	)

11172 
	#GL_INTERLACE_READ_OML
 0x8981

	)

11175 #i‚de‡
GL_OML_ªßm∂e


11176 
	#GL_OML_ªßm∂e
 1

	)

11177 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

11178 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

11179 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

11180 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

11181 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

11182 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

11185 #i‚de‡
GL_OML_subßm∂e


11186 
	#GL_OML_subßm∂e
 1

	)

11187 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

11188 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

11191 #i‚de‡
GL_OVR_mu…ivõw


11192 
	#GL_OVR_mu…ivõw
 1

	)

11193 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR
 0x9630

	)

11194 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR
 0x9632

	)

11195 
	#GL_MAX_VIEWS_OVR
 0x9631

	)

11196 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tba£VõwIndex
, 
	tGLsizei
 
	tnumVõws
);

11197 #ifde‡
GL_GLEXT_PROTOTYPES


11198 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªMu…ivõwOVR
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
ba£VõwIndex
, 
GLsizei
 
numVõws
);

11202 #i‚de‡
GL_OVR_mu…ivõw2


11203 
	#GL_OVR_mu…ivõw2
 1

	)

11206 #i‚de‡
GL_PGI_misc_höts


11207 
	#GL_PGI_misc_höts
 1

	)

11208 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

11209 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

11210 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

11211 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

11212 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

11213 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

11214 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

11215 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

11216 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

11217 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

11218 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

11219 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

11220 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

11221 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

11222 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

11223 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

11224 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

11225 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

11226 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

11227 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

11228 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

11229 #ifde‡
GL_GLEXT_PROTOTYPES


11230 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
 
èrgë
, 
GLöt
 
mode
);

11234 #i‚de‡
GL_PGI_vîãx_höts


11235 
	#GL_PGI_vîãx_höts
 1

	)

11236 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

11237 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

11238 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

11239 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

11240 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

11241 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

11242 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

11243 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

11244 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

11245 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

11246 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

11247 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

11248 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

11249 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

11250 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

11251 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

11252 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

11253 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

11254 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

11255 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

11256 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

11257 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

11260 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


11261 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

11262 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

11263 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

11266 #i‚de‡
GL_S3_s3tc


11267 
	#GL_S3_s3tc
 1

	)

11268 
	#GL_RGB_S3TC
 0x83A0

	)

11269 
	#GL_RGB4_S3TC
 0x83A1

	)

11270 
	#GL_RGBA_S3TC
 0x83A2

	)

11271 
	#GL_RGBA4_S3TC
 0x83A3

	)

11272 
	#GL_RGBA_DXT5_S3TC
 0x83A4

	)

11273 
	#GL_RGBA4_DXT5_S3TC
 0x83A5

	)

11276 #i‚de‡
GL_SGIS_dëaû_ãxtuª


11277 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

11278 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

11279 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

11280 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

11281 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

11282 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

11283 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

11284 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

11285 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

11286 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11287 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

11288 #ifde‡
GL_GLEXT_PROTOTYPES


11289 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11290 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

11294 #i‚de‡
GL_SGIS_fog_fun˘i⁄


11295 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

11296 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

11297 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

11298 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

11299 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11300 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

11301 #ifde‡
GL_GLEXT_PROTOTYPES


11302 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11303 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *
poöts
);

11307 #i‚de‡
GL_SGIS_gíî©e_mùm≠


11308 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

11309 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

11310 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

11313 #i‚de‡
GL_SGIS_mu…ißm∂e


11314 
	#GL_SGIS_mu…ißm∂e
 1

	)

11315 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

11316 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

11317 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

11318 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

11319 
	#GL_1PASS_SGIS
 0x80A1

	)

11320 
	#GL_2PASS_0_SGIS
 0x80A2

	)

11321 
	#GL_2PASS_1_SGIS
 0x80A3

	)

11322 
	#GL_4PASS_0_SGIS
 0x80A4

	)

11323 
	#GL_4PASS_1_SGIS
 0x80A5

	)

11324 
	#GL_4PASS_2_SGIS
 0x80A6

	)

11325 
	#GL_4PASS_3_SGIS
 0x80A7

	)

11326 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

11327 
	#GL_SAMPLES_SGIS
 0x80A9

	)

11328 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

11329 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

11330 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

11331 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

11332 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

11333 #ifde‡
GL_GLEXT_PROTOTYPES


11334 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

11335 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
 
∑âîn
);

11339 #i‚de‡
GL_SGIS_pixñ_ãxtuª


11340 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

11341 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

11342 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

11343 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

11344 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

11345 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11346 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11347 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11348 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11349 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11350 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11351 #ifde‡
GL_GLEXT_PROTOTYPES


11352 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11353 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11354 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11355 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11356 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11357 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11361 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


11362 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

11363 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

11364 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

11365 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

11366 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

11367 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

11368 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

11369 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

11370 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

11373 #i‚de‡
GL_SGIS_poöt_∑ømëîs


11374 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

11375 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

11376 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

11377 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

11378 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

11379 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11380 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11381 #ifde‡
GL_GLEXT_PROTOTYPES


11382 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11383 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11387 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


11388 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

11389 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

11390 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

11391 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

11392 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

11393 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11394 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

11395 #ifde‡
GL_GLEXT_PROTOTYPES


11396 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11397 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

11401 #i‚de‡
GL_SGIS_ãxtuª4D


11402 
	#GL_SGIS_ãxtuª4D
 1

	)

11403 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

11404 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

11405 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

11406 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

11407 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

11408 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

11409 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

11410 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

11411 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

11412 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

11413 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

11414 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

11415 #ifde‡
GL_GLEXT_PROTOTYPES


11416 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

11417 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
woff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

11421 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


11422 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

11423 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

11426 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


11427 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

11428 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

11429 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

11430 #ifde‡
GL_GLEXT_PROTOTYPES


11431 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

11435 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


11436 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

11437 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

11440 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


11441 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

11442 
	#GL_FILTER4_SGIS
 0x8146

	)

11443 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

11444 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

11445 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

11446 #ifde‡
GL_GLEXT_PROTOTYPES


11447 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLÊﬂt
 *
weights
);

11448 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
weights
);

11452 #i‚de‡
GL_SGIS_ãxtuª_lod


11453 
	#GL_SGIS_ãxtuª_lod
 1

	)

11454 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

11455 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

11456 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

11457 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

11460 #i‚de‡
GL_SGIS_ãxtuª_£À˘


11461 
	#GL_SGIS_ãxtuª_£À˘
 1

	)

11462 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

11463 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

11464 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

11465 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

11466 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

11467 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

11468 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

11469 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

11470 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

11471 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

11472 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

11473 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

11474 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

11475 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

11476 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

11477 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

11478 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

11479 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

11480 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

11481 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

11482 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

11483 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

11486 #i‚de‡
GL_SGIX_async


11487 
	#GL_SGIX_async
 1

	)

11488 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

11489 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

11490 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

11491 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

11492 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

11493 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

11494 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

11495 #ifde‡
GL_GLEXT_PROTOTYPES


11496 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

11497 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

11498 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

11499 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
 
ønge
);

11500 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
 
m¨kî
, 
GLsizei
 
ønge
);

11501 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

11505 #i‚de‡
GL_SGIX_async_hi°ogøm


11506 
	#GL_SGIX_async_hi°ogøm
 1

	)

11507 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

11508 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

11511 #i‚de‡
GL_SGIX_async_pixñ


11512 
	#GL_SGIX_async_pixñ
 1

	)

11513 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

11514 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

11515 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

11516 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

11517 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

11518 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

11521 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


11522 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

11523 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

11524 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

11527 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


11528 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

11529 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

11532 #i‚de‡
GL_SGIX_˛ùm≠


11533 
	#GL_SGIX_˛ùm≠
 1

	)

11534 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

11535 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

11536 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

11537 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

11538 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

11539 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

11540 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

11541 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

11542 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

11543 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

11544 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

11545 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

11548 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


11549 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

11550 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

11553 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


11554 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

11557 #i‚de‡
GL_SGIX_dïth_ãxtuª


11558 
	#GL_SGIX_dïth_ãxtuª
 1

	)

11559 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

11560 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

11561 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

11564 #i‚de‡
GL_SGIX_Êush_ø°î


11565 
	#GL_SGIX_Êush_ø°î
 1

	)

11566 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

11567 #ifde‡
GL_GLEXT_PROTOTYPES


11568 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

11572 #i‚de‡
GL_SGIX_fog_off£t


11573 
	#GL_SGIX_fog_off£t
 1

	)

11574 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

11575 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

11578 #i‚de‡
GL_SGIX_‰agmít_lightög


11579 
	#GL_SGIX_‰agmít_lightög
 1

	)

11580 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

11581 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

11582 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

11583 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

11584 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

11585 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

11586 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

11587 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

11588 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

11589 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

11590 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

11591 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

11592 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

11593 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

11594 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

11595 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

11596 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

11597 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

11598 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

11599 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

11600 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

11601 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11602 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11603 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11604 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11605 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11606 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11607 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11608 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11609 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11610 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11611 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11612 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11613 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11614 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11615 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11616 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11617 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11618 #ifde‡
GL_GLEXT_PROTOTYPES


11619 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
 
Á˚
, GLíum 
mode
);

11620 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11621 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11622 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11623 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11624 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11625 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11626 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11627 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11628 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11629 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11630 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11631 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11632 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11633 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11634 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11635 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11636 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11640 #i‚de‡
GL_SGIX_‰amezoom


11641 
	#GL_SGIX_‰amezoom
 1

	)

11642 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

11643 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

11644 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

11645 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

11646 #ifde‡
GL_GLEXT_PROTOTYPES


11647 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
 
Á˘‹
);

11651 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


11652 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

11653 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° *
	t∑øms
);

11654 #ifde‡
GL_GLEXT_PROTOTYPES


11655 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
 
≤ame
, c⁄° *
∑øms
);

11659 #i‚de‡
GL_SGIX_ö°rumíts


11660 
	#GL_SGIX_ö°rumíts
 1

	)

11661 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

11662 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

11663 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

11664 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

11665 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

11666 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

11667 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

11668 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

11669 #ifde‡
GL_GLEXT_PROTOTYPES


11670 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

11671 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
 
size
, 
GLöt
 *
buf„r
);

11672 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLöà*
m¨kî_p
);

11673 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
 
m¨kî
);

11674 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

11675 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
 
m¨kî
);

11679 #i‚de‡
GL_SGIX_öãæa˚


11680 
	#GL_SGIX_öãæa˚
 1

	)

11681 
	#GL_INTERLACE_SGIX
 0x8094

	)

11684 #i‚de‡
GL_SGIX_ú_ö°rumít1


11685 
	#GL_SGIX_ú_ö°rumít1
 1

	)

11686 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

11689 #i‚de‡
GL_SGIX_li°_¥i‹ôy


11690 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

11691 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

11692 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11693 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11694 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11695 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11696 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11697 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11698 #ifde‡
GL_GLEXT_PROTOTYPES


11699 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11700 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11701 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11702 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11703 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11704 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11708 #i‚de‡
GL_SGIX_pixñ_ãxtuª


11709 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

11710 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

11711 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

11712 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

11713 #ifde‡
GL_GLEXT_PROTOTYPES


11714 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
 
mode
);

11718 #i‚de‡
GL_SGIX_pixñ_tûes


11719 
	#GL_SGIX_pixñ_tûes
 1

	)

11720 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

11721 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

11722 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

11723 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

11724 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

11725 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

11726 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

11727 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

11730 #i‚de‡
GL_SGIX_pﬁynomül_ffd


11731 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

11732 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

11733 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

11734 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

11735 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

11736 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

11737 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

11738 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

11739 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

11740 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

11741 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

11742 #ifde‡
GL_GLEXT_PROTOTYPES


11743 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLdoubÀ 
w1
, GLdoubÀ 
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLdoubÀ *
poöts
);

11744 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLÊﬂà
w1
, GLÊﬂà
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLÊﬂà*
poöts
);

11745 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
 
mask
);

11746 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
 
mask
);

11750 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


11751 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

11752 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

11753 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

11754 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

11755 #ifde‡
GL_GLEXT_PROTOTYPES


11756 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *
equ©i⁄
);

11760 #i‚de‡
GL_SGIX_ªßm∂e


11761 
	#GL_SGIX_ªßm∂e
 1

	)

11762 
	#GL_PACK_RESAMPLE_SGIX
 0x842E

	)

11763 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842F

	)

11764 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x8433

	)

11765 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x8434

	)

11766 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

11769 #i‚de‡
GL_SGIX_sˇÀbüs_höt


11770 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

11771 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

11774 #i‚de‡
GL_SGIX_shadow


11775 
	#GL_SGIX_shadow
 1

	)

11776 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

11777 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

11778 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

11779 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

11782 #i‚de‡
GL_SGIX_shadow_ambõ¡


11783 
	#GL_SGIX_shadow_ambõ¡
 1

	)

11784 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

11787 #i‚de‡
GL_SGIX_•rôe


11788 
	#GL_SGIX_•rôe
 1

	)

11789 
	#GL_SPRITE_SGIX
 0x8148

	)

11790 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

11791 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

11792 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

11793 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

11794 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

11795 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

11796 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11797 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11798 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11799 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11800 #ifde‡
GL_GLEXT_PROTOTYPES


11801 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11802 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11803 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11804 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11808 #i‚de‡
GL_SGIX_subßm∂e


11809 
	#GL_SGIX_subßm∂e
 1

	)

11810 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

11811 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

11812 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

11813 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

11814 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

11817 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


11818 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

11819 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

11820 #ifde‡
GL_GLEXT_PROTOTYPES


11821 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

11825 #i‚de‡
GL_SGIX_ãxtuª_add_ív


11826 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

11827 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

11830 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


11831 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

11832 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

11833 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

11834 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

11837 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


11838 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

11839 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

11840 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

11841 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

11844 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


11845 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

11846 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

11849 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


11850 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

11851 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

11852 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

11853 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

11854 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

11857 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


11858 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

11859 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

11860 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

11863 #i‚de‡
GL_SGIX_y¸cb


11864 
	#GL_SGIX_y¸cb
 1

	)

11865 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

11866 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

11869 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


11870 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

11873 #i‚de‡
GL_SGIX_y¸cba


11874 
	#GL_SGIX_y¸cba
 1

	)

11875 
	#GL_YCRCB_SGIX
 0x8318

	)

11876 
	#GL_YCRCBA_SGIX
 0x8319

	)

11879 #i‚de‡
GL_SGI_cﬁ‹_m©rix


11880 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

11881 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

11882 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

11883 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

11884 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

11885 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

11886 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

11887 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

11888 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

11889 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

11890 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

11891 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

11894 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


11895 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

11896 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

11897 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

11898 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

11899 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

11900 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

11901 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

11902 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

11903 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

11904 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

11905 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

11906 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

11907 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

11908 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

11909 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

11910 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

11911 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

11912 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

11913 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11914 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11915 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

11916 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

11917 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11918 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11919 #ifde‡
GL_GLEXT_PROTOTYPES


11920 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

11921 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11922 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11923 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

11924 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

11925 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11926 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11930 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


11931 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

11932 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

11933 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

11936 #i‚de‡
GL_SUNX_c⁄°™t_d©a


11937 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

11938 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

11939 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

11940 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

11941 #ifde‡
GL_GLEXT_PROTOTYPES


11942 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

11946 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


11947 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

11948 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

11951 #i‚de‡
GL_SUN_globÆ_Æpha


11952 
	#GL_SUN_globÆ_Æpha
 1

	)

11953 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

11954 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

11955 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

11956 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

11957 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

11958 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

11959 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

11960 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

11961 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

11962 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

11963 #ifde‡
GL_GLEXT_PROTOTYPES


11964 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
 
Á˘‹
);

11965 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
 
Á˘‹
);

11966 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
 
Á˘‹
);

11967 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
 
Á˘‹
);

11968 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
 
Á˘‹
);

11969 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
 
Á˘‹
);

11970 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
 
Á˘‹
);

11971 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
 
Á˘‹
);

11975 #i‚de‡
GL_SUN_mesh_¨øy


11976 
	#GL_SUN_mesh_¨øy
 1

	)

11977 
	#GL_QUAD_MESH_SUN
 0x8614

	)

11978 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

11979 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

11980 #ifde‡
GL_GLEXT_PROTOTYPES


11981 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
width
);

11985 #i‚de‡
GL_SUN_¶i˚_accum


11986 
	#GL_SUN_¶i˚_accum
 1

	)

11987 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

11990 #i‚de‡
GL_SUN_åüngÀ_li°


11991 
	#GL_SUN_åüngÀ_li°
 1

	)

11992 
	#GL_RESTART_SUN
 0x0001

	)

11993 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

11994 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

11995 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

11996 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

11997 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

11998 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

11999 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

12000 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

12001 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

12002 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

12003 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

12004 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

12005 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

12006 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

12007 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

12008 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

12009 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

12010 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

12011 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

12012 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

12013 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

12014 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

12015 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° **
	tpoöãr
);

12016 #ifde‡
GL_GLEXT_PROTOTYPES


12017 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
 
code
);

12018 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
 
code
);

12019 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
 
code
);

12020 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *
code
);

12021 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *
code
);

12022 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *
code
);

12023 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° **
poöãr
);

12027 #i‚de‡
GL_SUN_vîãx


12028 
	#GL_SUN_vîãx
 1

	)

12029 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12030 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12031 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12032 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12033 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12034 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

12035 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12036 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

12037 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12038 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12039 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12040 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

12041 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

12042 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

12043 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12044 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

12045 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12046 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

12047 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12048 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12049 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12050 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12051 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

12052 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12053 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12054 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12055 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12056 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12057 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12058 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

12059 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12060 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

12061 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12062 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12063 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12064 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

12065 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12066 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12067 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12068 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12069 #ifde‡
GL_GLEXT_PROTOTYPES


12070 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

12071 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

12072 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12073 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

12074 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12075 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

12076 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12077 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

12078 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12079 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12080 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12081 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12082 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

12083 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12084 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12085 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° 
GLubyã
 *
c
, c⁄° GLÊﬂà*
v
);

12086 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12087 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
v
);

12088 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12089 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12090 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12091 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12092 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

12093 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12094 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12095 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
v
);

12096 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
 
rc
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12097 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

12098 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12099 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

12100 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12101 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

12102 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12103 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12104 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12105 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12106 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12107 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12108 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12109 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12113 #i‚de‡
GL_WIN_ph⁄g_shadög


12114 
	#GL_WIN_ph⁄g_shadög
 1

	)

12115 
	#GL_PHONG_WIN
 0x80EA

	)

12116 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

12119 #i‚de‡
GL_WIN_•ecuœr_fog


12120 
	#GL_WIN_•ecuœr_fog
 1

	)

12121 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

12124 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
44
1203
/home/yunyao/dev/C++/backup/square_demo_V7.0/HBuilding.h
/home/yunyao/dev/C++/backup/square_demo_V7.0/Objects.h
/home/yunyao/dev/C++/backup/square_demo_V7.0/Rectangle.h
/home/yunyao/dev/C++/backup/square_demo_V7.0/config.cpp
/home/yunyao/dev/C++/backup/square_demo_V7.0/config.h
/home/yunyao/dev/C++/backup/square_demo_V7.0/image.h
/home/yunyao/dev/C++/backup/square_demo_V7.0/main.cpp
/home/yunyao/dev/C++/backup/square_demo_V7.0/tcp_server.h
/home/yunyao/dev/C++/backup/square_demo_V7.0/texture.h
/usr/include/GL/gl.h
/usr/include/GL/glu.h
/usr/include/GL/glut.h
/usr/include/arpa/inet.h
/usr/include/fcntl.h
/usr/include/netinet/in.h
/usr/include/pthread.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
HBuilding.h
Objects.h
Rectangle.h
config.h
image.h
tcp_server.h
texture.h
/usr/include/GL/glext.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sched.h
/usr/include/stdint.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/inttypes.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
